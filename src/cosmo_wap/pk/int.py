import numpy as np
from cosmo_wap.integrated import BaseInt
from cosmo_wap.lib import utils

""" To Do:
Remove function calls: cosmo_funcs.Pk() and G_expr(xd1, xd2, d) from expr
Simplify int_terms2 as xd1==xd2
"""    
class IntNPP(BaseInt):
    @staticmethod
    def l0(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128):
        return BaseInt.single_int(IntNPP.l0_integrand, cosmo_funcs, k1, zz=zz, t=t, sigma=sigma, n=n)
        
    @staticmethod
    def l0_integrand(xd,cosmo_funcs, k1, zz=0, t=0, sigma=None):

        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        _,f,D1,b1,xb1 = cosmo_funcs.unpack_pk(k1,zz)
        zzd1, fd, D1d, Hd, OMd = BaseInt.get_integrand_params(cosmo_funcs, xd)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd, d):
            return (d + xd) / (2 * d)
            
        expr = 3*1j*D1*D1d*Hd**2*OMd*BaseInt.pk(k1/G_expr(xd, d))*((-1j*np.sin(k1*(d - xd)/G_expr(xd, d)) + np.cos(k1*(d - xd)/G_expr(xd, d)))*(G_expr(xd, d)*d**4*k1**2*(b1 + f)*(G_expr(xd, d)*H**2*Hd*be*(fd - 1) - G_expr(xd, d)*Hd*(fd - 1)*(2*H**2*Qm + Hp) - 2*1j*H**2*k1*(Qm - 1)) + G_expr(xd, d)*d**3*k1*(2*1j*G_expr(xd, d)**2*Hd*f*(fd - 1)*(2*H**2*Qm + Hp) - 1j*G_expr(xd, d)*H**2*Hd*be*f*(2*G_expr(xd, d) - 3*1j*k1*xd)*(fd - 1) + G_expr(xd, d)*Hd*b1*k1*(fd - 1)*(-3*H**2*xd*(-2*Qm + be) + 2*H*(Qm - 1) + 3*Hp*xd) + G_expr(xd, d)*f*k1*(H**2*(Qm*(6*Hd*xd*(fd - 1) - 4) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) + 10*1j*H**2*b1*k1**2*xd*(Qm - 1) + 10*1j*H**2*f*k1**2*xd*(Qm - 1)) + G_expr(xd, d)*d**2*(G_expr(xd, d)*H**2*Hd*be*(fd - 1)*(3*b1*k1**2*xd**2 + f*(-2*G_expr(xd, d)**2 + 4*1j*G_expr(xd, d)*k1*xd + 3*k1**2*xd**2)) + b1*k1**2*xd*(G_expr(xd, d)*(H**2*(Qm*(-6*Hd*xd*(fd - 1) + 2) - 2) - 6*H*Hd*(Qm - 1)*(fd - 1) - 3*Hd*Hp*xd*(fd - 1)) - 18*1j*H**2*k1*xd*(Qm - 1)) + f*(2*G_expr(xd, d)**3*Hd*(fd - 1)*(2*H**2*Qm + Hp) - 4*1j*G_expr(xd, d)**2*k1*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 1) + 1) + H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd*(H**2*(Qm*(-6*Hd*xd*(fd - 1) + 22) - 22) - 6*H*Hd*(Qm - 1)*(fd - 1) - 3*Hd*Hp*xd*(fd - 1)) - 18*1j*H**2*k1**3*xd**2*(Qm - 1))) - H*xd*(Qm - 1)*(-2*G_expr(xd, d)*b1*k1**2*xd**2*(G_expr(xd, d)*(H - Hd*fd + Hd) - 2*1j*H*k1*xd) + 2*G_expr(xd, d)*f*(2*G_expr(xd, d)**3*(8*H - Hd*fd + Hd) - 2*1j*G_expr(xd, d)**2*k1*xd*(8*H - Hd*fd + Hd) - G_expr(xd, d)*k1**2*xd**2*(7*H - Hd*fd + Hd) + 2*1j*H*k1**3*xd**3)) + d*(G_expr(xd, d)*b1*k1**2*xd**2*(G_expr(xd, d)*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 2) + 4) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 14*1j*H**2*k1*xd*(Qm - 1)) + G_expr(xd, d)*f*(-2*G_expr(xd, d)**3*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 2) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 2*1j*G_expr(xd, d)**2*k1*xd*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 10) + 20) + 4*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd**2*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 16) + 32) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 14*1j*H**2*k1**3*xd**3*(Qm - 1)))) + (-1j*np.sin(k1*(d - xd)/G_expr(xd, d)) + np.cos(k1*(d - xd)/G_expr(xd, d)))*(-G_expr(xd, d)*d**4*k1**2*(f + xb1)*(G_expr(xd, d)*Hd*(fd - 1)*(-H**2*(-2*xQm + xbe) + Hp) + 2*1j*H**2*k1*(xQm - 1)) + G_expr(xd, d)*d**3*k1*(2*1j*G_expr(xd, d)**2*Hd*f*(fd - 1)*(-H**2*(-2*xQm + xbe) + Hp) + G_expr(xd, d)*k1*(H**2*(-3*Hd*xd*(f + xb1)*(fd - 1)*(-2*xQm + xbe) - 4*f*(xQm - 1)) + 2*H*Hd*(f + xb1)*(fd - 1)*(xQm - 1) + 3*Hd*Hp*xd*(f + xb1)*(fd - 1)) + 10*1j*H**2*k1**2*xd*(f + xb1)*(xQm - 1)) - H*xd*(xQm - 1)*(2*G_expr(xd, d)*f*(2*G_expr(xd, d)**3*(8*H - Hd*fd + Hd) - 2*1j*G_expr(xd, d)**2*k1*xd*(8*H - Hd*fd + Hd) - G_expr(xd, d)*k1**2*xd**2*(7*H - Hd*fd + Hd) + 2*1j*H*k1**3*xd**3) - 2*G_expr(xd, d)*k1**2*xb1*xd**2*(G_expr(xd, d)*(H - Hd*fd + Hd) - 2*1j*H*k1*xd)) + d**2*(G_expr(xd, d)*f*(2*G_expr(xd, d)**3*Hd*(fd - 1)*(-H**2*(-2*xQm + xbe) + Hp) + 4*1j*G_expr(xd, d)**2*k1*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*xQm - 2) + H*Hd*(-fd*xQm + fd + xQm - 1) - Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 22*xQm - 22) - 6*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) - 18*1j*H**2*k1**3*xd**2*(xQm - 1)) + G_expr(xd, d)*k1**2*xb1*xd*(G_expr(xd, d)*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*xQm - 2) - 6*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) - 18*1j*H**2*k1*xd*(xQm - 1))) + d*(G_expr(xd, d)*f*(2*G_expr(xd, d)**3*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 4*xQm - 4) - 2*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) - 2*1j*G_expr(xd, d)**2*k1*xd*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 20*xQm - 20) - 4*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd**2*(H**2*(-Hd*xd*(fd - 1)*(-2*xQm + xbe) - 32*xQm + 32) + 6*H*Hd*(fd - 1)*(xQm - 1) + Hd*Hp*xd*(fd - 1)) + 14*1j*H**2*k1**3*xd**3*(xQm - 1)) + G_expr(xd, d)*k1**2*xb1*xd**2*(G_expr(xd, d)*(H**2*(-Hd*xd*(fd - 1)*(-2*xQm + xbe) - 4*xQm + 4) + 6*H*Hd*(fd - 1)*(xQm - 1) + Hd*Hp*xd*(fd - 1)) + 14*1j*H**2*k1*xd*(xQm - 1)))) - (1j*np.sin(k1*(d - xd)/G_expr(xd, d)) + np.cos(k1*(d - xd)/G_expr(xd, d)))*(G_expr(xd, d)*d**4*k1**2*(b1 + f)*(G_expr(xd, d)*H**2*Hd*be*(fd - 1) - G_expr(xd, d)*Hd*(fd - 1)*(2*H**2*Qm + Hp) + 2*1j*H**2*k1*(Qm - 1)) + G_expr(xd, d)*d**2*(G_expr(xd, d)*H**2*Hd*be*(fd - 1)*(3*b1*k1**2*xd**2 + f*(-2*G_expr(xd, d)**2 - 4*1j*G_expr(xd, d)*k1*xd + 3*k1**2*xd**2)) + b1*k1**2*xd*(G_expr(xd, d)*(H**2*(Qm*(-6*Hd*xd*(fd - 1) + 2) - 2) - 6*H*Hd*(Qm - 1)*(fd - 1) - 3*Hd*Hp*xd*(fd - 1)) + 18*1j*H**2*k1*xd*(Qm - 1)) + f*(2*G_expr(xd, d)**3*Hd*(fd - 1)*(2*H**2*Qm + Hp) + 4*1j*G_expr(xd, d)**2*k1*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 1) + 1) + H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd*(H**2*(Qm*(-6*Hd*xd*(fd - 1) + 22) - 22) - 6*H*Hd*(Qm - 1)*(fd - 1) - 3*Hd*Hp*xd*(fd - 1)) + 18*1j*H**2*k1**3*xd**2*(Qm - 1))) - H*xd*(Qm - 1)*(-2*G_expr(xd, d)*b1*k1**2*xd**2*(G_expr(xd, d)*(H - Hd*fd + Hd) + 2*1j*H*k1*xd) + 2*G_expr(xd, d)*f*(2*G_expr(xd, d)**3*(8*H - Hd*fd + Hd) + 2*1j*G_expr(xd, d)**2*k1*xd*(8*H - Hd*fd + Hd) + G_expr(xd, d)*k1**2*xd**2*(-7*H + Hd*(fd - 1)) - 2*1j*H*k1**3*xd**3)) + d**3*k1*(G_expr(xd, d)*b1*k1*(G_expr(xd, d)*Hd*(fd - 1)*(-3*H**2*xd*(-2*Qm + be) + 2*H*(Qm - 1) + 3*Hp*xd) - 10*1j*H**2*k1*xd*(Qm - 1)) + G_expr(xd, d)*f*(-2*1j*G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) + 1j*G_expr(xd, d)*H**2*Hd*be*(2*G_expr(xd, d) + 3*1j*k1*xd)*(fd - 1) + G_expr(xd, d)*k1*(H**2*(Qm*(6*Hd*xd*(fd - 1) - 4) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) - 10*1j*H**2*k1**2*xd*(Qm - 1))) + d*(G_expr(xd, d)*b1*k1**2*xd**2*(G_expr(xd, d)*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 2) + 4) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 14*1j*H**2*k1*xd*(Qm - 1)) + G_expr(xd, d)*f*(-2*G_expr(xd, d)**3*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 2) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 2*1j*G_expr(xd, d)**2*k1*xd*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 10) + 20) + 4*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd**2*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 16) + 32) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 14*1j*H**2*k1**3*xd**3*(Qm - 1)))) - (1j*np.sin(k1*(d - xd)/G_expr(xd, d)) + np.cos(k1*(d - xd)/G_expr(xd, d)))*(-G_expr(xd, d)*d**4*k1**2*(f + xb1)*(G_expr(xd, d)*Hd*(fd - 1)*(-H**2*(-2*xQm + xbe) + Hp) - 2*1j*H**2*k1*(xQm - 1)) + G_expr(xd, d)*d**3*k1*(-2*1j*G_expr(xd, d)**2*Hd*f*(fd - 1)*(-H**2*(-2*xQm + xbe) + Hp) + G_expr(xd, d)*k1*(H**2*(-3*Hd*xd*(f + xb1)*(fd - 1)*(-2*xQm + xbe) - 4*f*(xQm - 1)) + 2*H*Hd*(f + xb1)*(fd - 1)*(xQm - 1) + 3*Hd*Hp*xd*(f + xb1)*(fd - 1)) - 10*1j*H**2*k1**2*xd*(f + xb1)*(xQm - 1)) - H*xd*(xQm - 1)*(2*G_expr(xd, d)*f*(2*G_expr(xd, d)**3*(8*H - Hd*fd + Hd) + 2*1j*G_expr(xd, d)**2*k1*xd*(8*H - Hd*fd + Hd) + G_expr(xd, d)*k1**2*xd**2*(-7*H + Hd*(fd - 1)) - 2*1j*H*k1**3*xd**3) - 2*G_expr(xd, d)*k1**2*xb1*xd**2*(G_expr(xd, d)*(H - Hd*fd + Hd) + 2*1j*H*k1*xd)) + d**2*(G_expr(xd, d)*f*(2*G_expr(xd, d)**3*Hd*(fd - 1)*(-H**2*(-2*xQm + xbe) + Hp) - 4*1j*G_expr(xd, d)**2*k1*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*xQm - 2) + H*Hd*(-fd*xQm + fd + xQm - 1) - Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 22*xQm - 22) - 6*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + 18*1j*H**2*k1**3*xd**2*(xQm - 1)) + G_expr(xd, d)*k1**2*xb1*xd*(G_expr(xd, d)*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*xQm - 2) - 6*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + 18*1j*H**2*k1*xd*(xQm - 1))) + d*(G_expr(xd, d)*f*(2*G_expr(xd, d)**3*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 4*xQm - 4) - 2*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + 2*1j*G_expr(xd, d)**2*k1*xd*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 20*xQm - 20) - 4*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)*k1**2*xd**2*(H**2*(-Hd*xd*(fd - 1)*(-2*xQm + xbe) - 32*xQm + 32) + 6*H*Hd*(fd - 1)*(xQm - 1) + Hd*Hp*xd*(fd - 1)) - 14*1j*H**2*k1**3*xd**3*(xQm - 1)) + G_expr(xd, d)*k1**2*xb1*xd**2*(G_expr(xd, d)*(H**2*(-Hd*xd*(fd - 1)*(-2*xQm + xbe) - 4*xQm + 4) + 6*H*Hd*(fd - 1)*(xQm - 1) + Hd*Hp*xd*(fd - 1)) - 14*1j*H**2*k1*xd*(xQm - 1)))))/(2*G_expr(xd, d)**2*H**2*d*k1**5*(d - xd)**4)
        return expr
    
    def l1(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128):
        return BaseInt.single_int(IntNPP.l0_integrand, cosmo_funcs, k1, zz=zz, t=t, sigma=sigma, n=n)
        
    @staticmethod
    def l1_integrand(xd,cosmo_funcs, k1, zz=0, t=0, sigma=None):

        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        _,f,D1,b1,xb1 = cosmo_funcs.unpack_pk(k1,zz)
        zzd1, fd, D1d, Hd, OMd = BaseInt.get_integrand_params(cosmo_funcs, xd)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd, d):
            return (d + xd) / (2 * d)
            
        expr = -9*1j*D1*D1d*Hd**2*OMd*BaseInt.pk(k1/G_expr(xd, d),zzd1)*(G_expr(xd, d)*k1*(d - xd)*(12*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*fd - 12*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f - 12*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*fd*xd + 12*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*xd - 12*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*xQm + 6*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*xbe + 12*G_expr(xd, d)**2*H**2*Hd*d**2*f*xQm - 6*G_expr(xd, d)**2*H**2*Hd*d**2*f*xbe + 12*G_expr(xd, d)**2*H**2*Hd*d*f*fd*xQm*xd - 6*G_expr(xd, d)**2*H**2*Hd*d*f*fd*xbe*xd - 12*G_expr(xd, d)**2*H**2*Hd*d*f*xQm*xd + 6*G_expr(xd, d)**2*H**2*Hd*d*f*xbe*xd + 36*G_expr(xd, d)**2*H**2*Qm*d*f - 156*G_expr(xd, d)**2*H**2*Qm*f*xd - 36*G_expr(xd, d)**2*H**2*d*f*xQm + 156*G_expr(xd, d)**2*H**2*f*xQm*xd - 12*G_expr(xd, d)**2*H*Hd*Qm*d*f*fd + 12*G_expr(xd, d)**2*H*Hd*Qm*d*f + 12*G_expr(xd, d)**2*H*Hd*Qm*f*fd*xd - 12*G_expr(xd, d)**2*H*Hd*Qm*f*xd + 12*G_expr(xd, d)**2*H*Hd*d*f*fd*xQm - 12*G_expr(xd, d)**2*H*Hd*d*f*xQm - 12*G_expr(xd, d)**2*H*Hd*f*fd*xQm*xd + 12*G_expr(xd, d)**2*H*Hd*f*xQm*xd - 2*H**2*Hd*Qm*d**4*f*fd*k1**2 + 2*H**2*Hd*Qm*d**4*f*k1**2 + 6*H**2*Hd*Qm*d**3*f*fd*k1**2*xd - 6*H**2*Hd*Qm*d**3*f*k1**2*xd - 6*H**2*Hd*Qm*d**2*f*fd*k1**2*xd**2 + 6*H**2*Hd*Qm*d**2*f*k1**2*xd**2 + 2*H**2*Hd*Qm*d*f*fd*k1**2*xd**3 - 2*H**2*Hd*Qm*d*f*k1**2*xd**3 + H**2*Hd*be*d*(d - xd)*(fd - 1)*(b1*k1**2*(d - xd)**2 + f*(-6*G_expr(xd, d)**2 + k1**2*(d - xd)**2)) + 2*H**2*Hd*d**4*f*fd*k1**2*xQm - H**2*Hd*d**4*f*fd*k1**2*xbe - 2*H**2*Hd*d**4*f*k1**2*xQm + H**2*Hd*d**4*f*k1**2*xbe + 2*H**2*Hd*d**4*fd*k1**2*xQm*xb1 - H**2*Hd*d**4*fd*k1**2*xb1*xbe - 2*H**2*Hd*d**4*k1**2*xQm*xb1 + H**2*Hd*d**4*k1**2*xb1*xbe - 6*H**2*Hd*d**3*f*fd*k1**2*xQm*xd + 3*H**2*Hd*d**3*f*fd*k1**2*xbe*xd + 6*H**2*Hd*d**3*f*k1**2*xQm*xd - 3*H**2*Hd*d**3*f*k1**2*xbe*xd - 6*H**2*Hd*d**3*fd*k1**2*xQm*xb1*xd + 3*H**2*Hd*d**3*fd*k1**2*xb1*xbe*xd + 6*H**2*Hd*d**3*k1**2*xQm*xb1*xd - 3*H**2*Hd*d**3*k1**2*xb1*xbe*xd + 6*H**2*Hd*d**2*f*fd*k1**2*xQm*xd**2 - 3*H**2*Hd*d**2*f*fd*k1**2*xbe*xd**2 - 6*H**2*Hd*d**2*f*k1**2*xQm*xd**2 + 3*H**2*Hd*d**2*f*k1**2*xbe*xd**2 + 6*H**2*Hd*d**2*fd*k1**2*xQm*xb1*xd**2 - 3*H**2*Hd*d**2*fd*k1**2*xb1*xbe*xd**2 - 6*H**2*Hd*d**2*k1**2*xQm*xb1*xd**2 + 3*H**2*Hd*d**2*k1**2*xb1*xbe*xd**2 - 2*H**2*Hd*d*f*fd*k1**2*xQm*xd**3 + H**2*Hd*d*f*fd*k1**2*xbe*xd**3 + 2*H**2*Hd*d*f*k1**2*xQm*xd**3 - H**2*Hd*d*f*k1**2*xbe*xd**3 - 2*H**2*Hd*d*fd*k1**2*xQm*xb1*xd**3 + H**2*Hd*d*fd*k1**2*xb1*xbe*xd**3 + 2*H**2*Hd*d*k1**2*xQm*xb1*xd**3 - H**2*Hd*d*k1**2*xb1*xbe*xd**3 - 6*H**2*Qm*d**3*f*k1**2 + 32*H**2*Qm*d**2*f*k1**2*xd - 46*H**2*Qm*d*f*k1**2*xd**2 + 20*H**2*Qm*f*k1**2*xd**3 + 6*H**2*d**3*f*k1**2*xQm + 2*H**2*d**3*k1**2*xQm*xb1 - 2*H**2*d**3*k1**2*xb1 - 32*H**2*d**2*f*k1**2*xQm*xd - 12*H**2*d**2*k1**2*xQm*xb1*xd + 12*H**2*d**2*k1**2*xb1*xd + 46*H**2*d*f*k1**2*xQm*xd**2 + 18*H**2*d*k1**2*xQm*xb1*xd**2 - 18*H**2*d*k1**2*xb1*xd**2 - 20*H**2*f*k1**2*xQm*xd**3 - 8*H**2*k1**2*xQm*xb1*xd**3 + 8*H**2*k1**2*xb1*xd**3 + 2*H*Hd*Qm*d**3*f*fd*k1**2 - 2*H*Hd*Qm*d**3*f*k1**2 - 6*H*Hd*Qm*d**2*f*fd*k1**2*xd + 6*H*Hd*Qm*d**2*f*k1**2*xd + 6*H*Hd*Qm*d*f*fd*k1**2*xd**2 - 6*H*Hd*Qm*d*f*k1**2*xd**2 - 2*H*Hd*Qm*f*fd*k1**2*xd**3 + 2*H*Hd*Qm*f*k1**2*xd**3 - 2*H*Hd*d**3*f*fd*k1**2*xQm + 2*H*Hd*d**3*f*k1**2*xQm - 2*H*Hd*d**3*fd*k1**2*xQm*xb1 + 2*H*Hd*d**3*fd*k1**2*xb1 + 2*H*Hd*d**3*k1**2*xQm*xb1 - 2*H*Hd*d**3*k1**2*xb1 + 6*H*Hd*d**2*f*fd*k1**2*xQm*xd - 6*H*Hd*d**2*f*k1**2*xQm*xd + 6*H*Hd*d**2*fd*k1**2*xQm*xb1*xd - 6*H*Hd*d**2*fd*k1**2*xb1*xd - 6*H*Hd*d**2*k1**2*xQm*xb1*xd + 6*H*Hd*d**2*k1**2*xb1*xd - 6*H*Hd*d*f*fd*k1**2*xQm*xd**2 + 6*H*Hd*d*f*k1**2*xQm*xd**2 - 6*H*Hd*d*fd*k1**2*xQm*xb1*xd**2 + 6*H*Hd*d*fd*k1**2*xb1*xd**2 + 6*H*Hd*d*k1**2*xQm*xb1*xd**2 - 6*H*Hd*d*k1**2*xb1*xd**2 + 2*H*Hd*f*fd*k1**2*xQm*xd**3 - 2*H*Hd*f*k1**2*xQm*xd**3 + 2*H*Hd*fd*k1**2*xQm*xb1*xd**3 - 2*H*Hd*fd*k1**2*xb1*xd**3 - 2*H*Hd*k1**2*xQm*xb1*xd**3 + 2*H*Hd*k1**2*xb1*xd**3 + Hd*Hp*d**4*fd*k1**2*xb1 - Hd*Hp*d**4*k1**2*xb1 - 3*Hd*Hp*d**3*fd*k1**2*xb1*xd + 3*Hd*Hp*d**3*k1**2*xb1*xd + 3*Hd*Hp*d**2*fd*k1**2*xb1*xd**2 - 3*Hd*Hp*d**2*k1**2*xb1*xd**2 - Hd*Hp*d*fd*k1**2*xb1*xd**3 + Hd*Hp*d*k1**2*xb1*xd**3 - b1*k1**2*(d - xd)**2*(-2*H*xd*(Qm - 1)*(4*H - Hd*fd + Hd) + Hd*d**2*(fd - 1)*(2*H**2*Qm + Hp) + d*(2*H**2*(Hd*Qm*(-fd*xd + xd) + Qm - 1) - 2*H*Hd*(Qm - 1)*(fd - 1) - Hd*Hp*xd*(fd - 1))))*np.cos(k1*(d - xd)/G_expr(xd, d)) + (-12*G_expr(xd, d)**4*H**2*Hd*Qm*d**2*f*fd + 12*G_expr(xd, d)**4*H**2*Hd*Qm*d**2*f + 12*G_expr(xd, d)**4*H**2*Hd*Qm*d*f*fd*xd - 12*G_expr(xd, d)**4*H**2*Hd*Qm*d*f*xd + 12*G_expr(xd, d)**4*H**2*Hd*d**2*f*fd*xQm - 6*G_expr(xd, d)**4*H**2*Hd*d**2*f*fd*xbe - 12*G_expr(xd, d)**4*H**2*Hd*d**2*f*xQm + 6*G_expr(xd, d)**4*H**2*Hd*d**2*f*xbe - 12*G_expr(xd, d)**4*H**2*Hd*d*f*fd*xQm*xd + 6*G_expr(xd, d)**4*H**2*Hd*d*f*fd*xbe*xd + 12*G_expr(xd, d)**4*H**2*Hd*d*f*xQm*xd - 6*G_expr(xd, d)**4*H**2*Hd*d*f*xbe*xd - 36*G_expr(xd, d)**4*H**2*Qm*d*f + 156*G_expr(xd, d)**4*H**2*Qm*f*xd + 36*G_expr(xd, d)**4*H**2*d*f*xQm - 156*G_expr(xd, d)**4*H**2*f*xQm*xd + 12*G_expr(xd, d)**4*H*Hd*Qm*d*f*fd - 12*G_expr(xd, d)**4*H*Hd*Qm*d*f - 12*G_expr(xd, d)**4*H*Hd*Qm*f*fd*xd + 12*G_expr(xd, d)**4*H*Hd*Qm*f*xd - 12*G_expr(xd, d)**4*H*Hd*d*f*fd*xQm + 12*G_expr(xd, d)**4*H*Hd*d*f*xQm + 12*G_expr(xd, d)**4*H*Hd*f*fd*xQm*xd - 12*G_expr(xd, d)**4*H*Hd*f*xQm*xd + 6*G_expr(xd, d)**2*H**2*Hd*Qm*d**4*f*fd*k1**2 - 6*G_expr(xd, d)**2*H**2*Hd*Qm*d**4*f*k1**2 - 18*G_expr(xd, d)**2*H**2*Hd*Qm*d**3*f*fd*k1**2*xd + 18*G_expr(xd, d)**2*H**2*Hd*Qm*d**3*f*k1**2*xd + 18*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*fd*k1**2*xd**2 - 18*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*k1**2*xd**2 - 6*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*fd*k1**2*xd**3 + 6*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*k1**2*xd**3 - G_expr(xd, d)**2*H**2*Hd*be*d*(d - xd)*(fd - 1)*(b1*k1**2*(d - xd)**2 + 3*f*(-2*G_expr(xd, d)**2 + k1**2*(d - xd)**2)) - 6*G_expr(xd, d)**2*H**2*Hd*d**4*f*fd*k1**2*xQm + 3*G_expr(xd, d)**2*H**2*Hd*d**4*f*fd*k1**2*xbe + 6*G_expr(xd, d)**2*H**2*Hd*d**4*f*k1**2*xQm - 3*G_expr(xd, d)**2*H**2*Hd*d**4*f*k1**2*xbe - 2*G_expr(xd, d)**2*H**2*Hd*d**4*fd*k1**2*xQm*xb1 + G_expr(xd, d)**2*H**2*Hd*d**4*fd*k1**2*xb1*xbe + 2*G_expr(xd, d)**2*H**2*Hd*d**4*k1**2*xQm*xb1 - G_expr(xd, d)**2*H**2*Hd*d**4*k1**2*xb1*xbe + 18*G_expr(xd, d)**2*H**2*Hd*d**3*f*fd*k1**2*xQm*xd - 9*G_expr(xd, d)**2*H**2*Hd*d**3*f*fd*k1**2*xbe*xd - 18*G_expr(xd, d)**2*H**2*Hd*d**3*f*k1**2*xQm*xd + 9*G_expr(xd, d)**2*H**2*Hd*d**3*f*k1**2*xbe*xd + 6*G_expr(xd, d)**2*H**2*Hd*d**3*fd*k1**2*xQm*xb1*xd - 3*G_expr(xd, d)**2*H**2*Hd*d**3*fd*k1**2*xb1*xbe*xd - 6*G_expr(xd, d)**2*H**2*Hd*d**3*k1**2*xQm*xb1*xd + 3*G_expr(xd, d)**2*H**2*Hd*d**3*k1**2*xb1*xbe*xd - 18*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*k1**2*xQm*xd**2 + 9*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*k1**2*xbe*xd**2 + 18*G_expr(xd, d)**2*H**2*Hd*d**2*f*k1**2*xQm*xd**2 - 9*G_expr(xd, d)**2*H**2*Hd*d**2*f*k1**2*xbe*xd**2 - 6*G_expr(xd, d)**2*H**2*Hd*d**2*fd*k1**2*xQm*xb1*xd**2 + 3*G_expr(xd, d)**2*H**2*Hd*d**2*fd*k1**2*xb1*xbe*xd**2 + 6*G_expr(xd, d)**2*H**2*Hd*d**2*k1**2*xQm*xb1*xd**2 - 3*G_expr(xd, d)**2*H**2*Hd*d**2*k1**2*xb1*xbe*xd**2 + 6*G_expr(xd, d)**2*H**2*Hd*d*f*fd*k1**2*xQm*xd**3 - 3*G_expr(xd, d)**2*H**2*Hd*d*f*fd*k1**2*xbe*xd**3 - 6*G_expr(xd, d)**2*H**2*Hd*d*f*k1**2*xQm*xd**3 + 3*G_expr(xd, d)**2*H**2*Hd*d*f*k1**2*xbe*xd**3 + 2*G_expr(xd, d)**2*H**2*Hd*d*fd*k1**2*xQm*xb1*xd**3 - G_expr(xd, d)**2*H**2*Hd*d*fd*k1**2*xb1*xbe*xd**3 - 2*G_expr(xd, d)**2*H**2*Hd*d*k1**2*xQm*xb1*xd**3 + G_expr(xd, d)**2*H**2*Hd*d*k1**2*xb1*xbe*xd**3 + 18*G_expr(xd, d)**2*H**2*Qm*d**3*f*k1**2 - 108*G_expr(xd, d)**2*H**2*Qm*d**2*f*k1**2*xd + 162*G_expr(xd, d)**2*H**2*Qm*d*f*k1**2*xd**2 - 72*G_expr(xd, d)**2*H**2*Qm*f*k1**2*xd**3 - 18*G_expr(xd, d)**2*H**2*d**3*f*k1**2*xQm - 2*G_expr(xd, d)**2*H**2*d**3*k1**2*xQm*xb1 + 2*G_expr(xd, d)**2*H**2*d**3*k1**2*xb1 + 108*G_expr(xd, d)**2*H**2*d**2*f*k1**2*xQm*xd + 12*G_expr(xd, d)**2*H**2*d**2*k1**2*xQm*xb1*xd - 12*G_expr(xd, d)**2*H**2*d**2*k1**2*xb1*xd - 162*G_expr(xd, d)**2*H**2*d*f*k1**2*xQm*xd**2 - 18*G_expr(xd, d)**2*H**2*d*k1**2*xQm*xb1*xd**2 + 18*G_expr(xd, d)**2*H**2*d*k1**2*xb1*xd**2 + 72*G_expr(xd, d)**2*H**2*f*k1**2*xQm*xd**3 + 8*G_expr(xd, d)**2*H**2*k1**2*xQm*xb1*xd**3 - 8*G_expr(xd, d)**2*H**2*k1**2*xb1*xd**3 - 6*G_expr(xd, d)**2*H*Hd*Qm*d**3*f*fd*k1**2 + 6*G_expr(xd, d)**2*H*Hd*Qm*d**3*f*k1**2 + 18*G_expr(xd, d)**2*H*Hd*Qm*d**2*f*fd*k1**2*xd - 18*G_expr(xd, d)**2*H*Hd*Qm*d**2*f*k1**2*xd - 18*G_expr(xd, d)**2*H*Hd*Qm*d*f*fd*k1**2*xd**2 + 18*G_expr(xd, d)**2*H*Hd*Qm*d*f*k1**2*xd**2 + 6*G_expr(xd, d)**2*H*Hd*Qm*f*fd*k1**2*xd**3 - 6*G_expr(xd, d)**2*H*Hd*Qm*f*k1**2*xd**3 + 6*G_expr(xd, d)**2*H*Hd*d**3*f*fd*k1**2*xQm - 6*G_expr(xd, d)**2*H*Hd*d**3*f*k1**2*xQm + 2*G_expr(xd, d)**2*H*Hd*d**3*fd*k1**2*xQm*xb1 - 2*G_expr(xd, d)**2*H*Hd*d**3*fd*k1**2*xb1 - 2*G_expr(xd, d)**2*H*Hd*d**3*k1**2*xQm*xb1 + 2*G_expr(xd, d)**2*H*Hd*d**3*k1**2*xb1 - 18*G_expr(xd, d)**2*H*Hd*d**2*f*fd*k1**2*xQm*xd + 18*G_expr(xd, d)**2*H*Hd*d**2*f*k1**2*xQm*xd - 6*G_expr(xd, d)**2*H*Hd*d**2*fd*k1**2*xQm*xb1*xd + 6*G_expr(xd, d)**2*H*Hd*d**2*fd*k1**2*xb1*xd + 6*G_expr(xd, d)**2*H*Hd*d**2*k1**2*xQm*xb1*xd - 6*G_expr(xd, d)**2*H*Hd*d**2*k1**2*xb1*xd + 18*G_expr(xd, d)**2*H*Hd*d*f*fd*k1**2*xQm*xd**2 - 18*G_expr(xd, d)**2*H*Hd*d*f*k1**2*xQm*xd**2 + 6*G_expr(xd, d)**2*H*Hd*d*fd*k1**2*xQm*xb1*xd**2 - 6*G_expr(xd, d)**2*H*Hd*d*fd*k1**2*xb1*xd**2 - 6*G_expr(xd, d)**2*H*Hd*d*k1**2*xQm*xb1*xd**2 + 6*G_expr(xd, d)**2*H*Hd*d*k1**2*xb1*xd**2 - 6*G_expr(xd, d)**2*H*Hd*f*fd*k1**2*xQm*xd**3 + 6*G_expr(xd, d)**2*H*Hd*f*k1**2*xQm*xd**3 - 2*G_expr(xd, d)**2*H*Hd*fd*k1**2*xQm*xb1*xd**3 + 2*G_expr(xd, d)**2*H*Hd*fd*k1**2*xb1*xd**3 + 2*G_expr(xd, d)**2*H*Hd*k1**2*xQm*xb1*xd**3 - 2*G_expr(xd, d)**2*H*Hd*k1**2*xb1*xd**3 - G_expr(xd, d)**2*Hd*Hp*d**4*fd*k1**2*xb1 + G_expr(xd, d)**2*Hd*Hp*d**4*k1**2*xb1 + 3*G_expr(xd, d)**2*Hd*Hp*d**3*fd*k1**2*xb1*xd - 3*G_expr(xd, d)**2*Hd*Hp*d**3*k1**2*xb1*xd - 3*G_expr(xd, d)**2*Hd*Hp*d**2*fd*k1**2*xb1*xd**2 + 3*G_expr(xd, d)**2*Hd*Hp*d**2*k1**2*xb1*xd**2 + G_expr(xd, d)**2*Hd*Hp*d*fd*k1**2*xb1*xd**3 - G_expr(xd, d)**2*Hd*Hp*d*k1**2*xb1*xd**3 - 2*H**2*Qm*d**5*f*k1**4 + 12*H**2*Qm*d**4*f*k1**4*xd - 28*H**2*Qm*d**3*f*k1**4*xd**2 + 32*H**2*Qm*d**2*f*k1**4*xd**3 - 18*H**2*Qm*d*f*k1**4*xd**4 + 4*H**2*Qm*f*k1**4*xd**5 + 2*H**2*d**5*f*k1**4*xQm + 2*H**2*d**5*k1**4*xQm*xb1 - 2*H**2*d**5*k1**4*xb1 - 12*H**2*d**4*f*k1**4*xQm*xd - 12*H**2*d**4*k1**4*xQm*xb1*xd + 12*H**2*d**4*k1**4*xb1*xd + 28*H**2*d**3*f*k1**4*xQm*xd**2 + 28*H**2*d**3*k1**4*xQm*xb1*xd**2 - 28*H**2*d**3*k1**4*xb1*xd**2 - 32*H**2*d**2*f*k1**4*xQm*xd**3 - 32*H**2*d**2*k1**4*xQm*xb1*xd**3 + 32*H**2*d**2*k1**4*xb1*xd**3 + 18*H**2*d*f*k1**4*xQm*xd**4 + 18*H**2*d*k1**4*xQm*xb1*xd**4 - 18*H**2*d*k1**4*xb1*xd**4 - 4*H**2*f*k1**4*xQm*xd**5 - 4*H**2*k1**4*xQm*xb1*xd**5 + 4*H**2*k1**4*xb1*xd**5 - b1*k1**2*(d - xd)**2*(2*H**2*d**3*k1**2*(Qm - 1) + 2*H*xd*(Qm - 1)*(G_expr(xd, d)**2*(4*H - Hd*fd + Hd) - 2*H*k1**2*xd**2) + d**2*(-G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) - 8*H**2*k1**2*xd*(Qm - 1)) + d*(G_expr(xd, d)**2*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 1) + 1) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 10*H**2*k1**2*xd**2*(Qm - 1))))*np.sin(k1*(d - xd)/G_expr(xd, d)))/(G_expr(xd, d)*H**2*d*k1**6*(d - xd)**5)
        return expr
    
    def l2(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128):
        return BaseInt.single_int(IntNPP.l0_integrand, cosmo_funcs, k1, zz=zz, t=t, sigma=sigma, n=n)
        
    @staticmethod
    def l2_integrand(xd,cosmo_funcs, k1, zz=0, t=0, sigma=None):

        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        _,f,D1,b1,xb1 = cosmo_funcs.unpack_pk(k1,zz)
        zzd1, fd, D1d, Hd, OMd = BaseInt.get_integrand_params(cosmo_funcs, xd)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd, d):
            return (d + xd) / (2 * d)
            
        expr = 15*D1*D1d*Hd**2*OMd*BaseInt.pk(k1/G_expr(xd, d))*(G_expr(xd, d)*(2*H*xd*(f*(Qm + xQm - 2)*(36*G_expr(xd, d)**4*(19*H - Hd*fd + Hd) + G_expr(xd, d)**2*k1**2*xd**2*(-316*H + 17*Hd*(fd - 1)) + k1**4*xd**4*(16*H - Hd*fd + Hd)) + k1**2*xd**2*(-3*G_expr(xd, d)**2*(8*H - Hd*fd + Hd) + k1**2*xd**2*(10*H - Hd*fd + Hd))*(b1*(Qm - 1) + xb1*(xQm - 1))) + Hd*d**6*k1**4*(fd - 1)*(-2*H**2*Qm*f + H**2*be*f - 2*H**2*f*xQm + H**2*f*xbe - 2*H**2*xQm*xb1 + H**2*xb1*xbe - 2*Hp*f - Hp*xb1 + b1*(-2*H**2*Qm + H**2*be - Hp)) + d**5*k1**4*(b1*(H**2*(-5*Hd*be*xd*(fd - 1) + 2*Qm*(5*Hd*xd*(fd - 1) - 3) + 6) + 2*H*Hd*(Qm - 1)*(fd - 1) + 5*Hd*Hp*xd*(fd - 1)) + f*(5*H**2*(-Hd*be*xd*(fd - 1) + 2*Hd*fd*xQm*xd - Hd*fd*xbe*xd - 2*Hd*xQm*xd + Hd*xbe*xd + 2*Qm*(Hd*xd*(fd - 1) - 1) - 2*xQm + 4) + 2*H*Hd*(fd - 1)*(Qm + xQm - 2) + 10*Hd*Hp*xd*(fd - 1)) + xb1*(H**2*(-5*Hd*xd*(fd - 1)*(-2*xQm + xbe) - 6*xQm + 6) + 2*H*Hd*(fd - 1)*(xQm - 1) + 5*Hd*Hp*xd*(fd - 1))) + d**4*k1**2*(34*G_expr(xd, d)**2*H**2*Hd*Qm*f*fd - 34*G_expr(xd, d)**2*H**2*Hd*Qm*f - 17*G_expr(xd, d)**2*H**2*Hd*be*f*fd + 17*G_expr(xd, d)**2*H**2*Hd*be*f + 34*G_expr(xd, d)**2*H**2*Hd*f*fd*xQm - 17*G_expr(xd, d)**2*H**2*Hd*f*fd*xbe - 34*G_expr(xd, d)**2*H**2*Hd*f*xQm + 17*G_expr(xd, d)**2*H**2*Hd*f*xbe + 6*G_expr(xd, d)**2*H**2*Hd*fd*xQm*xb1 - 3*G_expr(xd, d)**2*H**2*Hd*fd*xb1*xbe - 6*G_expr(xd, d)**2*H**2*Hd*xQm*xb1 + 3*G_expr(xd, d)**2*H**2*Hd*xb1*xbe + 34*G_expr(xd, d)**2*Hd*Hp*f*fd - 34*G_expr(xd, d)**2*Hd*Hp*f + 3*G_expr(xd, d)**2*Hd*Hp*fd*xb1 - 3*G_expr(xd, d)**2*Hd*Hp*xb1 - 20*H**2*Hd*Qm*f*fd*k1**2*xd**2 + 20*H**2*Hd*Qm*f*k1**2*xd**2 + 10*H**2*Hd*be*f*fd*k1**2*xd**2 - 10*H**2*Hd*be*f*k1**2*xd**2 - 20*H**2*Hd*f*fd*k1**2*xQm*xd**2 + 10*H**2*Hd*f*fd*k1**2*xbe*xd**2 + 20*H**2*Hd*f*k1**2*xQm*xd**2 - 10*H**2*Hd*f*k1**2*xbe*xd**2 - 20*H**2*Hd*fd*k1**2*xQm*xb1*xd**2 + 10*H**2*Hd*fd*k1**2*xb1*xbe*xd**2 + 20*H**2*Hd*k1**2*xQm*xb1*xd**2 - 10*H**2*Hd*k1**2*xb1*xbe*xd**2 + 72*H**2*Qm*f*k1**2*xd + 72*H**2*f*k1**2*xQm*xd - 144*H**2*f*k1**2*xd + 44*H**2*k1**2*xQm*xb1*xd - 44*H**2*k1**2*xb1*xd - 10*H*Hd*Qm*f*fd*k1**2*xd + 10*H*Hd*Qm*f*k1**2*xd - 10*H*Hd*f*fd*k1**2*xQm*xd + 20*H*Hd*f*fd*k1**2*xd + 10*H*Hd*f*k1**2*xQm*xd - 20*H*Hd*f*k1**2*xd - 10*H*Hd*fd*k1**2*xQm*xb1*xd + 10*H*Hd*fd*k1**2*xb1*xd + 10*H*Hd*k1**2*xQm*xb1*xd - 10*H*Hd*k1**2*xb1*xd - 20*Hd*Hp*f*fd*k1**2*xd**2 + 20*Hd*Hp*f*k1**2*xd**2 - 10*Hd*Hp*fd*k1**2*xb1*xd**2 + 10*Hd*Hp*k1**2*xb1*xd**2 + b1*(3*G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) - H**2*Hd*be*(3*G_expr(xd, d)**2 - 10*k1**2*xd**2)*(fd - 1) - 2*k1**2*xd*(2*H**2*(Qm*(5*Hd*xd*(fd - 1) - 11) + 11) + 5*H*Hd*(Qm - 1)*(fd - 1) + 5*Hd*Hp*xd*(fd - 1)))) + d**3*k1**2*(G_expr(xd, d)**2*f*(H**2*(51*Hd*be*xd*(fd - 1) - 102*Hd*fd*xQm*xd + 51*Hd*fd*xbe*xd + 102*Hd*xQm*xd - 51*Hd*xbe*xd - 2*Qm*(51*Hd*xd*(fd - 1) - 70) + 140*xQm - 280) - 34*H*Hd*(fd - 1)*(Qm + xQm - 2) - 102*Hd*Hp*xd*(fd - 1)) + 3*G_expr(xd, d)**2*xb1*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 4*xQm - 4) - 2*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + b1*(-3*G_expr(xd, d)**2*(H**2*(-3*Hd*be*xd*(fd - 1) + Qm*(6*Hd*xd*(fd - 1) - 4) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) + 2*k1**2*xd**2*(H**2*(-5*Hd*be*xd*(fd - 1) + 2*Qm*(5*Hd*xd*(fd - 1) - 29) + 58) + 10*H*Hd*(Qm - 1)*(fd - 1) + 5*Hd*Hp*xd*(fd - 1))) + 2*f*k1**2*xd**2*(H**2*(-5*Hd*be*xd*(fd - 1) + 10*Hd*fd*xQm*xd - 5*Hd*fd*xbe*xd - 10*Hd*xQm*xd + 5*Hd*xbe*xd + 2*Qm*(5*Hd*xd*(fd - 1) - 47) - 94*xQm + 188) + 10*H*Hd*(fd - 1)*(Qm + xQm - 2) + 10*Hd*Hp*xd*(fd - 1)) - 2*k1**2*xb1*xd**2*(H**2*(5*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 58*xQm - 58) - 10*H*Hd*(fd - 1)*(xQm - 1) - 5*Hd*Hp*xd*(fd - 1))) + d**2*(H**2*Hd*be*(fd - 1)*(36*G_expr(xd, d)**4*f - 9*G_expr(xd, d)**2*b1*k1**2*xd**2 - 51*G_expr(xd, d)**2*f*k1**2*xd**2 + 5*b1*k1**4*xd**4 + 5*f*k1**4*xd**4) + f*(-36*G_expr(xd, d)**4*Hd*(fd - 1)*(H**2*(2*Qm + 2*xQm - xbe) + 2*Hp) + 3*G_expr(xd, d)**2*k1**2*xd*(H**2*(-17*Hd*xd*(fd - 1)*(-2*xQm + xbe) + Qm*(34*Hd*xd*(fd - 1) - 304) - 304*xQm + 608) + 34*H*Hd*(fd - 1)*(Qm + xQm - 2) + 34*Hd*Hp*xd*(fd - 1)) + k1**4*xd**3*(H**2*(5*Hd*xd*(fd - 1)*(-2*xQm + xbe) + Qm*(-10*Hd*xd*(fd - 1) + 232) + 232*xQm - 464) - 20*H*Hd*(fd - 1)*(Qm + xQm - 2) - 10*Hd*Hp*xd*(fd - 1))) + k1**2*xd*(9*G_expr(xd, d)**2*b1*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 4) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 9*G_expr(xd, d)**2*xb1*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 8*xQm - 8) - 2*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + b1*k1**2*xd**2*(-2*H**2*(Qm*(5*Hd*xd*(fd - 1) - 72) + 72) - 20*H*Hd*(Qm - 1)*(fd - 1) - 5*Hd*Hp*xd*(fd - 1)) + k1**2*xb1*xd**2*(H**2*(5*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 144*xQm - 144) - 20*H*Hd*(fd - 1)*(xQm - 1) - 5*Hd*Hp*xd*(fd - 1)))) + d*(f*(36*G_expr(xd, d)**4*(H**2*(-Hd*be*xd*(fd - 1) + 2*Hd*fd*xQm*xd - Hd*fd*xbe*xd - 2*Hd*xQm*xd + Hd*xbe*xd + 2*Qm*(Hd*xd*(fd - 1) - 4) - 8*xQm + 16) + 2*H*Hd*(fd - 1)*(Qm + xQm - 2) + 2*Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)**2*k1**2*xd**2*(H**2*(17*Hd*be*xd*(fd - 1) - 34*Hd*fd*xQm*xd + 17*Hd*fd*xbe*xd + 34*Hd*xQm*xd - 17*Hd*xbe*xd + Qm*(-34*Hd*xd*(fd - 1) + 1404) + 1404*xQm - 2808) - 102*H*Hd*(fd - 1)*(Qm + xQm - 2) - 34*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(-Hd*be*xd*(fd - 1) + 2*Hd*fd*xQm*xd - Hd*fd*xbe*xd - 2*Hd*xQm*xd + Hd*xbe*xd + 2*Qm*(Hd*xd*(fd - 1) - 69) - 138*xQm + 276) + 10*H*Hd*(fd - 1)*(Qm + xQm - 2) + 2*Hd*Hp*xd*(fd - 1))) + k1**2*xd**2*(-3*G_expr(xd, d)**2*b1*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 18) + 36) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 3*G_expr(xd, d)**2*xb1*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 36*xQm - 36) - 6*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + b1*k1**2*xd**2*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 43) + 86) + 10*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + k1**2*xb1*xd**2*(H**2*(-Hd*xd*(fd - 1)*(-2*xQm + xbe) - 86*xQm + 86) + 10*H*Hd*(fd - 1)*(xQm - 1) + Hd*Hp*xd*(fd - 1)))))*np.sin(k1*(d - xd)/G_expr(xd, d)) + k1*(d - xd)*(2*H**2*d**5*k1**4*(b1*(Qm - 1) + f*(Qm + xQm - 2) + xb1*(xQm - 1)) - 2*H*xd*(f*(Qm + xQm - 2)*(36*G_expr(xd, d)**4*(19*H - Hd*fd + Hd) + G_expr(xd, d)**2*k1**2*xd**2*(-88*H + 5*Hd*(fd - 1)) + 2*H*k1**4*xd**4) + k1**2*xd**2*(-3*G_expr(xd, d)**2*(8*H - Hd*fd + Hd) + 2*H*k1**2*xd**2)*(b1*(Qm - 1) + xb1*(xQm - 1))) + d**4*k1**2*(-10*G_expr(xd, d)**2*H**2*Hd*Qm*f*fd + 10*G_expr(xd, d)**2*H**2*Hd*Qm*f + 5*G_expr(xd, d)**2*H**2*Hd*be*f*fd - 5*G_expr(xd, d)**2*H**2*Hd*be*f - 10*G_expr(xd, d)**2*H**2*Hd*f*fd*xQm + 5*G_expr(xd, d)**2*H**2*Hd*f*fd*xbe + 10*G_expr(xd, d)**2*H**2*Hd*f*xQm - 5*G_expr(xd, d)**2*H**2*Hd*f*xbe - 6*G_expr(xd, d)**2*H**2*Hd*fd*xQm*xb1 + 3*G_expr(xd, d)**2*H**2*Hd*fd*xb1*xbe + 6*G_expr(xd, d)**2*H**2*Hd*xQm*xb1 - 3*G_expr(xd, d)**2*H**2*Hd*xb1*xbe - 10*G_expr(xd, d)**2*Hd*Hp*f*fd + 10*G_expr(xd, d)**2*Hd*Hp*f - 3*G_expr(xd, d)**2*Hd*Hp*fd*xb1 + 3*G_expr(xd, d)**2*Hd*Hp*xb1 - 12*H**2*Qm*f*k1**2*xd - 12*H**2*f*k1**2*xQm*xd + 24*H**2*f*k1**2*xd - 12*H**2*k1**2*xQm*xb1*xd + 12*H**2*k1**2*xb1*xd + 3*b1*(G_expr(xd, d)**2*H**2*Hd*be*(fd - 1) - G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) - 4*H**2*k1**2*xd*(Qm - 1))) + d**3*k1**2*(G_expr(xd, d)**2*f*(H**2*(-15*Hd*be*xd*(fd - 1) + 30*Hd*fd*xQm*xd - 15*Hd*fd*xbe*xd - 30*Hd*xQm*xd + 15*Hd*xbe*xd + Qm*(30*Hd*xd*(fd - 1) - 44) - 44*xQm + 88) + 10*H*Hd*(fd - 1)*(Qm + xQm - 2) + 30*Hd*Hp*xd*(fd - 1)) - 3*G_expr(xd, d)**2*xb1*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 4*xQm - 4) - 2*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + 28*H**2*f*k1**2*xd**2*(Qm + xQm - 2) + 28*H**2*k1**2*xb1*xd**2*(xQm - 1) + b1*(3*G_expr(xd, d)**2*(H**2*(-3*Hd*be*xd*(fd - 1) + Qm*(6*Hd*xd*(fd - 1) - 4) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) + 28*H**2*k1**2*xd**2*(Qm - 1))) + d**2*(-3*G_expr(xd, d)**2*H**2*Hd*be*(fd - 1)*(12*G_expr(xd, d)**2*f - 3*b1*k1**2*xd**2 - 5*f*k1**2*xd**2) + f*(36*G_expr(xd, d)**4*Hd*(fd - 1)*(H**2*(2*Qm + 2*xQm - xbe) + 2*Hp) - 3*G_expr(xd, d)**2*k1**2*xd*(H**2*(-5*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*Qm*(5*Hd*xd*(fd - 1) - 44) - 88*xQm + 176) + 10*H*Hd*(fd - 1)*(Qm + xQm - 2) + 10*Hd*Hp*xd*(fd - 1)) - 32*H**2*k1**4*xd**3*(Qm + xQm - 2)) + k1**2*xd*(-9*G_expr(xd, d)**2*b1*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 4) + 4) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 9*G_expr(xd, d)**2*xb1*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 8*xQm - 8) - 2*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) - 32*H**2*b1*k1**2*xd**2*(Qm - 1) - 32*H**2*k1**2*xb1*xd**2*(xQm - 1))) + d*(f*(-36*G_expr(xd, d)**4*(H**2*(-Hd*be*xd*(fd - 1) + 2*Hd*fd*xQm*xd - Hd*fd*xbe*xd - 2*Hd*xQm*xd + Hd*xbe*xd + 2*Qm*(Hd*xd*(fd - 1) - 4) - 8*xQm + 16) + 2*H*Hd*(fd - 1)*(Qm + xQm - 2) + 2*Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-5*Hd*be*xd*(fd - 1) + 10*Hd*fd*xQm*xd - 5*Hd*fd*xbe*xd - 10*Hd*xQm*xd + 5*Hd*xbe*xd + 2*Qm*(5*Hd*xd*(fd - 1) - 198) - 396*xQm + 792) + 30*H*Hd*(fd - 1)*(Qm + xQm - 2) + 10*Hd*Hp*xd*(fd - 1)) + 18*H**2*k1**4*xd**4*(Qm + xQm - 2)) + 3*k1**2*xd**2*(G_expr(xd, d)**2*b1*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 18) + 36) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + G_expr(xd, d)**2*xb1*(H**2*(-Hd*xd*(fd - 1)*(-2*xQm + xbe) - 36*xQm + 36) + 6*H*Hd*(fd - 1)*(xQm - 1) + Hd*Hp*xd*(fd - 1)) + 6*H**2*b1*k1**2*xd**2*(Qm - 1) + 6*H**2*k1**2*xb1*xd**2*(xQm - 1))))*np.cos(k1*(d - xd)/G_expr(xd, d)))/(G_expr(xd, d)*H**2*d*k1**7*(d - xd)**6)
        return expr
    
    def l3(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128):
        return BaseInt.single_int(IntNPP.l0_integrand, cosmo_funcs, k1, zz=zz, t=t, sigma=sigma, n=n)
        
    @staticmethod
    def l3_integrand(xd,cosmo_funcs, k1, zz=0, t=0, sigma=None):

        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        _,f,D1,b1,xb1 = cosmo_funcs.unpack_pk(k1,zz)
        zzd1, fd, D1d, Hd, OMd = BaseInt.get_integrand_params(cosmo_funcs, xd)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd, d):
            return (d + xd) / (2 * d)
        
        def cos_equation(xd, d):
                return -600*G_expr(xd, d)**4*H**2*Hd*Qm*d**2*f*fd + 600*G_expr(xd, d)**4*H**2*Hd*Qm*d**2*f + 600*G_expr(xd, d)**4*H**2*Hd*Qm*d*f*fd*xd - 600*G_expr(xd, d)**4*H**2*Hd*Qm*d*f*xd + 600*G_expr(xd, d)**4*H**2*Hd*d**2*f*fd*xQm - 300*G_expr(xd, d)**4*H**2*Hd*d**2*f*fd*xbe - 600*G_expr(xd, d)**4*H**2*Hd*d**2*f*xQm + 300*G_expr(xd, d)**4*H**2*Hd*d**2*f*xbe - 600*G_expr(xd, d)**4*H**2*Hd*d*f*fd*xQm*xd + 300*G_expr(xd, d)**4*H**2*Hd*d*f*fd*xbe*xd + 600*G_expr(xd, d)**4*H**2*Hd*d*f*xQm*xd - 300*G_expr(xd, d)**4*H**2*Hd*d*f*xbe*xd - 3000*G_expr(xd, d)**4*H**2*Qm*d*f + 15600*G_expr(xd, d)**4*H**2*Qm*f*xd + 3000*G_expr(xd, d)**4*H**2*d*f*xQm - 15600*G_expr(xd, d)**4*H**2*f*xQm*xd + 600*G_expr(xd, d)**4*H*Hd*Qm*d*f*fd - 600*G_expr(xd, d)**4*H*Hd*Qm*d*f - 600*G_expr(xd, d)**4*H*Hd*Qm*f*fd*xd + 600*G_expr(xd, d)**4*H*Hd*Qm*f*xd - 600*G_expr(xd, d)**4*H*Hd*d*f*fd*xQm + 600*G_expr(xd, d)**4*H*Hd*d*f*xQm + 600*G_expr(xd, d)**4*H*Hd*f*fd*xQm*xd - 600*G_expr(xd, d)**4*H*Hd*f*xQm*xd + 82*G_expr(xd, d)**2*H**2*Hd*Qm*d**4*f*fd*k1**2 - 82*G_expr(xd, d)**2*H**2*Hd*Qm*d**4*f*k1**2 - 246*G_expr(xd, d)**2*H**2*Hd*Qm*d**3*f*fd*k1**2*xd + 246*G_expr(xd, d)**2*H**2*Hd*Qm*d**3*f*k1**2*xd + 246*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*fd*k1**2*xd**2 - 246*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*k1**2*xd**2 - 82*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*fd*k1**2*xd**3 + 82*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*k1**2*xd**3 - 82*G_expr(xd, d)**2*H**2*Hd*d**4*f*fd*k1**2*xQm + 41*G_expr(xd, d)**2*H**2*Hd*d**4*f*fd*k1**2*xbe + 82*G_expr(xd, d)**2*H**2*Hd*d**4*f*k1**2*xQm - 41*G_expr(xd, d)**2*H**2*Hd*d**4*f*k1**2*xbe - 30*G_expr(xd, d)**2*H**2*Hd*d**4*fd*k1**2*xQm*xb1 + 15*G_expr(xd, d)**2*H**2*Hd*d**4*fd*k1**2*xb1*xbe + 30*G_expr(xd, d)**2*H**2*Hd*d**4*k1**2*xQm*xb1 - 15*G_expr(xd, d)**2*H**2*Hd*d**4*k1**2*xb1*xbe + 246*G_expr(xd, d)**2*H**2*Hd*d**3*f*fd*k1**2*xQm*xd - 123*G_expr(xd, d)**2*H**2*Hd*d**3*f*fd*k1**2*xbe*xd - 246*G_expr(xd, d)**2*H**2*Hd*d**3*f*k1**2*xQm*xd + 123*G_expr(xd, d)**2*H**2*Hd*d**3*f*k1**2*xbe*xd + 90*G_expr(xd, d)**2*H**2*Hd*d**3*fd*k1**2*xQm*xb1*xd - 45*G_expr(xd, d)**2*H**2*Hd*d**3*fd*k1**2*xb1*xbe*xd - 90*G_expr(xd, d)**2*H**2*Hd*d**3*k1**2*xQm*xb1*xd + 45*G_expr(xd, d)**2*H**2*Hd*d**3*k1**2*xb1*xbe*xd - 246*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*k1**2*xQm*xd**2 + 123*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*k1**2*xbe*xd**2 + 246*G_expr(xd, d)**2*H**2*Hd*d**2*f*k1**2*xQm*xd**2 - 123*G_expr(xd, d)**2*H**2*Hd*d**2*f*k1**2*xbe*xd**2 - 90*G_expr(xd, d)**2*H**2*Hd*d**2*fd*k1**2*xQm*xb1*xd**2 + 45*G_expr(xd, d)**2*H**2*Hd*d**2*fd*k1**2*xb1*xbe*xd**2 + 90*G_expr(xd, d)**2*H**2*Hd*d**2*k1**2*xQm*xb1*xd**2 - 45*G_expr(xd, d)**2*H**2*Hd*d**2*k1**2*xb1*xbe*xd**2 + 82*G_expr(xd, d)**2*H**2*Hd*d*f*fd*k1**2*xQm*xd**3 - 41*G_expr(xd, d)**2*H**2*Hd*d*f*fd*k1**2*xbe*xd**3 - 82*G_expr(xd, d)**2*H**2*Hd*d*f*k1**2*xQm*xd**3 + 41*G_expr(xd, d)**2*H**2*Hd*d*f*k1**2*xbe*xd**3 + 30*G_expr(xd, d)**2*H**2*Hd*d*fd*k1**2*xQm*xb1*xd**3 - 15*G_expr(xd, d)**2*H**2*Hd*d*fd*k1**2*xb1*xbe*xd**3 - 30*G_expr(xd, d)**2*H**2*Hd*d*k1**2*xQm*xb1*xd**3 + 15*G_expr(xd, d)**2*H**2*Hd*d*k1**2*xb1*xbe*xd**3 + 446*G_expr(xd, d)**2*H**2*Qm*d**3*f*k1**2 - 2958*G_expr(xd, d)**2*H**2*Qm*d**2*f*k1**2*xd + 4578*G_expr(xd, d)**2*H**2*Qm*d*f*k1**2*xd**2 - 2066*G_expr(xd, d)**2*H**2*Qm*f*k1**2*xd**3 - 446*G_expr(xd, d)**2*H**2*d**3*f*k1**2*xQm - 90*G_expr(xd, d)**2*H**2*d**3*k1**2*xQm*xb1 + 90*G_expr(xd, d)**2*H**2*d**3*k1**2*xb1 + 2958*G_expr(xd, d)**2*H**2*d**2*f*k1**2*xQm*xd + 570*G_expr(xd, d)**2*H**2*d**2*k1**2*xQm*xb1*xd - 570*G_expr(xd, d)**2*H**2*d**2*k1**2*xb1*xd - 4578*G_expr(xd, d)**2*H**2*d*f*k1**2*xQm*xd**2 - 870*G_expr(xd, d)**2*H**2*d*k1**2*xQm*xb1*xd**2 + 870*G_expr(xd, d)**2*H**2*d*k1**2*xb1*xd**2 + 2066*G_expr(xd, d)**2*H**2*f*k1**2*xQm*xd**3 + 390*G_expr(xd, d)**2*H**2*k1**2*xQm*xb1*xd**3 - 390*G_expr(xd, d)**2*H**2*k1**2*xb1*xd**3 - 82*G_expr(xd, d)**2*H*Hd*Qm*d**3*f*fd*k1**2 + 82*G_expr(xd, d)**2*H*Hd*Qm*d**3*f*k1**2 + 246*G_expr(xd, d)**2*H*Hd*Qm*d**2*f*fd*k1**2*xd - 246*G_expr(xd, d)**2*H*Hd*Qm*d**2*f*k1**2*xd - 246*G_expr(xd, d)**2*H*Hd*Qm*d*f*fd*k1**2*xd**2 + 246*G_expr(xd, d)**2*H*Hd*Qm*d*f*k1**2*xd**2 + 82*G_expr(xd, d)**2*H*Hd*Qm*f*fd*k1**2*xd**3 - 82*G_expr(xd, d)**2*H*Hd*Qm*f*k1**2*xd**3 + 82*G_expr(xd, d)**2*H*Hd*d**3*f*fd*k1**2*xQm - 82*G_expr(xd, d)**2*H*Hd*d**3*f*k1**2*xQm + 30*G_expr(xd, d)**2*H*Hd*d**3*fd*k1**2*xQm*xb1 - 30*G_expr(xd, d)**2*H*Hd*d**3*fd*k1**2*xb1 - 30*G_expr(xd, d)**2*H*Hd*d**3*k1**2*xQm*xb1 + 30*G_expr(xd, d)**2*H*Hd*d**3*k1**2*xb1 - 246*G_expr(xd, d)**2*H*Hd*d**2*f*fd*k1**2*xQm*xd + 246*G_expr(xd, d)**2*H*Hd*d**2*f*k1**2*xQm*xd - 90*G_expr(xd, d)**2*H*Hd*d**2*fd*k1**2*xQm*xb1*xd + 90*G_expr(xd, d)**2*H*Hd*d**2*fd*k1**2*xb1*xd + 90*G_expr(xd, d)**2*H*Hd*d**2*k1**2*xQm*xb1*xd - 90*G_expr(xd, d)**2*H*Hd*d**2*k1**2*xb1*xd + 246*G_expr(xd, d)**2*H*Hd*d*f*fd*k1**2*xQm*xd**2 - 246*G_expr(xd, d)**2*H*Hd*d*f*k1**2*xQm*xd**2 + 90*G_expr(xd, d)**2*H*Hd*d*fd*k1**2*xQm*xb1*xd**2 - 90*G_expr(xd, d)**2*H*Hd*d*fd*k1**2*xb1*xd**2 - 90*G_expr(xd, d)**2*H*Hd*d*k1**2*xQm*xb1*xd**2 + 90*G_expr(xd, d)**2*H*Hd*d*k1**2*xb1*xd**2 - 82*G_expr(xd, d)**2*H*Hd*f*fd*k1**2*xQm*xd**3 + 82*G_expr(xd, d)**2*H*Hd*f*k1**2*xQm*xd**3 - 30*G_expr(xd, d)**2*H*Hd*fd*k1**2*xQm*xb1*xd**3 + 30*G_expr(xd, d)**2*H*Hd*fd*k1**2*xb1*xd**3 + 30*G_expr(xd, d)**2*H*Hd*k1**2*xQm*xb1*xd**3 - 30*G_expr(xd, d)**2*H*Hd*k1**2*xb1*xd**3 - 15*G_expr(xd, d)**2*Hd*Hp*d**4*fd*k1**2*xb1 + 15*G_expr(xd, d)**2*Hd*Hp*d**4*k1**2*xb1 + 45*G_expr(xd, d)**2*Hd*Hp*d**3*fd*k1**2*xb1*xd - 45*G_expr(xd, d)**2*Hd*Hp*d**3*k1**2*xb1*xd - 45*G_expr(xd, d)**2*Hd*Hp*d**2*fd*k1**2*xb1*xd**2 + 45*G_expr(xd, d)**2*Hd*Hp*d**2*k1**2*xb1*xd**2 + 15*G_expr(xd, d)**2*Hd*Hp*d*fd*k1**2*xb1*xd**3 - 15*G_expr(xd, d)**2*Hd*Hp*d*k1**2*xb1*xd**3 - 2*H**2*Hd*Qm*d**6*f*fd*k1**4 + 2*H**2*Hd*Qm*d**6*f*k1**4 + 10*H**2*Hd*Qm*d**5*f*fd*k1**4*xd - 10*H**2*Hd*Qm*d**5*f*k1**4*xd - 20*H**2*Hd*Qm*d**4*f*fd*k1**4*xd**2 + 20*H**2*Hd*Qm*d**4*f*k1**4*xd**2 + 20*H**2*Hd*Qm*d**3*f*fd*k1**4*xd**3 - 20*H**2*Hd*Qm*d**3*f*k1**4*xd**3 - 10*H**2*Hd*Qm*d**2*f*fd*k1**4*xd**4 + 10*H**2*Hd*Qm*d**2*f*k1**4*xd**4 + 2*H**2*Hd*Qm*d*f*fd*k1**4*xd**5 - 2*H**2*Hd*Qm*d*f*k1**4*xd**5 + H**2*Hd*be*d*(d - xd)*(fd - 1)*(b1*k1**2*(-15*G_expr(xd, d)**2 + k1**2*(d - xd)**2)*(d - xd)**2 + f*(300*G_expr(xd, d)**4 - 41*G_expr(xd, d)**2*k1**2*(d - xd)**2 + k1**4*(d - xd)**4)) + 2*H**2*Hd*d**6*f*fd*k1**4*xQm - H**2*Hd*d**6*f*fd*k1**4*xbe - 2*H**2*Hd*d**6*f*k1**4*xQm + H**2*Hd*d**6*f*k1**4*xbe + 2*H**2*Hd*d**6*fd*k1**4*xQm*xb1 - H**2*Hd*d**6*fd*k1**4*xb1*xbe - 2*H**2*Hd*d**6*k1**4*xQm*xb1 + H**2*Hd*d**6*k1**4*xb1*xbe - 10*H**2*Hd*d**5*f*fd*k1**4*xQm*xd + 5*H**2*Hd*d**5*f*fd*k1**4*xbe*xd + 10*H**2*Hd*d**5*f*k1**4*xQm*xd - 5*H**2*Hd*d**5*f*k1**4*xbe*xd - 10*H**2*Hd*d**5*fd*k1**4*xQm*xb1*xd + 5*H**2*Hd*d**5*fd*k1**4*xb1*xbe*xd + 10*H**2*Hd*d**5*k1**4*xQm*xb1*xd - 5*H**2*Hd*d**5*k1**4*xb1*xbe*xd + 20*H**2*Hd*d**4*f*fd*k1**4*xQm*xd**2 - 10*H**2*Hd*d**4*f*fd*k1**4*xbe*xd**2 - 20*H**2*Hd*d**4*f*k1**4*xQm*xd**2 + 10*H**2*Hd*d**4*f*k1**4*xbe*xd**2 + 20*H**2*Hd*d**4*fd*k1**4*xQm*xb1*xd**2 - 10*H**2*Hd*d**4*fd*k1**4*xb1*xbe*xd**2 - 20*H**2*Hd*d**4*k1**4*xQm*xb1*xd**2 + 10*H**2*Hd*d**4*k1**4*xb1*xbe*xd**2 - 20*H**2*Hd*d**3*f*fd*k1**4*xQm*xd**3 + 10*H**2*Hd*d**3*f*fd*k1**4*xbe*xd**3 + 20*H**2*Hd*d**3*f*k1**4*xQm*xd**3 - 10*H**2*Hd*d**3*f*k1**4*xbe*xd**3 - 20*H**2*Hd*d**3*fd*k1**4*xQm*xb1*xd**3 + 10*H**2*Hd*d**3*fd*k1**4*xb1*xbe*xd**3 + 20*H**2*Hd*d**3*k1**4*xQm*xb1*xd**3 - 10*H**2*Hd*d**3*k1**4*xb1*xbe*xd**3 + 10*H**2*Hd*d**2*f*fd*k1**4*xQm*xd**4 - 5*H**2*Hd*d**2*f*fd*k1**4*xbe*xd**4 - 10*H**2*Hd*d**2*f*k1**4*xQm*xd**4 + 5*H**2*Hd*d**2*f*k1**4*xbe*xd**4 + 10*H**2*Hd*d**2*fd*k1**4*xQm*xb1*xd**4 - 5*H**2*Hd*d**2*fd*k1**4*xb1*xbe*xd**4 - 10*H**2*Hd*d**2*k1**4*xQm*xb1*xd**4 + 5*H**2*Hd*d**2*k1**4*xb1*xbe*xd**4 - 2*H**2*Hd*d*f*fd*k1**4*xQm*xd**5 + H**2*Hd*d*f*fd*k1**4*xbe*xd**5 + 2*H**2*Hd*d*f*k1**4*xQm*xd**5 - H**2*Hd*d*f*k1**4*xbe*xd**5 - 2*H**2*Hd*d*fd*k1**4*xQm*xb1*xd**5 + H**2*Hd*d*fd*k1**4*xb1*xbe*xd**5 + 2*H**2*Hd*d*k1**4*xQm*xb1*xd**5 - H**2*Hd*d*k1**4*xb1*xbe*xd**5 - 16*H**2*Qm*d**5*f*k1**4 + 114*H**2*Qm*d**4*f*k1**4*xd - 296*H**2*Qm*d**3*f*k1**4*xd**2 + 364*H**2*Qm*d**2*f*k1**4*xd**3 - 216*H**2*Qm*d*f*k1**4*xd**4 + 50*H**2*Qm*f*k1**4*xd**5 + 16*H**2*d**5*f*k1**4*xQm + 12*H**2*d**5*k1**4*xQm*xb1 - 12*H**2*d**5*k1**4*xb1 - 114*H**2*d**4*f*k1**4*xQm*xd - 86*H**2*d**4*k1**4*xQm*xb1*xd + 86*H**2*d**4*k1**4*xb1*xd + 296*H**2*d**3*f*k1**4*xQm*xd**2 + 224*H**2*d**3*k1**4*xQm*xb1*xd**2 - 224*H**2*d**3*k1**4*xb1*xd**2 - 364*H**2*d**2*f*k1**4*xQm*xd**3 - 276*H**2*d**2*k1**4*xQm*xb1*xd**3 + 276*H**2*d**2*k1**4*xb1*xd**3 + 216*H**2*d*f*k1**4*xQm*xd**4 + 164*H**2*d*k1**4*xQm*xb1*xd**4 - 164*H**2*d*k1**4*xb1*xd**4 - 50*H**2*f*k1**4*xQm*xd**5 - 38*H**2*k1**4*xQm*xb1*xd**5 + 38*H**2*k1**4*xb1*xd**5 + 2*H*Hd*Qm*d**5*f*fd*k1**4 - 2*H*Hd*Qm*d**5*f*k1**4 - 10*H*Hd*Qm*d**4*f*fd*k1**4*xd + 10*H*Hd*Qm*d**4*f*k1**4*xd + 20*H*Hd*Qm*d**3*f*fd*k1**4*xd**2 - 20*H*Hd*Qm*d**3*f*k1**4*xd**2 - 20*H*Hd*Qm*d**2*f*fd*k1**4*xd**3 + 20*H*Hd*Qm*d**2*f*k1**4*xd**3 + 10*H*Hd*Qm*d*f*fd*k1**4*xd**4 - 10*H*Hd*Qm*d*f*k1**4*xd**4 - 2*H*Hd*Qm*f*fd*k1**4*xd**5 + 2*H*Hd*Qm*f*k1**4*xd**5 - 2*H*Hd*d**5*f*fd*k1**4*xQm + 2*H*Hd*d**5*f*k1**4*xQm - 2*H*Hd*d**5*fd*k1**4*xQm*xb1 + 2*H*Hd*d**5*fd*k1**4*xb1 + 2*H*Hd*d**5*k1**4*xQm*xb1 - 2*H*Hd*d**5*k1**4*xb1 + 10*H*Hd*d**4*f*fd*k1**4*xQm*xd - 10*H*Hd*d**4*f*k1**4*xQm*xd + 10*H*Hd*d**4*fd*k1**4*xQm*xb1*xd - 10*H*Hd*d**4*fd*k1**4*xb1*xd - 10*H*Hd*d**4*k1**4*xQm*xb1*xd + 10*H*Hd*d**4*k1**4*xb1*xd - 20*H*Hd*d**3*f*fd*k1**4*xQm*xd**2 + 20*H*Hd*d**3*f*k1**4*xQm*xd**2 - 20*H*Hd*d**3*fd*k1**4*xQm*xb1*xd**2 + 20*H*Hd*d**3*fd*k1**4*xb1*xd**2 + 20*H*Hd*d**3*k1**4*xQm*xb1*xd**2 - 20*H*Hd*d**3*k1**4*xb1*xd**2 + 20*H*Hd*d**2*f*fd*k1**4*xQm*xd**3 - 20*H*Hd*d**2*f*k1**4*xQm*xd**3 + 20*H*Hd*d**2*fd*k1**4*xQm*xb1*xd**3 - 20*H*Hd*d**2*fd*k1**4*xb1*xd**3 - 20*H*Hd*d**2*k1**4*xQm*xb1*xd**3 + 20*H*Hd*d**2*k1**4*xb1*xd**3 - 10*H*Hd*d*f*fd*k1**4*xQm*xd**4 + 10*H*Hd*d*f*k1**4*xQm*xd**4 - 10*H*Hd*d*fd*k1**4*xQm*xb1*xd**4 + 10*H*Hd*d*fd*k1**4*xb1*xd**4 + 10*H*Hd*d*k1**4*xQm*xb1*xd**4 - 10*H*Hd*d*k1**4*xb1*xd**4 + 2*H*Hd*f*fd*k1**4*xQm*xd**5 

        def sin_equation(xd, d):
            return 600*G_expr(xd, d)**6*H**2*Hd*Qm*d**2*f*fd - 600*G_expr(xd, d)**6*H**2*Hd*Qm*d**2*f - 600*G_expr(xd, d)**6*H**2*Hd*Qm*d*f*fd*xd + 600*G_expr(xd, d)**6*H**2*Hd*Qm*d*f*xd - 600*G_expr(xd, d)**6*H**2*Hd*d**2*f*fd*xQm + 300*G_expr(xd, d)**6*H**2*Hd*d**2*f*fd*xbe + 600*G_expr(xd, d)**6*H**2*Hd*d**2*f*xQm - 300*G_expr(xd, d)**6*H**2*Hd*d**2*f*xbe + 600*G_expr(xd, d)**6*H**2*Hd*d*f*fd*xQm*xd - 300*G_expr(xd, d)**6*H**2*Hd*d*f*fd*xbe*xd - 600*G_expr(xd, d)**6*H**2*Hd*d*f*xQm*xd + 300*G_expr(xd, d)**6*H**2*Hd*d*f*xbe*xd + 3000*G_expr(xd, d)**6*H**2*Qm*d*f - 15600*G_expr(xd, d)**6*H**2*Qm*f*xd - 3000*G_expr(xd, d)**6*H**2*d*f*xQm + 15600*G_expr(xd, d)**6*H**2*f*xQm*xd - 600*G_expr(xd, d)**6*H*Hd*Qm*d*f*fd + 600*G_expr(xd, d)**6*H*Hd*Qm*d*f + 600*G_expr(xd, d)**6*H*Hd*Qm*f*fd*xd - 600*G_expr(xd, d)**6*H*Hd*Qm*f*xd + 600*G_expr(xd, d)**6*H*Hd*d*f*fd*xQm - 600*G_expr(xd, d)**6*H*Hd*d*f*xQm - 600*G_expr(xd, d)**6*H*Hd*f*fd*xQm*xd + 600*G_expr(xd, d)**6*H*Hd*f*xQm*xd - 282*G_expr(xd, d)**4*H**2*Hd*Qm*d**4*f*fd*k1**2 + 282*G_expr(xd, d)**4*H**2*Hd*Qm*d**4*f*k1**2 + 846*G_expr(xd, d)**4*H**2*Hd*Qm*d**3*f*fd*k1**2*xd - 846*G_expr(xd, d)**4*H**2*Hd*Qm*d**3*f*k1**2*xd - 846*G_expr(xd, d)**4*H**2*Hd*Qm*d**2*f*fd*k1**2*xd**2 + 846*G_expr(xd, d)**4*H**2*Hd*Qm*d**2*f*k1**2*xd**2 + 282*G_expr(xd, d)**4*H**2*Hd*Qm*d*f*fd*k1**2*xd**3 - 282*G_expr(xd, d)**4*H**2*Hd*Qm*d*f*k1**2*xd**3 + 282*G_expr(xd, d)**4*H**2*Hd*d**4*f*fd*k1**2*xQm - 141*G_expr(xd, d)**4*H**2*Hd*d**4*f*fd*k1**2*xbe - 282*G_expr(xd, d)**4*H**2*Hd*d**4*f*k1**2*xQm + 141*G_expr(xd, d)**4*H**2*Hd*d**4*f*k1**2*xbe + 30*G_expr(xd, d)**4*H**2*Hd*d**4*fd*k1**2*xQm*xb1 - 15*G_expr(xd, d)**4*H**2*Hd*d**4*fd*k1**2*xb1*xbe - 30*G_expr(xd, d)**4*H**2*Hd*d**4*k1**2*xQm*xb1 + 15*G_expr(xd, d)**4*H**2*Hd*d**4*k1**2*xb1*xbe - 846*G_expr(xd, d)**4*H**2*Hd*d**3*f*fd*k1**2*xQm*xd + 423*G_expr(xd, d)**4*H**2*Hd*d**3*f*fd*k1**2*xbe*xd + 846*G_expr(xd, d)**4*H**2*Hd*d**3*f*k1**2*xQm*xd - 423*G_expr(xd, d)**4*H**2*Hd*d**3*f*k1**2*xbe*xd - 90*G_expr(xd, d)**4*H**2*Hd*d**3*fd*k1**2*xQm*xb1*xd + 45*G_expr(xd, d)**4*H**2*Hd*d**3*fd*k1**2*xb1*xbe*xd + 90*G_expr(xd, d)**4*H**2*Hd*d**3*k1**2*xQm*xb1*xd - 45*G_expr(xd, d)**4*H**2*Hd*d**3*k1**2*xb1*xbe*xd + 846*G_expr(xd, d)**4*H**2*Hd*d**2*f*fd*k1**2*xQm*xd**2 - 423*G_expr(xd, d)**4*H**2*Hd*d**2*f*fd*k1**2*xbe*xd**2 - 846*G_expr(xd, d)**4*H**2*Hd*d**2*f*k1**2*xQm*xd**2 + 423*G_expr(xd, d)**4*H**2*Hd*d**2*f*k1**2*xbe*xd**2 + 90*G_expr(xd, d)**4*H**2*Hd*d**2*fd*k1**2*xQm*xb1*xd**2 - 45*G_expr(xd, d)**4*H**2*Hd*d**2*fd*k1**2*xb1*xbe*xd**2 - 90*G_expr(xd, d)**4*H**2*Hd*d**2*k1**2*xQm*xb1*xd**2 + 45*G_expr(xd, d)**4*H**2*Hd*d**2*k1**2*xb1*xbe*xd**2 - 282*G_expr(xd, d)**4*H**2*Hd*d*f*fd*k1**2*xQm*xd**3 + 141*G_expr(xd, d)**4*H**2*Hd*d*f*fd*k1**2*xbe*xd**3 + 282*G_expr(xd, d)**4*H**2*Hd*d*f*k1**2*xQm*xd**3 - 141*G_expr(xd, d)**4*H**2*Hd*d*f*k1**2*xbe*xd**3 - 30*G_expr(xd, d)**4*H**2*Hd*d*fd*k1**2*xQm*xb1*xd**3 + 15*G_expr(xd, d)**4*H**2*Hd*d*fd*k1**2*xb1*xbe*xd**3 + 30*G_expr(xd, d)**4*H**2*Hd*d*k1**2*xQm*xb1*xd**3 - 15*G_expr(xd, d)**4*H**2*Hd*d*k1**2*xb1*xbe*xd**3 - 1446*G_expr(xd, d)**4*H**2*Qm*d**3*f*k1**2 + 10158*G_expr(xd, d)**4*H**2*Qm*d**2*f*k1**2*xd - 15978*G_expr(xd, d)**4*H**2*Qm*d*f*k1**2*xd**2 + 7266*G_expr(xd, d)**4*H**2*Qm*f*k1**2*xd**3 + 1446*G_expr(xd, d)**4*H**2*d**3*f*k1**2*xQm + 90*G_expr(xd, d)**4*H**2*d**3*k1**2*xQm*xb1 - 90*G_expr(xd, d)**4*H**2*d**3*k1**2*xb1 - 10158*G_expr(xd, d)**4*H**2*d**2*f*k1**2*xQm*xd - 570*G_expr(xd, d)**4*H**2*d**2*k1**2*xQm*xb1*xd + 570*G_expr(xd, d)**4*H**2*d**2*k1**2*xb1*xd + 15978*G_expr(xd, d)**4*H**2*d*f*k1**2*xQm*xd**2 + 870*G_expr(xd, d)**4*H**2*d*k1**2*xQm*xb1*xd**2 - 870*G_expr(xd, d)**4*H**2*d*k1**2*xb1*xd**2 - 7266*G_expr(xd, d)**4*H**2*f*k1**2*xQm*xd**3 - 390*G_expr(xd, d)**4*H**2*k1**2*xQm*xb1*xd**3 + 390*G_expr(xd, d)**4*H**2*k1**2*xb1*xd**3 + 282*G_expr(xd, d)**4*H*Hd*Qm*d**3*f*fd*k1**2 - 282*G_expr(xd, d)**4*H*Hd*Qm*d**3*f*k1**2 - 846*G_expr(xd, d)**4*H*Hd*Qm*d**2*f*fd*k1**2*xd + 846*G_expr(xd, d)**4*H*Hd*Qm*d**2*f*k1**2*xd + 846*G_expr(xd, d)**4*H*Hd*Qm*d*f*fd*k1**2*xd**2 - 846*G_expr(xd, d)**4*H*Hd*Qm*d*f*k1**2*xd**2 - 282*G_expr(xd, d)**4*H*Hd*Qm*f*fd*k1**2*xd**3 + 282*G_expr(xd, d)**4*H*Hd*Qm*f*k1**2*xd**3 - 282*G_expr(xd, d)**4*H*Hd*d**3*f*fd*k1**2*xQm + 282*G_expr(xd, d)**4*H*Hd*d**3*f*k1**2*xQm - 30*G_expr(xd, d)**4*H*Hd*d**3*fd*k1**2*xQm*xb1 + 30*G_expr(xd, d)**4*H*Hd*d**3*fd*k1**2*xb1 + 30*G_expr(xd, d)**4*H*Hd*d**3*k1**2*xQm*xb1 - 30*G_expr(xd, d)**4*H*Hd*d**3*k1**2*xb1 + 846*G_expr(xd, d)**4*H*Hd*d**2*f*fd*k1**2*xQm*xd - 846*G_expr(xd, d)**4*H*Hd*d**2*f*k1**2*xQm*xd + 90*G_expr(xd, d)**4*H*Hd*d**2*fd*k1**2*xQm*xb1*xd - 90*G_expr(xd, d)**4*H*Hd*d**2*fd*k1**2*xb1*xd - 90*G_expr(xd, d)**4*H*Hd*d**2*k1**2*xQm*xb1*xd + 90*G_expr(xd, d)**4*H*Hd*d**2*k1**2*xb1*xd - 846*G_expr(xd, d)**4*H*Hd*d*f*fd*k1**2*xQm*xd**2 + 846*G_expr(xd, d)**4*H*Hd*d*f*k1**2*xQm*xd**2 - 90*G_expr(xd, d)**4*H*Hd*d*fd*k1**2*xQm*xb1*xd**2 + 90*G_expr(xd, d)**4*H*Hd*d*fd*k1**2*xb1*xd**2 + 90*G_expr(xd, d)**4*H*Hd*d*k1**2*xQm*xb1*xd**2 - 90*G_expr(xd, d)**4*H*Hd*d*k1**2*xb1*xd**2 + 282*G_expr(xd, d)**4*H*Hd*f*fd*k1**2*xQm*xd**3 - 282*G_expr(xd, d)**4*H*Hd*f*k1**2*xQm*xd**3 + 30*G_expr(xd, d)**4*H*Hd*fd*k1**2*xQm*xb1*xd**3 - 30*G_expr(xd, d)**4*H*Hd*fd*k1**2*xb1*xd**3 - 30*G_expr(xd, d)**4*H*Hd*k1**2*xQm*xb1*xd**3 + 30*G_expr(xd, d)**4*H*Hd*k1**2*xb1*xd**3 + 15*G_expr(xd, d)**4*Hd*Hp*d**4*fd*k1**2*xb1 - 15*G_expr(xd, d)**4*Hd*Hp*d**4*k1**2*xb1 - 45*G_expr(xd, d)**4*Hd*Hp*d**3*fd*k1**2*xb1*xd + 45*G_expr(xd, d)**4*Hd*Hp*d**3*k1**2*xb1*xd + 45*G_expr(xd, d)**4*Hd*Hp*d**2*fd*k1**2*xb1*xd**2 - 45*G_expr(xd, d)**4*Hd*Hp*d**2*k1**2*xb1*xd**2 - 15*G_expr(xd, d)**4*Hd*Hp*d*fd*k1**2*xb1*xd**3 + 15*G_expr(xd, d)**4*Hd*Hp*d*k1**2*xb1*xd**3 + 16*G_expr(xd, d)**2*H**2*Hd*Qm*d**6*f*fd*k1**4 - 16*G_expr(xd, d)**2*H**2*Hd*Qm*d**6*f*k1**4 - 80*G_expr(xd, d)**2*H**2*Hd*Qm*d**5*f*fd*k1**4*xd + 80*G_expr(xd, d)**2*H**2*Hd*Qm*d**5*f*k1**4*xd + 160*G_expr(xd, d)**2*H**2*Hd*Qm*d**4*f*fd*k1**4*xd**2 - 160*G_expr(xd, d)**2*H**2*Hd*Qm*d**4*f*k1**4*xd**2 - 160*G_expr(xd, d)**2*H**2*Hd*Qm*d**3*f*fd*k1**4*xd**3 + 160*G_expr(xd, d)**2*H**2*Hd*Qm*d**3*f*k1**4*xd**3 + 80*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*fd*k1**4*xd**4 - 80*G_expr(xd, d)**2*H**2*Hd*Qm*d**2*f*k1**4*xd**4 - 16*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*fd*k1**4*xd**5 + 16*G_expr(xd, d)**2*H**2*Hd*Qm*d*f*k1**4*xd**5 - G_expr(xd, d)**2*H**2*Hd*be*d*(d - xd)*(fd - 1)*(3*b1*k1**2*(-5*G_expr(xd, d)**2 + 2*k1**2*(d - xd)**2)*(d - xd)**2 + f*(300*G_expr(xd, d)**4 - 141*G_expr(xd, d)**2*k1**2*(d - xd)**2 + 8*k1**4*(d - xd)**4)) - 16*G_expr(xd, d)**2*H**2*Hd*d**6*f*fd*k1**4*xQm + 8*G_expr(xd, d)**2*H**2*Hd*d**6*f*fd*k1**4*xbe + 16*G_expr(xd, d)**2*H**2*Hd*d**6*f*k1**4*xQm - 8*G_expr(xd, d)**2*H**2*Hd*d**6*f*k1**4*xbe - 12*G_expr(xd, d)**2*H**2*Hd*d**6*fd*k1**4*xQm*xb1 + 6*G_expr(xd, d)**2*H**2*Hd*d**6*fd*k1**4*xb1*xbe + 12*G_expr(xd, d)**2*H**2*Hd*d**6*k1**4*xQm*xb1 - 6*G_expr(xd, d)**2*H**2*Hd*d**6*k1**4*xb1*xbe + 80*G_expr(xd, d)**2*H**2*Hd*d**5*f*fd*k1**4*xQm*xd - 40*G_expr(xd, d)**2*H**2*Hd*d**5*f*fd*k1**4*xbe*xd - 80*G_expr(xd, d)**2*H**2*Hd*d**5*f*k1**4*xQm*xd + 40*G_expr(xd, d)**2*H**2*Hd*d**5*f*k1**4*xbe*xd + 60*G_expr(xd, d)**2*H**2*Hd*d**5*fd*k1**4*xQm*xb1*xd - 30*G_expr(xd, d)**2*H**2*Hd*d**5*fd*k1**4*xb1*xbe*xd - 60*G_expr(xd, d)**2*H**2*Hd*d**5*k1**4*xQm*xb1*xd + 30*G_expr(xd, d)**2*H**2*Hd*d**5*k1**4*xb1*xbe*xd - 160*G_expr(xd, d)**2*H**2*Hd*d**4*f*fd*k1**4*xQm*xd**2 + 80*G_expr(xd, d)**2*H**2*Hd*d**4*f*fd*k1**4*xbe*xd**2 + 160*G_expr(xd, d)**2*H**2*Hd*d**4*f*k1**4*xQm*xd**2 - 80*G_expr(xd, d)**2*H**2*Hd*d**4*f*k1**4*xbe*xd**2 - 120*G_expr(xd, d)**2*H**2*Hd*d**4*fd*k1**4*xQm*xb1*xd**2 + 60*G_expr(xd, d)**2*H**2*Hd*d**4*fd*k1**4*xb1*xbe*xd**2 + 120*G_expr(xd, d)**2*H**2*Hd*d**4*k1**4*xQm*xb1*xd**2 - 60*G_expr(xd, d)**2*H**2*Hd*d**4*k1**4*xb1*xbe*xd**2 + 160*G_expr(xd, d)**2*H**2*Hd*d**3*f*fd*k1**4*xQm*xd**3 - 80*G_expr(xd, d)**2*H**2*Hd*d**3*f*fd*k1**4*xbe*xd**3 - 160*G_expr(xd, d)**2*H**2*Hd*d**3*f*k1**4*xQm*xd**3 + 80*G_expr(xd, d)**2*H**2*Hd*d**3*f*k1**4*xbe*xd**3 + 120*G_expr(xd, d)**2*H**2*Hd*d**3*fd*k1**4*xQm*xb1*xd**3 - 60*G_expr(xd, d)**2*H**2*Hd*d**3*fd*k1**4*xb1*xbe*xd**3 - 120*G_expr(xd, d)**2*H**2*Hd*d**3*k1**4*xQm*xb1*xd**3 + 60*G_expr(xd, d)**2*H**2*Hd*d**3*k1**4*xb1*xbe*xd**3 - 80*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*k1**4*xQm*xd**4 + 40*G_expr(xd, d)**2*H**2*Hd*d**2*f*fd*k1**4*xbe*xd**4 + 80*G_expr(xd, d)**2*H**2*Hd*d**2*f*k1**4*xQm*xd**4 - 40*G_expr(xd, d)**2*H**2*Hd*d**2*f*k1**4*xbe*xd**4 - 60*G_expr(xd, d)**2*H**2*Hd*d**2*fd*k1**4*xQm*xb1*xd**4 + 30*G_expr(xd, d)**2*H**2*Hd*d**2*fd*k1**4*xb1*xbe*xd**4 + 60*G_expr(xd, d)**2*H**2*Hd*d**2*k1**4*xQm*xb1*xd**4 - 30*G_expr(xd, d)**2*H**2*Hd*d**2*k1**4*xb1*xbe*xd**4 + 16*G_expr(xd, d)**2*H**2*Hd*d*f*fd*k1**4*xQm*xd**5 - 8*G_expr(xd, d)**2*H**2*Hd*d*f*fd*k1**4*xbe*xd**5 - 16*G_expr(xd, d)**2*H**2*Hd*d*f*k1**4*xQm*xd**5 + 8*G_expr(xd, d)**2*H**2*Hd*d*f*k1**4*xbe*xd**5 + 12*G_expr(xd, d)**2*H**2*Hd*d*fd*k1**4*xQm*xb1*xd**5 - 6*G_expr(xd, d)**2*H**2*Hd*d*fd*k1**4*xb1*xbe*xd**5 - 12*G_expr(xd, d)**2*H**2*Hd*d*k1**4*xQm*xb1*xd**5 + 6*G_expr(xd, d)**2*H**2*Hd*d*k1**4*xb1*xbe*xd**5 + 98*G_expr(xd, d)**2*H**2*Qm*d**5*f*k1**4 - 784*G_expr(xd, d)**2*H**2*Qm*d**4*f*k1**4*xd + 2156*G_expr(xd, d)**2*H**2*Qm*d**3*f*k1**4*xd**2 - 2744*G_expr(xd, d)**2*H**2*Qm*d**2*f*k1**4*xd**3 + 1666*G_expr(xd, d)**2*H**2*Qm*d*f*k1**4*xd**4 - 392*G_expr(xd, d)**2*H**2*Qm*f*k1**4*xd**5 - 98*G_expr(xd, d)**2*H**2*d**5*f*k1**4*xQm - 42*G_expr(xd, d)**2*H**2*d**5*k1**4*xQm*xb1 + 42*G_expr(xd, d)**2*H**2*d**5*k1**4*xb1 + 784*G_expr(xd, d)**2*H**2*d**4*f*k1**4*xQm*xd + 336*G_expr(xd, d)**2*H**2*d**4*k1**4*xQm*xb1*xd - 336*G_expr(xd, d)**2*H**2*d**4*k1**4*xb1*xd - 2156*G_expr(xd, d)**2*H**2*d**3*f*k1**4*xQm*xd**2 - 924*G_expr(xd, d)**2*H**2*d**3*k1**4*xQm*xb1*xd**2 + 924*G_expr(xd, d)**2*H**2*d**3*k1**4*xb1*xd**2 + 2744*G_expr(xd, d)**2*H**2*d**2*f*k1**4*xQm*xd**3 + 1176*G_expr(xd, d)**2*H**2*d**2*k1**4*xQm*xb1*xd**3 - 1176*G_expr(xd, d)**2*H**2*d**2*k1**4*xb1*xd**3 - 1666*G_expr(xd, d)**2*H**2*d*f*k1**4*xQm*xd**4 - 714*G_expr(xd, d)**2*H**2*d*k1**4*xQm*xb1*xd**4 + 714*G_expr(xd, d)**2*H**2*d*k1**4*xb1*xd**4 + 392*G_expr(xd, d)**2*H**2*f*k1**4*xQm*xd**5 + 168*G_expr(xd, d)**2*H**2*k1**4*xQm*xb1*xd**5 - 168*G_expr(xd, d)**2*H**2*k1**4*xb1*xd**5 - 16*G_expr(xd, d)**2*H*Hd*Qm*d**5*f*fd*k1**4 + 16*G_expr(xd, d)**2*H*Hd*Qm*d**5*f*k1**4 + 80*G_expr(xd, d)**2*H*Hd*Qm*d**4*f*fd*k1**4*xd - 80*G_expr(xd, d)**2*H*Hd*Qm*d**4*f*k1**4*xd - 160*G_expr(xd, d)**2*H*Hd*Qm*d**3*f*fd*k1**4*xd**2 + 160*G_expr(xd, d)**2*H*Hd*Qm*d**3*f*k1**4*xd**2 + 160*G_expr(xd, d)**2*H*Hd*Qm*d**2*f*fd*k1**4*xd**3 - 160*G_expr(xd, d)**2*H*Hd*Qm*d**2*f*k1**4*xd**3 - 80*G_expr(xd, d)**2*H*Hd*Qm*d*f*fd*k1**4*xd**4 + 80*G_expr(xd, d)**2*H*Hd*Qm*d*f*k1**4*xd**4 + 16*G_expr(xd, d)**2*H*Hd*Qm*f*fd*k1**4*xd**5 - 16*G_expr(xd, d)**2*H*Hd*Qm*f*k1**4*xd**5 + 16*G_expr(xd, d)**2*H*Hd*d**5*f*fd*k1**4*xQm - 16*G_expr(xd, d)**2*H*Hd*d**5*f*k1**4*xQm + 12*G_expr(xd, d)**2*H*Hd*d**5*fd*k1**4*xQm*xb1 - 12*G_expr(xd, d)**2*H*Hd*d**5*fd*k1**4*xb1 - 12*G_expr(xd, d)**2*H*Hd*d**5*k1**4*xQm*xb1 + 12*G_expr(xd, d)**2*H*Hd*d**5*k1**4*xb1 - 80*G_expr(xd, d)**2*H*Hd*d**4*f*fd*k1**4*xQm*xd + 80*G_expr(xd, d)**2*H*Hd*d**4*f*k1**4*xQm*xd - 60*G_expr(xd, d)**2*H*Hd*d**4*fd*k1**4*xQm*xb1*xd + 60*G_expr(xd, d)**2*H*Hd*d**4*fd*k1**4*xb1*xd + 60*G_expr(xd, d)**2*H*Hd*d**4*k1**4*xQm*xb1*xd - 60*G_expr(xd, d)**2*H*Hd*d**4*k1**4*xb1*xd + 160*G_expr(xd, d)**2*H*Hd*d**3*f*fd*k1**4*xQm*xd**2 - 160*G_expr(xd, d)**2*H*Hd*d**3*f*k1**4*xQm*xd**2 + 120*G_expr(xd, d)**2*H*Hd*d**3*fd*k1**4*xQm*xb1*xd**2 - 120*G_expr(xd, d)**2*H*Hd*d**3*fd*k1**4*xb1*xd**2 - 120*G_expr(xd, d)**2*H*Hd*d**3*k1**4*xQm*xb1*xd**2 + 120*G_expr(xd, d)**2*H*Hd*d**3*k1**4*xb1*xd**2 - 160*G_expr(xd, d)**2*H*Hd*d**2*f*fd*k1**4*xQm*xd**3 + 160*G_expr(xd, d)**2*H*Hd*d**2*f*k1**4*xQm*xd**3 - 120*G_expr(xd, d)**2*H*Hd*d**2*fd*k1**4*xQm*xb1*xd**3 + 120*G_expr(xd, d)**2*H*Hd*d**2*fd*k1**4*xb1*xd**3 + 120*G_expr(xd, d)**2*H*Hd*d**2*k1**4*xQm*xb1*xd**3 - 120*G_expr(xd, d)**2*H*Hd*d**2*k1**4*xb1*xd**3 + 80*G_expr(xd, d)**2*H*Hd*d*f*fd*k1**4*xQm*xd**4 - 80*G_expr(xd, d)**2*H*Hd*d*f*k1**4*xQm*xd**4 + 60*G_expr(xd, d)**2*H*Hd*d*fd*k1**4*xQm*xb1*xd**4 - 60*G_expr(xd, d)**2*H*Hd*d*fd*k1**4*xb1*xd**4 - 60*G_expr(xd, d)**2*H*Hd*d*k1**4*xQm*xb1*xd**4 + 60*G_expr(xd, d)**2*H*Hd*d*k1**4*xb1*xd**4 - 16*G_expr(xd, d)**2*H*Hd*f*fd*k1**4*xQm*xd**5 
            
        expr = -21*1j*D1*D1d*Hd**2*OMd*BaseInt.pk(k1/G_expr(xd, d))*(G_expr(xd, d)*k1*(d - xd)*(cos_equation(xd, d) - 2*H*Hd*f*k1**4*xQm*xd**5 + 2*H*Hd*fd*k1**4*xQm*xb1*xd**5 - 2*H*Hd*fd*k1**4*xb1*xd**5 - 2*H*Hd*k1**4*xQm*xb1*xd**5 + 2*H*Hd*k1**4*xb1*xd**5 + Hd*Hp*d**6*fd*k1**4*xb1 - Hd*Hp*d**6*k1**4*xb1 - 5*Hd*Hp*d**5*fd*k1**4*xb1*xd + 5*Hd*Hp*d**5*k1**4*xb1*xd + 10*Hd*Hp*d**4*fd*k1**4*xb1*xd**2 - 10*Hd*Hp*d**4*k1**4*xb1*xd**2 - 10*Hd*Hp*d**3*fd*k1**4*xb1*xd**3 + 10*Hd*Hp*d**3*k1**4*xb1*xd**3 + 5*Hd*Hp*d**2*fd*k1**4*xb1*xd**4 - 5*Hd*Hp*d**2*k1**4*xb1*xd**4 - Hd*Hp*d*fd*k1**4*xb1*xd**5 + Hd*Hp*d*k1**4*xb1*xd**5 - b1*k1**2*(d - xd)**2*(2*H*xd*(Qm - 1)*(15*G_expr(xd, d)**2*(13*H - Hd*fd + Hd) - k1**2*xd**2*(19*H - Hd*fd + Hd)) + Hd*d**4*k1**2*(fd - 1)*(2*H**2*Qm + Hp) + d**3*k1**2*(-6*H**2*(Qm*(Hd*xd*(fd - 1) - 2) + 2) - 2*H*Hd*(Qm - 1)*(fd - 1) - 3*Hd*Hp*xd*(fd - 1)) + d**2*(-15*G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) + k1**2*xd*(H**2*(Qm*(6*Hd*xd*(fd - 1) - 62) + 62) + 6*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1))) + d*(15*G_expr(xd, d)**2*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 3) + 3) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + k1**2*xd**2*(H**2*(Qm*(-2*Hd*xd*(fd - 1) + 88) - 88) - 6*H*Hd*(Qm - 1)*(fd - 1) - Hd*Hp*xd*(fd - 1)))))*np.cos(k1*(d - xd)/G_expr(xd, d)) + (sin_equation(xd, d) + 16*G_expr(xd, d)**2*H*Hd*f*k1**4*xQm*xd**5 - 12*G_expr(xd, d)**2*H*Hd*fd*k1**4*xQm*xb1*xd**5 + 12*G_expr(xd, d)**2*H*Hd*fd*k1**4*xb1*xd**5 + 12*G_expr(xd, d)**2*H*Hd*k1**4*xQm*xb1*xd**5 - 12*G_expr(xd, d)**2*H*Hd*k1**4*xb1*xd**5 - 6*G_expr(xd, d)**2*Hd*Hp*d**6*fd*k1**4*xb1 + 6*G_expr(xd, d)**2*Hd*Hp*d**6*k1**4*xb1 + 30*G_expr(xd, d)**2*Hd*Hp*d**5*fd*k1**4*xb1*xd - 30*G_expr(xd, d)**2*Hd*Hp*d**5*k1**4*xb1*xd - 60*G_expr(xd, d)**2*Hd*Hp*d**4*fd*k1**4*xb1*xd**2 + 60*G_expr(xd, d)**2*Hd*Hp*d**4*k1**4*xb1*xd**2 + 60*G_expr(xd, d)**2*Hd*Hp*d**3*fd*k1**4*xb1*xd**3 - 60*G_expr(xd, d)**2*Hd*Hp*d**3*k1**4*xb1*xd**3 - 30*G_expr(xd, d)**2*Hd*Hp*d**2*fd*k1**4*xb1*xd**4 + 30*G_expr(xd, d)**2*Hd*Hp*d**2*k1**4*xb1*xd**4 + 6*G_expr(xd, d)**2*Hd*Hp*d*fd*k1**4*xb1*xd**5 - 6*G_expr(xd, d)**2*Hd*Hp*d*k1**4*xb1*xd**5 - 2*H**2*Qm*d**7*f*k1**6 + 16*H**2*Qm*d**6*f*k1**6*xd - 54*H**2*Qm*d**5*f*k1**6*xd**2 + 100*H**2*Qm*d**4*f*k1**6*xd**3 - 110*H**2*Qm*d**3*f*k1**6*xd**4 + 72*H**2*Qm*d**2*f*k1**6*xd**5 - 26*H**2*Qm*d*f*k1**6*xd**6 + 4*H**2*Qm*f*k1**6*xd**7 + 2*H**2*d**7*f*k1**6*xQm + 2*H**2*d**7*k1**6*xQm*xb1 - 2*H**2*d**7*k1**6*xb1 - 16*H**2*d**6*f*k1**6*xQm*xd - 16*H**2*d**6*k1**6*xQm*xb1*xd + 16*H**2*d**6*k1**6*xb1*xd + 54*H**2*d**5*f*k1**6*xQm*xd**2 + 54*H**2*d**5*k1**6*xQm*xb1*xd**2 - 54*H**2*d**5*k1**6*xb1*xd**2 - 100*H**2*d**4*f*k1**6*xQm*xd**3 - 100*H**2*d**4*k1**6*xQm*xb1*xd**3 + 100*H**2*d**4*k1**6*xb1*xd**3 + 110*H**2*d**3*f*k1**6*xQm*xd**4 + 110*H**2*d**3*k1**6*xQm*xb1*xd**4 - 110*H**2*d**3*k1**6*xb1*xd**4 - 72*H**2*d**2*f*k1**6*xQm*xd**5 - 72*H**2*d**2*k1**6*xQm*xb1*xd**5 + 72*H**2*d**2*k1**6*xb1*xd**5 + 26*H**2*d*f*k1**6*xQm*xd**6 + 26*H**2*d*k1**6*xQm*xb1*xd**6 - 26*H**2*d*k1**6*xb1*xd**6 - 4*H**2*f*k1**6*xQm*xd**7 - 4*H**2*k1**6*xQm*xb1*xd**7 + 4*H**2*k1**6*xb1*xd**7 - b1*k1**2*(d - xd)**2*(2*H**2*d**5*k1**4*(Qm - 1) - 2*H*xd*(Qm - 1)*(15*G_expr(xd, d)**4*(13*H - Hd*fd + Hd) - 6*G_expr(xd, d)**2*k1**2*xd**2*(14*H - Hd*fd + Hd) + 2*H*k1**4*xd**4) - 6*d**4*k1**2*(G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) + 2*H**2*k1**2*xd*(Qm - 1)) + 2*d**3*k1**2*(3*G_expr(xd, d)**2*(H**2*(Qm*(6*Hd*xd*(fd - 1) - 7) + 7) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) + 14*H**2*k1**2*xd**2*(Qm - 1)) + d**2*(15*G_expr(xd, d)**4*Hd*(fd - 1)*(2*H**2*Qm + Hp) - 18*G_expr(xd, d)**2*k1**2*xd*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 7) + 7) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 32*H**2*k1**4*xd**3*(Qm - 1)) - 3*d*(5*G_expr(xd, d)**4*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 3) + 3) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 2*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(Qm*(2*Hd*xd*(fd - 1) - 63) + 63) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 6*H**2*k1**4*xd**4*(Qm - 1))))*np.sin(k1*(d - xd)/G_expr(xd, d)))/(G_expr(xd, d)*H**2*d*k1**8*(d - xd)**7)
        return expr
    
    def l4(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128):
        return BaseInt.single_int(IntNPP.l0_integrand, cosmo_funcs, k1, zz=zz, t=t, sigma=sigma, n=n)
        
    @staticmethod
    def l4_integrand(xd,cosmo_funcs, k1, zz=0, t=0, sigma=None):

        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        _,f,D1,b1,xb1 = cosmo_funcs.unpack_pk(k1,zz)
        zzd1, fd, D1d, Hd, OMd = BaseInt.get_integrand_params(cosmo_funcs, xd)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd, d):
            return (d + xd) / (2 * d)
        
        def sin_equation(xd, d):
            return 2*H*xd*(-f*(Qm + xQm - 2)*(6300*G_expr(xd, d)**6*(34*H - Hd*fd + Hd) - 30*G_expr(xd, d)**4*k1**2*xd**2*(3427*H - 103*Hd*(fd - 1)) + 18*G_expr(xd, d)**2*k1**4*xd**4*(379*H - 13*Hd*(fd - 1)) + k1**6*xd**6*(-139*H + 7*Hd*(fd - 1))) + k1**2*xd**2*(b1*(Qm - 1) + xb1*(xQm - 1))*(210*G_expr(xd, d)**4*(19*H - Hd*fd + Hd) - 50*G_expr(xd, d)**2*k1**2*xd**2*(37*H - 2*Hd*(fd - 1)) + k1**4*xd**4*(97*H - 7*Hd*(fd - 1)))) + 7*Hd*d**8*k1**6*(fd - 1)*(-2*H**2*Qm*f + H**2*be*f - 2*H**2*f*xQm + H**2*f*xbe - 2*H**2*xQm*xb1 + H**2*xb1*xbe - 2*Hp*f - Hp*xb1 + b1*(-2*H**2*Qm + H**2*be - Hp)) + d**7*k1**6*(b1*(H**2*(-49*Hd*be*xd*(fd - 1) + Qm*(98*Hd*xd*(fd - 1) - 60) + 60) + 14*H*Hd*(Qm - 1)*(fd - 1) + 49*Hd*Hp*xd*(fd - 1)) + f*(H**2*(-49*Hd*be*xd*(fd - 1) + 98*Hd*fd*xQm*xd - 49*Hd*fd*xbe*xd - 98*Hd*xQm*xd + 49*Hd*xbe*xd + Qm*(98*Hd*xd*(fd - 1) - 88) - 88*xQm + 176) + 14*H*Hd*(fd - 1)*(Qm + xQm - 2) + 98*Hd*Hp*xd*(fd - 1)) + xb1*(H**2*(-49*Hd*xd*(fd - 1)*(-2*xQm + xbe) - 60*xQm + 60) + 14*H*Hd*(fd - 1)*(xQm - 1) + 49*Hd*Hp*xd*(fd - 1))) + d**6*k1**4*(468*G_expr(xd, d)**2*H**2*Hd*Qm*f*fd - 468*G_expr(xd, d)**2*H**2*Hd*Qm*f - 234*G_expr(xd, d)**2*H**2*Hd*be*f*fd + 234*G_expr(xd, d)**2*H**2*Hd*be*f + 468*G_expr(xd, d)**2*H**2*Hd*f*fd*xQm - 234*G_expr(xd, d)**2*H**2*Hd*f*fd*xbe - 468*G_expr(xd, d)**2*H**2*Hd*f*xQm + 234*G_expr(xd, d)**2*H**2*Hd*f*xbe + 200*G_expr(xd, d)**2*H**2*Hd*fd*xQm*xb1 - 100*G_expr(xd, d)**2*H**2*Hd*fd*xb1*xbe - 200*G_expr(xd, d)**2*H**2*Hd*xQm*xb1 + 100*G_expr(xd, d)**2*H**2*Hd*xb1*xbe + 468*G_expr(xd, d)**2*Hd*Hp*f*fd - 468*G_expr(xd, d)**2*Hd*Hp*f + 100*G_expr(xd, d)**2*Hd*Hp*fd*xb1 - 100*G_expr(xd, d)**2*Hd*Hp*xb1 - 294*H**2*Hd*Qm*f*fd*k1**2*xd**2 + 294*H**2*Hd*Qm*f*k1**2*xd**2 + 147*H**2*Hd*be*f*fd*k1**2*xd**2 - 147*H**2*Hd*be*f*k1**2*xd**2 - 294*H**2*Hd*f*fd*k1**2*xQm*xd**2 + 147*H**2*Hd*f*fd*k1**2*xbe*xd**2 + 294*H**2*Hd*f*k1**2*xQm*xd**2 - 147*H**2*Hd*f*k1**2*xbe*xd**2 - 294*H**2*Hd*fd*k1**2*xQm*xb1*xd**2 + 147*H**2*Hd*fd*k1**2*xb1*xbe*xd**2 + 294*H**2*Hd*k1**2*xQm*xb1*xd**2 - 147*H**2*Hd*k1**2*xb1*xbe*xd**2 + 806*H**2*Qm*f*k1**2*xd + 806*H**2*f*k1**2*xQm*xd - 1612*H**2*f*k1**2*xd + 554*H**2*k1**2*xQm*xb1*xd - 554*H**2*k1**2*xb1*xd - 98*H*Hd*Qm*f*fd*k1**2*xd + 98*H*Hd*Qm*f*k1**2*xd - 98*H*Hd*f*fd*k1**2*xQm*xd + 196*H*Hd*f*fd*k1**2*xd + 98*H*Hd*f*k1**2*xQm*xd - 196*H*Hd*f*k1**2*xd - 98*H*Hd*fd*k1**2*xQm*xb1*xd + 98*H*Hd*fd*k1**2*xb1*xd + 98*H*Hd*k1**2*xQm*xb1*xd - 98*H*Hd*k1**2*xb1*xd - 294*Hd*Hp*f*fd*k1**2*xd**2 + 294*Hd*Hp*f*k1**2*xd**2 - 147*Hd*Hp*fd*k1**2*xb1*xd**2 + 147*Hd*Hp*k1**2*xb1*xd**2 + b1*(100*G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) - H**2*Hd*be*(100*G_expr(xd, d)**2 - 147*k1**2*xd**2)*(fd - 1) + k1**2*xd*(H**2*(Qm*(-294*Hd*xd*(fd - 1) + 554) - 554) - 98*H*Hd*(Qm - 1)*(fd - 1) - 147*Hd*Hp*xd*(fd - 1)))) + d**5*k1**4*(-18*G_expr(xd, d)**2*f*(H**2*(-65*Hd*be*xd*(fd - 1) + 130*Hd*fd*xQm*xd - 65*Hd*fd*xbe*xd - 130*Hd*xQm*xd + 65*Hd*xbe*xd + 2*Qm*(65*Hd*xd*(fd - 1) - 81) - 162*xQm + 324) + 26*H*Hd*(fd - 1)*(Qm + xQm - 2) + 130*Hd*Hp*xd*(fd - 1)) + 20*G_expr(xd, d)**2*xb1*(H**2*(25*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 41*xQm - 41) - 10*H*Hd*(fd - 1)*(xQm - 1) - 25*Hd*Hp*xd*(fd - 1)) + b1*(-20*G_expr(xd, d)**2*(H**2*(-25*Hd*be*xd*(fd - 1) + Qm*(50*Hd*xd*(fd - 1) - 41) + 41) + 10*H*Hd*(Qm - 1)*(fd - 1) + 25*Hd*Hp*xd*(fd - 1)) + k1**2*xd**2*(H**2*(-245*Hd*be*xd*(fd - 1) + Qm*(490*Hd*xd*(fd - 1) - 2064) + 2064) + 294*H*Hd*(Qm - 1)*(fd - 1) + 245*Hd*Hp*xd*(fd - 1))) + f*k1**2*xd**2*(H**2*(-245*Hd*be*xd*(fd - 1) + 490*Hd*fd*xQm*xd - 245*Hd*fd*xbe*xd - 490*Hd*xQm*xd + 245*Hd*xbe*xd + Qm*(490*Hd*xd*(fd - 1) - 2988) - 2988*xQm + 5976) + 294*H*Hd*(fd - 1)*(Qm + xQm - 2) + 490*Hd*Hp*xd*(fd - 1)) + k1**2*xb1*xd**2*(H**2*(-245*Hd*xd*(fd - 1)*(-2*xQm + xbe) - 2064*xQm + 2064) + 294*H*Hd*(fd - 1)*(xQm - 1) + 245*Hd*Hp*xd*(fd - 1))) + d**4*k1**2*(-6180*G_expr(xd, d)**4*H**2*Hd*Qm*f*fd + 6180*G_expr(xd, d)**4*H**2*Hd*Qm*f + 3090*G_expr(xd, d)**4*H**2*Hd*be*f*fd - 3090*G_expr(xd, d)**4*H**2*Hd*be*f - 6180*G_expr(xd, d)**4*H**2*Hd*f*fd*xQm + 3090*G_expr(xd, d)**4*H**2*Hd*f*fd*xbe + 6180*G_expr(xd, d)**4*H**2*Hd*f*xQm - 3090*G_expr(xd, d)**4*H**2*Hd*f*xbe - 420*G_expr(xd, d)**4*H**2*Hd*fd*xQm*xb1 + 210*G_expr(xd, d)**4*H**2*Hd*fd*xb1*xbe + 420*G_expr(xd, d)**4*H**2*Hd*xQm*xb1 - 210*G_expr(xd, d)**4*H**2*Hd*xb1*xbe - 6180*G_expr(xd, d)**4*Hd*Hp*f*fd + 6180*G_expr(xd, d)**4*Hd*Hp*f - 210*G_expr(xd, d)**4*Hd*Hp*fd*xb1 + 210*G_expr(xd, d)**4*Hd*Hp*xb1 + 4680*G_expr(xd, d)**2*H**2*Hd*Qm*f*fd*k1**2*xd**2 - 4680*G_expr(xd, d)**2*H**2*Hd*Qm*f*k1**2*xd**2 - 2340*G_expr(xd, d)**2*H**2*Hd*be*f*fd*k1**2*xd**2 + 2340*G_expr(xd, d)**2*H**2*Hd*be*f*k1**2*xd**2 + 4680*G_expr(xd, d)**2*H**2*Hd*f*fd*k1**2*xQm*xd**2 - 2340*G_expr(xd, d)**2*H**2*Hd*f*fd*k1**2*xbe*xd**2 - 4680*G_expr(xd, d)**2*H**2*Hd*f*k1**2*xQm*xd**2 + 2340*G_expr(xd, d)**2*H**2*Hd*f*k1**2*xbe*xd**2 + 2000*G_expr(xd, d)**2*H**2*Hd*fd*k1**2*xQm*xb1*xd**2 - 1000*G_expr(xd, d)**2*H**2*Hd*fd*k1**2*xb1*xbe*xd**2 - 2000*G_expr(xd, d)**2*H**2*Hd*k1**2*xQm*xb1*xd**2 + 1000*G_expr(xd, d)**2*H**2*Hd*k1**2*xb1*xbe*xd**2 - 25308*G_expr(xd, d)**2*H**2*Qm*f*k1**2*xd - 25308*G_expr(xd, d)**2*H**2*f*k1**2*xQm*xd + 50616*G_expr(xd, d)**2*H**2*f*k1**2*xd - 6980*G_expr(xd, d)**2*H**2*k1**2*xQm*xb1*xd + 6980*G_expr(xd, d)**2*H**2*k1**2*xb1*xd + 2340*G_expr(xd, d)**2*H*Hd*Qm*f*fd*k1**2*xd - 2340*G_expr(xd, d)**2*H*Hd*Qm*f*k1**2*xd + 2340*G_expr(xd, d)**2*H*Hd*f*fd*k1**2*xQm*xd - 4680*G_expr(xd, d)**2*H*Hd*f*fd*k1**2*xd - 2340*G_expr(xd, d)**2*H*Hd*f*k1**2*xQm*xd + 4680*G_expr(xd, d)**2*H*Hd*f*k1**2*xd + 1000*G_expr(xd, d)**2*H*Hd*fd*k1**2*xQm*xb1*xd - 1000*G_expr(xd, d)**2*H*Hd*fd*k1**2*xb1*xd - 1000*G_expr(xd, d)**2*H*Hd*k1**2*xQm*xb1*xd + 1000*G_expr(xd, d)**2*H*Hd*k1**2*xb1*xd + 4680*G_expr(xd, d)**2*Hd*Hp*f*fd*k1**2*xd**2 - 4680*G_expr(xd, d)**2*Hd*Hp*f*k1**2*xd**2 + 1000*G_expr(xd, d)**2*Hd*Hp*fd*k1**2*xb1*xd**2 - 1000*G_expr(xd, d)**2*Hd*Hp*k1**2*xb1*xd**2 - 490*H**2*Hd*Qm*f*fd*k1**4*xd**4 + 490*H**2*Hd*Qm*f*k1**4*xd**4 + 245*H**2*Hd*be*f*fd*k1**4*xd**4 - 245*H**2*Hd*be*f*k1**4*xd**4 - 490*H**2*Hd*f*fd*k1**4*xQm*xd**4 + 245*H**2*Hd*f*fd*k1**4*xbe*xd**4 + 490*H**2*Hd*f*k1**4*xQm*xd**4 - 245*H**2*Hd*f*k1**4*xbe*xd**4 - 490*H**2*Hd*fd*k1**4*xQm*xb1*xd**4 + 245*H**2*Hd*fd*k1**4*xb1*xbe*xd**4 + 490*H**2*Hd*k1**4*xQm*xb1*xd**4 - 245*H**2*Hd*k1**4*xb1*xbe*xd**4 + 5930*H**2*Qm*f*k1**4*xd**3 + 5930*H**2*f*k1**4*xQm*xd**3 - 11860*H**2*f*k1**4*xd**3 + 4110*H**2*k1**4*xQm*xb1*xd**3 - 4110*H**2*k1**4*xb1*xd**3 - 490*H*Hd*Qm*f*fd*k1**4*xd**3 + 490*H*Hd*Qm*f*k1**4*xd**3 - 490*H*Hd*f*fd*k1**4*xQm*xd**3 + 980*H*Hd*f*fd*k1**4*xd**3 + 490*H*Hd*f*k1**4*xQm*xd**3 - 980*H*Hd*f*k1**4*xd**3 - 490*H*Hd*fd*k1**4*xQm*xb1*xd**3 + 490*H*Hd*fd*k1**4*xb1*xd**3 + 490*H*Hd*k1**4*xQm*xb1*xd**3 - 490*H*Hd*k1**4*xb1*xd**3 - 490*Hd*Hp*f*fd*k1**4*xd**4 + 490*Hd*Hp*f*k1**4*xd**4 - 245*Hd*Hp*fd*k1**4*xb1*xd**4 + 245*Hd*Hp*k1**4*xb1*xd**4 + 5*b1*(-42*G_expr(xd, d)**4*Hd*(fd - 1)*(2*H**2*Qm + Hp) + 4*G_expr(xd, d)**2*k1**2*xd*(H**2*(Qm*(100*Hd*xd*(fd - 1) - 349) + 349) + 50*H*Hd*(Qm - 1)*(fd - 1) + 50*Hd*Hp*xd*(fd - 1)) + H**2*Hd*be*(fd - 1)*(42*G_expr(xd, d)**4 - 200*G_expr(xd, d)**2*k1**2*xd**2 + 49*k1**4*xd**4) + k1**4*xd**3*(H**2*(Qm*(-98*Hd*xd*(fd - 1) + 822) - 822) - 98*H*Hd*(Qm - 1)*(fd - 1) - 49*Hd*Hp*xd*(fd - 1)))) + d**3*k1**2*(b1*(210*G_expr(xd, d)**4*(H**2*(-3*Hd*be*xd*(fd - 1) + Qm*(6*Hd*xd*(fd - 1) - 8) + 8) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) - 40*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-25*Hd*be*xd*(fd - 1) + Qm*(50*Hd*xd*(fd - 1) - 493) + 493) + 50*H*Hd*(Qm - 1)*(fd - 1) + 25*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(-147*Hd*be*xd*(fd - 1) + Qm*(294*Hd*xd*(fd - 1) - 4780) + 4780) + 490*H*Hd*(Qm - 1)*(fd - 1) + 147*Hd*Hp*xd*(fd - 1))) + f*(30*G_expr(xd, d)**4*(H**2*(-309*Hd*be*xd*(fd - 1) + 618*Hd*fd*xQm*xd - 309*Hd*fd*xbe*xd - 618*Hd*xQm*xd + 309*Hd*xbe*xd + 2*Qm*(309*Hd*xd*(fd - 1) - 622) - 1244*xQm + 2488) + 206*H*Hd*(fd - 1)*(Qm + xQm - 2) + 618*Hd*Hp*xd*(fd - 1)) - 468*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-5*Hd*be*xd*(fd - 1) + 10*Hd*fd*xQm*xd - 5*Hd*fd*xbe*xd - 10*Hd*xQm*xd + 5*Hd*xbe*xd + 2*Qm*(5*Hd*xd*(fd - 1) - 77) - 154*xQm + 308) + 10*H*Hd*(fd - 1)*(Qm + xQm - 2) + 10*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(-147*Hd*be*xd*(fd - 1) + 294*Hd*fd*xQm*xd - 147*Hd*fd*xbe*xd - 294*Hd*xQm*xd + 147*Hd*xbe*xd + Qm*(294*Hd*xd*(fd - 1) - 6880) - 6880*xQm + 13760) + 490*H*Hd*(fd - 1)*(Qm + xQm - 2) + 294*Hd*Hp*xd*(fd - 1))) + xb1*(-210*G_expr(xd, d)**4*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 8*xQm - 8) - 2*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + 40*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(25*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 493*xQm - 493) - 50*H*Hd*(fd - 1)*(xQm - 1) - 25*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(-147*Hd*xd*(fd - 1)*(-2*xQm + xbe) - 4780*xQm + 4780) + 490*H*Hd*(fd - 1)*(xQm - 1) + 147*Hd*Hp*xd*(fd - 1)))) + d**2*(H**2*Hd*be*(fd - 1)*(b1*k1**2*xd**2*(630*G_expr(xd, d)**4 - 500*G_expr(xd, d)**2*k1**2*xd**2 + 49*k1**4*xd**4) + f*(-6300*G_expr(xd, d)**6 + 9270*G_expr(xd, d)**4*k1**2*xd**2 - 1170*G_expr(xd, d)**2*k1**4*xd**4 + 49*k1**6*xd**6)) + f*(6300*G_expr(xd, d)**6*Hd*(fd - 1)*(H**2*(2*Qm + 2*xQm - xbe) + 2*Hp) - 90*G_expr(xd, d)**4*k1**2*xd*(H**2*(-103*Hd*xd*(fd - 1)*(-2*xQm + xbe) + Qm*(206*Hd*xd*(fd - 1) - 3114) - 3114*xQm + 6228) + 206*H*Hd*(fd - 1)*(Qm + xQm - 2) + 206*Hd*Hp*xd*(fd - 1)) + 18*G_expr(xd, d)**2*k1**4*xd**3*(H**2*(-65*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*Qm*(65*Hd*xd*(fd - 1) - 2598) - 5196*xQm + 10392) + 260*H*Hd*(fd - 1)*(Qm + xQm - 2) + 130*Hd*Hp*xd*(fd - 1)) + k1**6*xd**5*(H**2*(49*Hd*xd*(fd - 1)*(-2*xQm + xbe) + Qm*(-98*Hd*xd*(fd - 1) + 4698) + 4698*xQm - 9396) - 294*H*Hd*(fd - 1)*(Qm + xQm - 2) - 98*Hd*Hp*xd*(fd - 1))) + k1**2*xd*(b1*(-630*G_expr(xd, d)**4*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 9) + 9) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 20*G_expr(xd, d)**2*k1**2*xd**2*(2*H**2*(Qm*(25*Hd*xd*(fd - 1) - 637) + 637) + 100*H*Hd*(Qm - 1)*(fd - 1) + 25*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(Qm*(-98*Hd*xd*(fd - 1) + 3270) - 3270) - 294*H*Hd*(Qm - 1)*(fd - 1) - 49*Hd*Hp*xd*(fd - 1))) + xb1*(630*G_expr(xd, d)**4*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 18*xQm - 18) - 2*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) - 20*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(25*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 1274*xQm - 1274) - 100*H*Hd*(fd - 1)*(xQm - 1) - 25*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(49*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 3270*xQm - 3270) - 294*H*Hd*(fd - 1)*(xQm - 1) - 49*Hd*Hp*xd*(fd - 1))))) + d*(f*(-6300*G_expr(xd, d)**6*(H**2*(-Hd*be*xd*(fd - 1) + 2*Hd*fd*xQm*xd - Hd*fd*xbe*xd - 2*Hd*xQm*xd + Hd*xbe*xd + 2*Qm*(Hd*xd*(fd - 1) - 6) - 12*xQm + 24) + 2*H*Hd*(fd - 1)*(Qm + xQm - 2) + 2*Hd*Hp*xd*(fd - 1)) + 30*G_expr(xd, d)**4*k1**2*xd**2*(H**2*(-103*Hd*be*xd*(fd - 1) + 206*Hd*fd*xQm*xd - 103*Hd*fd*xbe*xd - 206*Hd*xQm*xd + 103*Hd*xbe*xd + 2*Qm*(103*Hd*xd*(fd - 1) - 7476) - 14952*xQm + 29904) + 618*H*Hd*(fd - 1)*(Qm + xQm - 2) + 206*Hd*Hp*xd*(fd - 1)) - 18*G_expr(xd, d)**2*k1**4*xd**4*(H**2*(-13*Hd*be*xd*(fd - 1) + 26*Hd*fd*xQm*xd - 13*Hd*fd*xbe*xd - 26*Hd*xQm*xd + 13*Hd*xbe*xd + Qm*(26*Hd*xd*(fd - 1) - 3194) - 3194*xQm + 6388) + 130*H*Hd*(fd - 1)*(Qm + xQm - 2) + 26*Hd*Hp*xd*(fd - 1)) + k1**6*xd**6*(H**2*(-7*Hd*be*xd*(fd - 1) + 14*Hd*fd*xQm*xd - 7*Hd*fd*xbe*xd - 14*Hd*xQm*xd + 7*Hd*xbe*xd + 2*Qm*(7*Hd*xd*(fd - 1) - 878) - 1756*xQm + 3512) + 98*H*Hd*(fd - 1)*(Qm + xQm - 2) + 14*Hd*Hp*xd*(fd - 1))) + k1**2*xd**2*(b1*(210*G_expr(xd, d)**4*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 42) + 84) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 20*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-5*Hd*be*xd*(fd - 1) + Qm*(10*Hd*xd*(fd - 1) - 781) + 781) + 50*H*Hd*(Qm - 1)*(fd - 1) + 5*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(-7*Hd*be*xd*(fd - 1) + 2*Qm*(7*Hd*xd*(fd - 1) - 612) + 1224) + 98*H*Hd*(Qm - 1)*(fd - 1) + 7*Hd*Hp*xd*(fd - 1))) + xb1*(-210*G_expr(xd, d)**4*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 84*xQm - 84) - 6*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + 20*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(5*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 781*xQm - 781) - 50*H*Hd*(fd - 1)*(xQm - 1) - 5*Hd*Hp*xd*(fd - 1)) + k1**4*xd**4*(H**2*(-7*Hd*xd*(fd - 1)*(-2*xQm + xbe) - 1224*xQm + 1224) + 98*H*Hd*(fd - 1)*(xQm - 1) + 7*Hd*Hp*xd*(fd - 1)))))
            
        expr = 27*D1*D1d*Hd**2*OMd*BaseInt.pk(k1/G_expr(xd, d))*(G_expr(xd, d)*(sin_equation(xd, d))*np.sin(k1*(d - xd)/G_expr(xd, d)) + 2*k1*(d - xd)*(7*H**2*d**7*k1**6*(b1*(Qm - 1) + f*(Qm + xQm - 2) + xb1*(xQm - 1)) + 2*H*xd*(f*(Qm + xQm - 2)*(3150*G_expr(xd, d)**6*(34*H - Hd*fd + Hd) - 45*G_expr(xd, d)**4*k1**2*xd**2*(349*H - 11*Hd*(fd - 1)) + 2*G_expr(xd, d)**2*k1**4*xd**4*(278*H - 11*Hd*(fd - 1)) - 7*H*k1**6*xd**6) - k1**2*xd**2*(b1*(Qm - 1) + xb1*(xQm - 1))*(105*G_expr(xd, d)**4*(19*H - Hd*fd + Hd) - 5*G_expr(xd, d)**2*k1**2*xd**2*(52*H - 3*Hd*(fd - 1)) + 7*H*k1**4*xd**4)) + d**6*k1**4*(-44*G_expr(xd, d)**2*H**2*Hd*Qm*f*fd + 44*G_expr(xd, d)**2*H**2*Hd*Qm*f + 22*G_expr(xd, d)**2*H**2*Hd*be*f*fd - 22*G_expr(xd, d)**2*H**2*Hd*be*f - 44*G_expr(xd, d)**2*H**2*Hd*f*fd*xQm + 22*G_expr(xd, d)**2*H**2*Hd*f*fd*xbe + 44*G_expr(xd, d)**2*H**2*Hd*f*xQm - 22*G_expr(xd, d)**2*H**2*Hd*f*xbe - 30*G_expr(xd, d)**2*H**2*Hd*fd*xQm*xb1 + 15*G_expr(xd, d)**2*H**2*Hd*fd*xb1*xbe + 30*G_expr(xd, d)**2*H**2*Hd*xQm*xb1 - 15*G_expr(xd, d)**2*H**2*Hd*xb1*xbe - 44*G_expr(xd, d)**2*Hd*Hp*f*fd + 44*G_expr(xd, d)**2*Hd*Hp*f - 15*G_expr(xd, d)**2*Hd*Hp*fd*xb1 + 15*G_expr(xd, d)**2*Hd*Hp*xb1 - 56*H**2*Qm*f*k1**2*xd - 56*H**2*f*k1**2*xQm*xd + 112*H**2*f*k1**2*xd - 56*H**2*k1**2*xQm*xb1*xd + 56*H**2*k1**2*xb1*xd + b1*(15*G_expr(xd, d)**2*H**2*Hd*be*(fd - 1) - 15*G_expr(xd, d)**2*Hd*(fd - 1)*(2*H**2*Qm + Hp) - 56*H**2*k1**2*xd*(Qm - 1))) + d**5*k1**4*(2*G_expr(xd, d)**2*f*(H**2*(-55*Hd*be*xd*(fd - 1) + 110*Hd*fd*xQm*xd - 55*Hd*fd*xbe*xd - 110*Hd*xQm*xd + 55*Hd*xbe*xd + Qm*(110*Hd*xd*(fd - 1) - 139) - 139*xQm + 278) + 22*H*Hd*(fd - 1)*(Qm + xQm - 2) + 110*Hd*Hp*xd*(fd - 1)) - 5*G_expr(xd, d)**2*xb1*(H**2*(15*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 26*xQm - 26) - 6*H*Hd*(fd - 1)*(xQm - 1) - 15*Hd*Hp*xd*(fd - 1)) + 189*H**2*f*k1**2*xd**2*(Qm + xQm - 2) + 189*H**2*k1**2*xb1*xd**2*(xQm - 1) + b1*(5*G_expr(xd, d)**2*(H**2*(-15*Hd*be*xd*(fd - 1) + Qm*(30*Hd*xd*(fd - 1) - 26) + 26) + 6*H*Hd*(Qm - 1)*(fd - 1) + 15*Hd*Hp*xd*(fd - 1)) + 189*H**2*k1**2*xd**2*(Qm - 1))) + d**4*k1**2*(990*G_expr(xd, d)**4*H**2*Hd*Qm*f*fd - 990*G_expr(xd, d)**4*H**2*Hd*Qm*f - 495*G_expr(xd, d)**4*H**2*Hd*be*f*fd + 495*G_expr(xd, d)**4*H**2*Hd*be*f + 990*G_expr(xd, d)**4*H**2*Hd*f*fd*xQm - 495*G_expr(xd, d)**4*H**2*Hd*f*fd*xbe - 990*G_expr(xd, d)**4*H**2*Hd*f*xQm + 495*G_expr(xd, d)**4*H**2*Hd*f*xbe + 210*G_expr(xd, d)**4*H**2*Hd*fd*xQm*xb1 - 105*G_expr(xd, d)**4*H**2*Hd*fd*xb1*xbe - 210*G_expr(xd, d)**4*H**2*Hd*xQm*xb1 + 105*G_expr(xd, d)**4*H**2*Hd*xb1*xbe + 990*G_expr(xd, d)**4*Hd*Hp*f*fd - 990*G_expr(xd, d)**4*Hd*Hp*f + 105*G_expr(xd, d)**4*Hd*Hp*fd*xb1 - 105*G_expr(xd, d)**4*Hd*Hp*xb1 - 440*G_expr(xd, d)**2*H**2*Hd*Qm*f*fd*k1**2*xd**2 + 440*G_expr(xd, d)**2*H**2*Hd*Qm*f*k1**2*xd**2 + 220*G_expr(xd, d)**2*H**2*Hd*be*f*fd*k1**2*xd**2 - 220*G_expr(xd, d)**2*H**2*Hd*be*f*k1**2*xd**2 - 440*G_expr(xd, d)**2*H**2*Hd*f*fd*k1**2*xQm*xd**2 + 220*G_expr(xd, d)**2*H**2*Hd*f*fd*k1**2*xbe*xd**2 + 440*G_expr(xd, d)**2*H**2*Hd*f*k1**2*xQm*xd**2 - 220*G_expr(xd, d)**2*H**2*Hd*f*k1**2*xbe*xd**2 - 300*G_expr(xd, d)**2*H**2*Hd*fd*k1**2*xQm*xb1*xd**2 + 150*G_expr(xd, d)**2*H**2*Hd*fd*k1**2*xb1*xbe*xd**2 + 300*G_expr(xd, d)**2*H**2*Hd*k1**2*xQm*xb1*xd**2 - 150*G_expr(xd, d)**2*H**2*Hd*k1**2*xb1*xbe*xd**2 + 2224*G_expr(xd, d)**2*H**2*Qm*f*k1**2*xd + 2224*G_expr(xd, d)**2*H**2*f*k1**2*xQm*xd - 4448*G_expr(xd, d)**2*H**2*f*k1**2*xd + 1040*G_expr(xd, d)**2*H**2*k1**2*xQm*xb1*xd - 1040*G_expr(xd, d)**2*H**2*k1**2*xb1*xd - 220*G_expr(xd, d)**2*H*Hd*Qm*f*fd*k1**2*xd + 220*G_expr(xd, d)**2*H*Hd*Qm*f*k1**2*xd - 220*G_expr(xd, d)**2*H*Hd*f*fd*k1**2*xQm*xd + 440*G_expr(xd, d)**2*H*Hd*f*fd*k1**2*xd + 220*G_expr(xd, d)**2*H*Hd*f*k1**2*xQm*xd - 440*G_expr(xd, d)**2*H*Hd*f*k1**2*xd - 150*G_expr(xd, d)**2*H*Hd*fd*k1**2*xQm*xb1*xd + 150*G_expr(xd, d)**2*H*Hd*fd*k1**2*xb1*xd + 150*G_expr(xd, d)**2*H*Hd*k1**2*xQm*xb1*xd - 150*G_expr(xd, d)**2*H*Hd*k1**2*xb1*xd - 440*G_expr(xd, d)**2*Hd*Hp*f*fd*k1**2*xd**2 + 440*G_expr(xd, d)**2*Hd*Hp*f*k1**2*xd**2 - 150*G_expr(xd, d)**2*Hd*Hp*fd*k1**2*xb1*xd**2 + 150*G_expr(xd, d)**2*Hd*Hp*k1**2*xb1*xd**2 - 350*H**2*Qm*f*k1**4*xd**3 - 350*H**2*f*k1**4*xQm*xd**3 + 700*H**2*f*k1**4*xd**3 - 350*H**2*k1**4*xQm*xb1*xd**3 + 350*H**2*k1**4*xb1*xd**3 - 5*b1*(-21*G_expr(xd, d)**4*Hd*(fd - 1)*(2*H**2*Qm + Hp) + 3*G_expr(xd, d)**2*H**2*Hd*be*(7*G_expr(xd, d)**2 - 10*k1**2*xd**2)*(fd - 1) + 2*G_expr(xd, d)**2*k1**2*xd*(2*H**2*(Qm*(15*Hd*xd*(fd - 1) - 52) + 52) + 15*H*Hd*(Qm - 1)*(fd - 1) + 15*Hd*Hp*xd*(fd - 1)) + 70*H**2*k1**4*xd**3*(Qm - 1))) + d**3*k1**2*(-5*b1*(21*G_expr(xd, d)**4*(H**2*(-3*Hd*be*xd*(fd - 1) + Qm*(6*Hd*xd*(fd - 1) - 8) + 8) + 2*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) + 2*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(15*Hd*be*xd*(fd - 1) + Qm*(-30*Hd*xd*(fd - 1) + 286) - 286) - 30*H*Hd*(Qm - 1)*(fd - 1) - 15*Hd*Hp*xd*(fd - 1)) - 77*H**2*k1**4*xd**4*(Qm - 1)) + f*(-15*G_expr(xd, d)**4*(H**2*(-99*Hd*be*xd*(fd - 1) + 198*Hd*fd*xQm*xd - 99*Hd*fd*xbe*xd - 198*Hd*xQm*xd + 99*Hd*xbe*xd + 2*Qm*(99*Hd*xd*(fd - 1) - 202) - 404*xQm + 808) + 66*H*Hd*(fd - 1)*(Qm + xQm - 2) + 198*Hd*Hp*xd*(fd - 1)) + 44*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-5*Hd*be*xd*(fd - 1) + 10*Hd*fd*xQm*xd - 5*Hd*fd*xbe*xd - 10*Hd*xQm*xd + 5*Hd*xbe*xd + Qm*(10*Hd*xd*(fd - 1) - 139) - 139*xQm + 278) + 10*H*Hd*(fd - 1)*(Qm + xQm - 2) + 10*Hd*Hp*xd*(fd - 1)) + 385*H**2*k1**4*xd**4*(Qm + xQm - 2)) + 5*xb1*(21*G_expr(xd, d)**4*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 8*xQm - 8) - 2*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + 2*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-15*Hd*xd*(fd - 1)*(-2*xQm + xbe) - 286*xQm + 286) + 30*H*Hd*(fd - 1)*(xQm - 1) + 15*Hd*Hp*xd*(fd - 1)) + 77*H**2*k1**4*xd**4*(xQm - 1))) + d**2*(5*G_expr(xd, d)**2*H**2*Hd*be*(fd - 1)*(630*G_expr(xd, d)**4*f - 63*G_expr(xd, d)**2*b1*k1**2*xd**2 - 297*G_expr(xd, d)**2*f*k1**2*xd**2 + 15*b1*k1**4*xd**4 + 22*f*k1**4*xd**4) + f*(-3150*G_expr(xd, d)**6*Hd*(fd - 1)*(H**2*(2*Qm + 2*xQm - xbe) + 2*Hp) + 15*G_expr(xd, d)**4*k1**2*xd*(H**2*(-99*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*Qm*(99*Hd*xd*(fd - 1) - 1451) - 2902*xQm + 5804) + 198*H*Hd*(fd - 1)*(Qm + xQm - 2) + 198*Hd*Hp*xd*(fd - 1)) - 2*G_expr(xd, d)**2*k1**4*xd**3*(H**2*(-55*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 2*Qm*(55*Hd*xd*(fd - 1) - 1946) - 3892*xQm + 7784) + 220*H*Hd*(fd - 1)*(Qm + xQm - 2) + 110*Hd*Hp*xd*(fd - 1)) - 252*H**2*k1**6*xd**5*(Qm + xQm - 2)) + k1**2*xd*(b1*(315*G_expr(xd, d)**4*(2*H**2*(Qm*(Hd*xd*(fd - 1) - 9) + 9) + 2*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) - 5*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(Qm*(30*Hd*xd*(fd - 1) - 728) + 728) + 60*H*Hd*(Qm - 1)*(fd - 1) + 15*Hd*Hp*xd*(fd - 1)) - 252*H**2*k1**4*xd**4*(Qm - 1)) + xb1*(-315*G_expr(xd, d)**4*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 18*xQm - 18) - 2*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) + 5*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(15*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 728*xQm - 728) - 60*H*Hd*(fd - 1)*(xQm - 1) - 15*Hd*Hp*xd*(fd - 1)) - 252*H**2*k1**4*xd**4*(xQm - 1)))) + d*(f*(3150*G_expr(xd, d)**6*(H**2*(-Hd*be*xd*(fd - 1) + 2*Hd*fd*xQm*xd - Hd*fd*xbe*xd - 2*Hd*xQm*xd + Hd*xbe*xd + 2*Qm*(Hd*xd*(fd - 1) - 6) - 12*xQm + 24) + 2*H*Hd*(fd - 1)*(Qm + xQm - 2) + 2*Hd*Hp*xd*(fd - 1)) - 15*G_expr(xd, d)**4*k1**2*xd**2*(H**2*(-33*Hd*be*xd*(fd - 1) + 66*Hd*fd*xQm*xd - 33*Hd*fd*xbe*xd - 66*Hd*xQm*xd + 33*Hd*xbe*xd + Qm*(66*Hd*xd*(fd - 1) - 4592) - 4592*xQm + 9184) + 198*H*Hd*(fd - 1)*(Qm + xQm - 2) + 66*Hd*Hp*xd*(fd - 1)) + 2*G_expr(xd, d)**2*k1**4*xd**4*(H**2*(-11*Hd*be*xd*(fd - 1) + 22*Hd*fd*xQm*xd - 11*Hd*fd*xbe*xd - 22*Hd*xQm*xd + 11*Hd*xbe*xd + Qm*(22*Hd*xd*(fd - 1) - 2363) - 2363*xQm + 4726) + 110*H*Hd*(fd - 1)*(Qm + xQm - 2) + 22*Hd*Hp*xd*(fd - 1)) + 91*H**2*k1**6*xd**6*(Qm + xQm - 2)) + k1**2*xd**2*(b1*(-105*G_expr(xd, d)**4*(H**2*(-Hd*be*xd*(fd - 1) + 2*Qm*(Hd*xd*(fd - 1) - 42) + 84) + 6*H*Hd*(Qm - 1)*(fd - 1) + Hd*Hp*xd*(fd - 1)) + 5*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(-3*Hd*be*xd*(fd - 1) + Qm*(6*Hd*xd*(fd - 1) - 442) + 442) + 30*H*Hd*(Qm - 1)*(fd - 1) + 3*Hd*Hp*xd*(fd - 1)) + 91*H**2*k1**4*xd**4*(Qm - 1)) + xb1*(105*G_expr(xd, d)**4*(H**2*(Hd*xd*(fd - 1)*(-2*xQm + xbe) + 84*xQm - 84) - 6*H*Hd*(fd - 1)*(xQm - 1) - Hd*Hp*xd*(fd - 1)) - 5*G_expr(xd, d)**2*k1**2*xd**2*(H**2*(3*Hd*xd*(fd - 1)*(-2*xQm + xbe) + 442*xQm - 442) - 30*H*Hd*(fd - 1)*(xQm - 1) - 3*Hd*Hp*xd*(fd - 1)) + 91*H**2*k1**4*xd**4*(xQm - 1)))))*np.cos(k1*(d - xd)/G_expr(xd, d)))/(2*G_expr(xd, d)*H**2*d*k1**9*(d - xd)**8)
        return expr
    
    
class IntInt(BaseInt):
    @staticmethod
    def l0(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128, n2=None):
        return BaseInt.double_int(IntInt.l0_integrand, cosmo_funcs, k1, zz, t=t, sigma=sigma, n=n, n2=n2)
        
    @staticmethod
    def l0_integrand(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
        
        baseint = BaseInt(cosmo_funcs)

        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd1, xd2, d):
            return (xd1 + xd2) / (2 * d)

        # for when xd1 != xd2
        def int_terms1(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            zzd2, fd2, D1d2, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd2)

            expr = D1d1*D1d2*(-6*G_expr(xd1, xd2, d)**4*Hd1**2*Hd2**2*OMd1*OMd2*(6*H**2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(xd1**2 + 4*xd1*xd2 + xd2**2) + xd1*(3 - 3*xQm)*(d - xd2)*(xd1 - xd2)**2*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) + xd2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)))*np.cos(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**2*d**2*k1**4*(xd1 - xd2)**4) + 3*G_expr(xd1, xd2, d)**3*Hd1**2*Hd2**2*OMd1*OMd2*(2*G_expr(xd1, xd2, d)**2*H**2*xd1*(3 - 3*xQm)*(d - xd2)*(xd1 - xd2)**2*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) + 2*G_expr(xd1, xd2, d)**2*H**2*xd2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 3*G_expr(xd1, xd2, d)**2*(xd1 - xd2)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 12*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(-G_expr(xd1, xd2, d)**2*(xd1**2 + 4*xd1*xd2 + xd2**2) + 2*k1**2*xd1*xd2*(xd1 - xd2)**2))*np.sin(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**5*(-xd1 + xd2)**5))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1,zzd2)/G_expr(xd1, xd2, d)**3

            return expr

        # for when xd1 == xd2
        def int_terms2(xd1, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            _, fd2, _, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd1) # TODO: should not need to call this function again - all parameters here should be the d1 versions

            expr = D1d1**2*Hd1**2*Hd2**2*OMd1*OMd2*(45*G_expr(xd1, xd2, d)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 60*G_expr(xd1, xd2, d)**2*H**4*k1**2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1) + 10*G_expr(xd1, xd2, d)**2*H**2*k1**2*xd1*(3 - 3*Qm)*(d - xd1)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 10*G_expr(xd1, xd2, d)**2*H**2*k1**2*xd2*(3 - 3*xQm)*(d - xd2)*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) + 24*H**4*k1**4*xd1*xd2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1)/(5*G_expr(xd1, xd2, d)**3*H**4*d**2*k1**4)
            
            return expr
            
        return BaseInt.int_2Dgrid(xd1,xd2,cosmo_funcs, k1, zz,int_terms2,int_terms1) # parse functions as well
    
    @staticmethod
    def l1(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128, n2=None):
        return BaseInt.double_int(IntInt.l1_integrand, cosmo_funcs, k1, zz, t=t, sigma=sigma, n=n, n2=n2)
        
    @staticmethod    
    def l1_integrand(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):

        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd1, xd2, d):
            return (xd1 + xd2) / (2 * d)
            
        # for when xd1 != xd2
        def int_terms1(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            zzd2, fd2, D1d2, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd2)

            expr = -9*1j*D1d1*D1d2*Hd1**2*Hd2**2*OMd1*OMd2*(G_expr(xd1, xd2, d)*(24*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(-3*G_expr(xd1, xd2, d)**2*(xd1**2 + 3*xd1*xd2 + xd2**2) + k1**2*(xd1 - xd2)**2*(xd1**2 + 4*xd1*xd2 + xd2**2)) - 2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(G_expr(xd1, xd2, d)**2*(xd1 + 2*xd2) - k1**2*xd2*(xd1 - xd2)**2)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 3*(xd1 - xd2)**2*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(G_expr(xd1, xd2, d)**2*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 2*H**2*(d - xd2)*(xQm - 1)*(-G_expr(xd1, xd2, d)**2*(2*xd1 + xd2) + k1**2*xd1*(xd1 - xd2)**2)))*np.sin(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(xd1 - xd2)**6 + k1*(2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(xd1 + 2*xd2)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*xQm)*(d - xd2)*(xd1 - xd2)**2*(2*xd1 + xd2)*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) + 3*G_expr(xd1, xd2, d)**2*(xd1 - xd2)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 24*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(-3*G_expr(xd1, xd2, d)**2*(xd1**2 + 3*xd1*xd2 + xd2**2) + k1**2*xd1*xd2*(xd1 - xd2)**2))*np.cos(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(-xd1 + xd2)**5)*BaseInt.pk(k1/G_expr(xd1, xd2, d))/(H**4*d**2*k1**6)

            return expr

        # for when xd1 == xd2
        def int_terms2(xd1, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            _, fd2, _, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd1) # TODO: should not need to call this function again - all parameters here should be the d1 versions

            expr = 18*1j*D1d1**2*Hd1**2*Hd2**2*OMd1*OMd2*(5*G_expr(xd1, xd2, d)**2*(Qm - 1)*(d - xd1)*(H**2*(-Hd2*d*(fd2 - 1)*(-2*xQm + xbe) - 2*xQm + 2) - 2*H*Hd2*(fd2 - 1)*(xQm - 1) + Hd2*Hp*d*(fd2 - 1))/(H**2*k1**2) + 5*G_expr(xd1, xd2, d)**2*(d - xd2)*(xQm - 1)*(H**2*(Hd1*be*d*(fd1 - 1) + 2*Qm*d*(-Hd1*fd1 + Hd1) + 2*Qm - 2) + 2*H*Hd1*(Qm - 1)*(fd1 - 1) - Hd1*Hp*d*(fd1 - 1))/(H**2*k1**2) + 2*xd1*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1) - 2*xd2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1))*BaseInt.pk(k1/G_expr(xd1, xd2, d))/(5*G_expr(xd1, xd2, d)**2*d**2*k1)
            
            return expr

        return BaseInt.int_2Dgrid(xd1,xd2,cosmo_funcs, k1, zz,int_terms2,int_terms1) # parse functions as well
    
    @staticmethod
    def l2(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128, n2=None):
        return BaseInt.double_int(IntInt.l2_integrand, cosmo_funcs, k1, zz, t=t, sigma=sigma, n=n, n2=n2)
        
    @staticmethod    
    def l2_integrand(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd1, xd2, d):
            return (xd1 + xd2) / (2 * d)
            
        # for when xd1 != xd2
        def int_terms1(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            zzd2, fd2, D1d2, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd2)

            expr = D1d1*D1d2*(-15*G_expr(xd1, xd2, d)**4*Hd1**2*Hd2**2*OMd1*OMd2*(24*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(-27*G_expr(xd1, xd2, d)**2*(xd1**2 + 3*xd1*xd2 + xd2**2) + 2*k1**2*(xd1 - xd2)**2*(xd1**2 + 4*xd1*xd2 + xd2**2)) - 2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(9*G_expr(xd1, xd2, d)**2*(xd1 + xd2) - k1**2*xd2*(xd1 - xd2)**2)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 3*(xd1 - xd2)**2*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(3*G_expr(xd1, xd2, d)**2*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 2*H**2*(d - xd2)*(xQm - 1)*(-9*G_expr(xd1, xd2, d)**2*(xd1 + xd2) + k1**2*xd1*(xd1 - xd2)**2)))*np.cos(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**6*(xd1 - xd2)**6) + 15*G_expr(xd1, xd2, d)**3*Hd1**2*Hd2**2*OMd1*OMd2*(-2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(9*G_expr(xd1, xd2, d)**2*(xd1 + xd2) - k1**2*(xd1 - xd2)**2*(3*xd1 + 4*xd2))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*xQm)*(d - xd2)*(xd1 - xd2)**2*(9*G_expr(xd1, xd2, d)**2*(xd1 + xd2) - k1**2*(xd1 - xd2)**2*(4*xd1 + 3*xd2))*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) - 3*G_expr(xd1, xd2, d)**2*(3*G_expr(xd1, xd2, d)**2 - k1**2*(xd1 - xd2)**2)*(xd1 - xd2)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 24*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(27*G_expr(xd1, xd2, d)**4*(xd1**2 + 3*xd1*xd2 + xd2**2) - G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(11*xd1**2 + 35*xd1*xd2 + 11*xd2**2) + k1**4*xd1*xd2*(xd1 - xd2)**4))*np.sin(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**7*(-xd1 + xd2)**7))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1,zzd2)/G_expr(xd1, xd2, d)**3

            return expr

        # for when xd1 == xd2
        def int_terms2(xd1, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            _, fd2, _, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd1) # TODO: should not need to call this function again - all parameters here should be the d1 versions

            expr = 2*D1d1**2*Hd1**2*Hd2**2*OMd1*OMd2*(84*G_expr(xd1, xd2, d)**2*H**2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1) - 7*G_expr(xd1, xd2, d)**2*xd1*(3 - 3*Qm)*(d - xd1)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 7*G_expr(xd1, xd2, d)**2*xd2*(3 - 3*xQm)*(d - xd2)*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) - 24*H**2*k1**2*xd1*xd2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1)/(7*G_expr(xd1, xd2, d)**3*H**2*d**2*k1**2)
            
            return expr

        return BaseInt.int_2Dgrid(xd1,xd2,cosmo_funcs, k1, zz,int_terms2,int_terms1) # parse functions as well
    
    @staticmethod
    def l3(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128, n2=None):
        return BaseInt.double_int(IntInt.l3_integrand, cosmo_funcs, k1, zz, t=t, sigma=sigma, n=n, n2=n2)
        
    @staticmethod    
    def l3_integrand(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd1, xd2, d):
            return (xd1 + xd2) / (2 * d)
            
        # for when xd1 != xd2
        def int_terms1(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            zzd2, fd2, D1d2, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd2)

            expr = D1d1*D1d2*(-21*1j*G_expr(xd1, xd2, d)**4*Hd1**2*Hd2**2*OMd1*OMd2*(12*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(150*G_expr(xd1, xd2, d)**4*(4*xd1**2 + 13*xd1*xd2 + 4*xd2**2) - 3*G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(87*xd1**2 + 286*xd1*xd2 + 87*xd2**2) + 7*k1**4*(xd1 - xd2)**4*(xd1**2 + 4*xd1*xd2 + xd2**2)) + 2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d))*(30*G_expr(xd1, xd2, d)**4*(3*xd1 + 2*xd2) - 9*G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(4*xd1 + 3*xd2) + k1**4*xd2*(xd1 - xd2)**4) + (xd1 - xd2)**2*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(9*G_expr(xd1, xd2, d)**2*(5*G_expr(xd1, xd2, d)**2 - 2*k1**2*(xd1 - xd2)**2)*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 2*H**2*(3 - 3*xQm)*(d - xd2)*(30*G_expr(xd1, xd2, d)**4*(2*xd1 + 3*xd2) - 9*G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(3*xd1 + 4*xd2) + k1**4*xd1*(xd1 - xd2)**4)))*np.sin(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**8*(xd1 - xd2)**8) - 21*1j*G_expr(xd1, xd2, d)**3*Hd1**2*Hd2**2*OMd1*OMd2*(-2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(30*G_expr(xd1, xd2, d)**2*(3*xd1 + 2*xd2) - k1**2*(xd1 - xd2)**2*(6*xd1 + 7*xd2))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*xQm)*(d - xd2)*(xd1 - xd2)**2*(30*G_expr(xd1, xd2, d)**2*(2*xd1 + 3*xd2) - k1**2*(xd1 - xd2)**2*(7*xd1 + 6*xd2))*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) - 3*G_expr(xd1, xd2, d)**2*(15*G_expr(xd1, xd2, d)**2 - k1**2*(xd1 - xd2)**2)*(xd1 - xd2)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 12*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(150*G_expr(xd1, xd2, d)**4*(4*xd1**2 + 13*xd1*xd2 + 4*xd2**2) - G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(61*xd1**2 + 208*xd1*xd2 + 61*xd2**2) + 2*k1**4*xd1*xd2*(xd1 - xd2)**4))*np.cos(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**7*(-xd1 + xd2)**7))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1,zzd2)/G_expr(xd1, xd2, d)**3

            return expr

        # for when xd1 == xd2 
        def int_terms2(xd1, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            zzd2, fd2, _, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd1) # TODO: should not need to call this function again - all parameters here should be the d1 versions

            expr = 2*D1d1**2*Hd1**2*Hd2**2*OMd1*OMd2*(84*G_expr(xd1, xd2, d)**2*H**2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1) - 7*G_expr(xd1, xd2, d)**2*xd1*(3 - 3*Qm)*(d - xd1)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 7*G_expr(xd1, xd2, d)**2*xd2*(3 - 3*xQm)*(d - xd2)*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) - 24*H**2*k1**2*xd1*xd2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1)/(7*G_expr(xd1, xd2, d)**3*H**2*d**2*k1**2)
            
            return expr

        return BaseInt.int_2Dgrid(xd1,xd2,cosmo_funcs, k1, zz,int_terms2,int_terms1) # parse functions as well
    
    @staticmethod
    def l4(cosmo_funcs, k1, zz=0, t=0, sigma=None, n=128, n2=None):
        return BaseInt.double_int(IntInt.l4_integrand, cosmo_funcs, k1, zz, t=t, sigma=sigma, n=n, n2=n2)
        
    @staticmethod    
    def l4_integrand(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
        baseint = BaseInt(cosmo_funcs)
        
        # allow broadcasting of k1 and zz with xd
        k1,zz = utils.enable_broadcasting(k1,zz,n=1)
        
        d, H, OM, Qm, xQm, be, xbe = BaseInt.get_int_params(cosmo_funcs, zz)
        Hp = -(1+zz)*H*cosmo_funcs.dH_c(zz)
        
        def G_expr(xd1, xd2, d):
            return (xd1 + xd2) / (2 * d)
            
        # for when xd1 != xd2
        def int_terms1(xd1, xd2, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            zzd2, fd2, D1d2, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd2)

            expr = D1d1*D1d2*(-21*1j*G_expr(xd1, xd2, d)**4*Hd1**2*Hd2**2*OMd1*OMd2*(12*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(150*G_expr(xd1, xd2, d)**4*(4*xd1**2 + 13*xd1*xd2 + 4*xd2**2) - 3*G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(87*xd1**2 + 286*xd1*xd2 + 87*xd2**2) + 7*k1**4*(xd1 - xd2)**4*(xd1**2 + 4*xd1*xd2 + xd2**2)) + 2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d))*(30*G_expr(xd1, xd2, d)**4*(3*xd1 + 2*xd2) - 9*G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(4*xd1 + 3*xd2) + k1**4*xd2*(xd1 - xd2)**4) + (xd1 - xd2)**2*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(9*G_expr(xd1, xd2, d)**2*(5*G_expr(xd1, xd2, d)**2 - 2*k1**2*(xd1 - xd2)**2)*(xd1 - xd2)**2*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 2*H**2*(3 - 3*xQm)*(d - xd2)*(30*G_expr(xd1, xd2, d)**4*(2*xd1 + 3*xd2) - 9*G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(3*xd1 + 4*xd2) + k1**4*xd1*(xd1 - xd2)**4)))*np.sin(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**8*(xd1 - xd2)**8) - 21*1j*G_expr(xd1, xd2, d)**3*Hd1**2*Hd2**2*OMd1*OMd2*(-2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*Qm)*(d - xd1)*(xd1 - xd2)**2*(30*G_expr(xd1, xd2, d)**2*(3*xd1 + 2*xd2) - k1**2*(xd1 - xd2)**2*(6*xd1 + 7*xd2))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 2*G_expr(xd1, xd2, d)**2*H**2*(3 - 3*xQm)*(d - xd2)*(xd1 - xd2)**2*(30*G_expr(xd1, xd2, d)**2*(2*xd1 + 3*xd2) - k1**2*(xd1 - xd2)**2*(7*xd1 + 6*xd2))*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) - 3*G_expr(xd1, xd2, d)**2*(15*G_expr(xd1, xd2, d)**2 - k1**2*(xd1 - xd2)**2)*(xd1 - xd2)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) - 12*H**4*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1)*(150*G_expr(xd1, xd2, d)**4*(4*xd1**2 + 13*xd1*xd2 + 4*xd2**2) - G_expr(xd1, xd2, d)**2*k1**2*(xd1 - xd2)**2*(61*xd1**2 + 208*xd1*xd2 + 61*xd2**2) + 2*k1**4*xd1*xd2*(xd1 - xd2)**4))*np.cos(k1*(-xd1 + xd2)/G_expr(xd1, xd2, d))/(H**4*d**2*k1**7*(-xd1 + xd2)**7))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1,zzd2)/G_expr(xd1, xd2, d)**3

            return expr

        # for when xd1 == xd2
        def int_terms2(xd1, cosmo_funcs, k1, zz, t=0, sigma=None):
            zzd1, fd1, D1d1, Hd1, OMd1 = BaseInt.get_integrand_params(cosmo_funcs, xd1)
            _, fd2, _, Hd2, OMd2 = BaseInt.get_integrand_params(cosmo_funcs, xd1) # TODO: should not need to call this function again - all parameters here should be the d1 versions

            expr = 9*D1d1**2*Hd1**2*Hd2**2*OMd1*OMd2*(525*G_expr(xd1, xd2, d)**4*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d))*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 1260*G_expr(xd1, xd2, d)**2*H**4*k1**2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1) + 70*G_expr(xd1, xd2, d)**2*H**2*k1**2*xd1*(3 - 3*Qm)*(d - xd1)*(-2*H**2*(xQm - 1) + Hd2*(fd2 - 1)*(-H**2*d*(-2*xQm + xbe) - 2*H*(xQm - 1) + Hp*d)) + 70*G_expr(xd1, xd2, d)**2*H**2*k1**2*xd2*(3 - 3*xQm)*(d - xd2)*(-2*H**2*(Qm - 1) - Hd1*(fd1 - 1)*(H**2*d*(-2*Qm + be) + 2*H*(Qm - 1) - Hp*d)) + 136*H**4*k1**4*xd1*xd2*(Qm - 1)*(d - xd1)*(d - xd2)*(xQm - 1))*baseint.pk(k1/G_expr(xd1, xd2, d),zzd1)/(70*G_expr(xd1, xd2, d)**3*H**4*d**2*k1**4)
            
            return expr

        return BaseInt.int_2Dgrid(xd1,xd2,cosmo_funcs, k1, zz,int_terms2,int_terms1) # parse functions as well
