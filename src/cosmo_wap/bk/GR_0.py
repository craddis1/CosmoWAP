import numpy as np
       
#PP stuff
def Bk_0(params,mu,phi):
    k1,k2,k3,theta,Pk1,Pk2,Pk3,Pkd1,Pkd2,Pkd3,Pkdd1,Pkdd2,Pkdd3,d,K,C,f,D1,b1,b2,g2 = params
    mu2 = mu*np.cos(theta)+np.sqrt((1-mu**2)) *np.sin(theta)*np.cos(phi)
    st = np.sin(theta)
    ct= np.cos(theta)
    
    perm12 = D1**4*Pk1*Pk2*b1**2*f*mu*mu2*(7*b1*k2**2*k3**2 + 16*ct**2*k1**2*k2**2 + 14*ct*k1*k2*(k1**2 + k2**2) + k1**2*(7*b1*k3**2 + 12*k2**2))/(7*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1**2*(b1*(4*ct**2*k1*k2 + 7*ct*(k1**2 + k2**2) + 10*k1*k2) + 7*k1*k2*(b2 + 2*g2*(ct**2 - 1)))/(7*k1*k2) + D1**4*Pk1*Pk2*b1*f**3*k1*mu**5*mu2/k2 + D1**4*Pk1*Pk2*b1*f**3*k2*mu*mu2**5/k1 + D1**4*Pk1*Pk2*b1*f**2*mu**4*(8*ct**2*k1**2*k2 + 7*ct*k1*(k1**2 + k2**2) + k2*(7*b1*k3**2 + 6*k1**2))/(7*k2*k3**2) + D1**4*Pk1*Pk2*b1*f**2*mu2**4*(8*ct**2*k1*k2**2 + 7*ct*k2*(k1**2 + k2**2) + k1*(7*b1*k3**2 + 6*k2**2))/(7*k1*k3**2) + D1**4*Pk1*Pk2*b1*f**2*mu**3*mu2*(7*b1*k2**2*k3**2 + 16*ct**2*k1**2*k2**2 + 14*ct*k1*k2*(k1**2 + k2**2) + 2*k1**2*(7*b1*k3**2 + 6*k2**2))/(7*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1*f**2*mu*mu2**3*(14*b1*k2**2*k3**2 + 16*ct**2*k1**2*k2**2 + 14*ct*k1*k2*(k1**2 + k2**2) + k1**2*(7*b1*k3**2 + 12*k2**2))/(7*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1*f*mu**2*(7*b1**2*k1*k2*k3**2 + b1*(4*ct**2*k1*k2*(2*k1**2 + k3**2) + 7*ct*(k1**2 + k2**2)*(k1**2 + k3**2) + 2*k1*k2*(3*k1**2 + 5*k3**2)) + 7*k1*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)))/(7*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1*f*mu2**2*(7*b1**2*k1*k2*k3**2 + b1*(4*ct**2*k1*k2*(2*k2**2 + k3**2) + 7*ct*(k1**2 + k2**2)*(k2**2 + k3**2) + 2*k1*k2*(3*k2**2 + 5*k3**2)) + 7*k1*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)))/(7*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**4*k1*mu**5*mu2**3/k2 + 2*D1**4*Pk1*Pk2*f**4*mu**4*mu2**4 + D1**4*Pk1*Pk2*f**4*k2*mu**3*mu2**5/k1 + D1**4*Pk1*Pk2*f**3*mu**4*mu2**2*(8*ct**2*k1**2*k2 + 7*ct*k1*(k1**2 + k2**2) + 3*k2*(7*b1*k3**2 + 2*k1**2))/(7*k2*k3**2) + D1**4*Pk1*Pk2*f**3*mu**2*mu2**4*(8*ct**2*k1*k2**2 + 7*ct*k2*(k1**2 + k2**2) + 3*k1*(7*b1*k3**2 + 2*k2**2))/(7*k1*k3**2) + 2*D1**4*Pk1*Pk2*f**3*mu**3*mu2**3*(7*b1*k2**2*k3**2 + 8*ct**2*k1**2*k2**2 + 7*ct*k1*k2*(k1**2 + k2**2) + k1**2*(7*b1*k3**2 + 6*k2**2))/(7*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*mu**2*mu2**2*(28*b1**2*k1*k2*k3**2 + b1*(4*ct**2*k1*k2*(2*k1**2 + 2*k2**2 + k3**2) + 7*ct*(k1**2 + k2**2)*(k1**2 + k2**2 + k3**2) + 2*k1*k2*(3*k1**2 + 3*k2**2 + 5*k3**2)) + 7*k1*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)))/(7*k1*k2*k3**2)
    perm13 = D1**4*Pk1*Pk3*b1**2*(b1*(4*ct**2*k1*k2**2 + ct*k1**2*k2 - 7*ct*k2*k3**2 - 3*k1**3 + 3*k1*k3**2) + 7*k1*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k1*k3**2) + D1**4*Pk1*Pk3*b1*f**3*k2*mu**5*mu2*(k1**3 - k1*k3**2)/k3**4 - D1**4*Pk1*Pk3*b1*f**3*k2**5*mu*mu2**5/(k1*k3**4) + D1**4*Pk1*Pk3*b1*f**2*k2**2*mu2**4*(9*ct*k1**2*k2 - 7*ct*k2*k3**2 + k1**3 + k1*(7*b1*k2**2 + 8*ct**2*k2**2 - k3**2))/(7*k1*k3**4) + D1**4*Pk1*Pk3*b1*f**2*k2*mu*mu2**3*(-14*b1*k2**2*k3**2 + 18*ct*k1**3*k2 - 14*ct*k1*k2*k3**2 + 2*k1**4 + k1**2*(21*b1*k2**2 + 16*ct**2*k2**2 - 2*k3**2))/(7*k1*k3**4) + D1**4*Pk1*Pk3*b1*f*k2*mu*mu2*(7*b1**2*k3**2*(k1**2 - k3**2) + 2*b1*k1*(4*ct**2*k1*k2**2 + ct*k1**2*k2 - 7*ct*k2*k3**2 - 3*k1**3 + 3*k1*k3**2) + 14*k1**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k1*k3**4) - D1**4*Pk1*Pk3*b1*f*mu**2*(k1**2 + k3**2)*(b1*(-4*ct**2*k1*k2**2 - ct*k1**2*k2 + 7*ct*k2*k3**2 + 3*k1**3 - 3*k1*k3**2) - 7*k1*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k1*k3**4) + D1**4*Pk1*Pk3*b1*f*mu2**2*(7*b1**2*k1*k2**2*k3**2 + b1*(ct*k1**2*k2*(k2**2 + 9*k3**2) - 7*ct*k2*k3**2*(k2**2 + k3**2) + k1**3*(-3*k2**2 + k3**2) + k1*(4*ct**2*(k2**4 + 2*k2**2*k3**2) + 3*k2**2*k3**2 - k3**4)) + 7*k1*k2**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k1*k3**4) - D1**4*Pk1*Pk3*f**4*k1**2*k2**2*mu**6*mu2**2/k3**4 - 3*D1**4*Pk1*Pk3*f**4*k1*k2**3*mu**5*mu2**3/k3**4 - 3*D1**4*Pk1*Pk3*f**4*k2**4*mu**4*mu2**4/k3**4 - D1**4*Pk1*Pk3*f**4*k2**5*mu**3*mu2**5/(k1*k3**4) + D1**4*Pk1*Pk3*f**3*mu**4*mu2**2*(-21*b1*k2**2*k3**2 + 9*ct*k1**3*k2 - 7*ct*k1*k2*k3**2 + k1**4 + k1**2*(14*b1*k2**2 + 8*ct**2*k2**2 - k3**2))/(7*k3**4) + D1**4*Pk1*Pk3*f**3*k2**2*mu**2*mu2**4*(9*ct*k1**2*k2 - 7*ct*k2*k3**2 + k1**3 - k1*(14*b1*k2**2 - 8*ct**2*k2**2 + k3**2))/(7*k1*k3**4) + 2*D1**4*Pk1*Pk3*f**3*k2*mu**3*mu2**3*(-7*b1*k2**2*k3**2 + 9*ct*k1**3*k2 - 7*ct*k1*k2*k3**2 + k1**4 + k1**2*(8*ct**2*k2**2 - k3**2))/(7*k1*k3**4) + D1**4*Pk1*Pk3*f**2*k1*mu**4*(b1*(4*ct**2*k1*k2**2 + ct*k1**2*k2 - 7*ct*k2*k3**2 - 3*k1**3 + 3*k1*k3**2) + 7*k1*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k3**4) + D1**4*Pk1*Pk3*f**2*k2*mu**3*mu2*(7*b1**2*(k1**4 - k3**4) + 2*b1*k1*(4*ct**2*k1*k2**2 + ct*k1**2*k2 - 7*ct*k2*k3**2 - 3*k1**3 + 3*k1*k3**2) + 14*k1**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k1*k3**4) + D1**4*Pk1*Pk3*f**2*mu**2*mu2**2*(7*b1**2*k1*k2**2*(3*k1**2 - 2*k3**2) + b1*(9*ct*k1**4*k2 + ct*k1**2*k2*(k2**2 + 2*k3**2) - 7*ct*k2*k3**2*(k2**2 + k3**2) + k1**5 + k1**3*k2**2*(8*ct**2 - 3) + k1*(4*ct**2*(k2**4 + 2*k2**2*k3**2) + 3*k2**2*k3**2 - k3**4)) + 7*k1*k2**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))/(7*k1*k3**4)
    perm23 = D1**4*Pk2*Pk3*b1**2*(b1*(4*ct**2*k1**2*k2 + ct*k1*(k2**2 - 7*k3**2) - 3*k2**3 + 3*k2*k3**2) + 7*k2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2))/(7*k2*k3**2) - D1**4*Pk2*Pk3*b1*f**3*k1**5*mu**5*mu2/(k2*k3**4) + D1**4*Pk2*Pk3*b1*f**3*k1*mu*mu2**5*(k2**3 - k2*k3**2)/k3**4 + D1**4*Pk2*Pk3*b1*f**2*k1**2*mu**4*(7*b1*k1**2*k2 + 8*ct**2*k1**2*k2 + ct*k1*(9*k2**2 - 7*k3**2) + k2**3 - k2*k3**2)/(7*k2*k3**4) + D1**4*Pk2*Pk3*b1*f**2*k1*mu**3*mu2*(7*b1*k1**2*(3*k2**2 - 2*k3**2) + 2*k2*(8*ct**2*k1**2*k2 + ct*k1*(9*k2**2 - 7*k3**2) + k2**3 - k2*k3**2))/(7*k2*k3**4) + D1**4*Pk2*Pk3*b1*f*k1*mu*mu2*(7*b1**2*k3**2*(k2**2 - k3**2) + 2*b1*k2*(4*ct**2*k1**2*k2 + ct*k1*(k2**2 - 7*k3**2) - 3*k2**3 + 3*k2*k3**2) + 14*k2**2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2))/(7*k2*k3**4) + D1**4*Pk2*Pk3*b1*f*mu**2*(7*b1**2*k1**2*k2*k3**2 + b1*(4*ct**2*k1**2*k2*(k1**2 + 2*k3**2) + ct*k1*(k1**2*(k2**2 - 7*k3**2) + 9*k2**2*k3**2 - 7*k3**4) + (3*k1**2 - k3**2)*(-k2**3 + k2*k3**2)) + 7*k1**2*k2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2))/(7*k2*k3**4) + D1**4*Pk2*Pk3*b1*f*mu2**2*(k2**2 + k3**2)*(b1*(4*ct**2*k1**2*k2 + ct*k1*(k2**2 - 7*k3**2) - 3*k2**3 + 3*k2*k3**2) + 7*k2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2))/(7*k2*k3**4) - D1**4*Pk2*Pk3*f**4*k1**5*mu**5*mu2**3/(k2*k3**4) - 3*D1**4*Pk2*Pk3*f**4*k1**4*mu**4*mu2**4/k3**4 - 3*D1**4*Pk2*Pk3*f**4*k1**3*k2*mu**3*mu2**5/k3**4 - D1**4*Pk2*Pk3*f**4*k1**2*k2**2*mu**2*mu2**6/k3**4 + D1**4*Pk2*Pk3*f**3*k1**2*mu**4*mu2**2*(-14*b1*k1**2*k2 + 8*ct**2*k1**2*k2 + ct*k1*(9*k2**2 - 7*k3**2) + k2**3 - k2*k3**2)/(7*k2*k3**4) + 2*D1**4*Pk2*Pk3*f**3*k1*mu**3*mu2**3*(-7*b1*k1**2*k3**2 + 8*ct**2*k1**2*k2**2 + ct*k1*k2*(9*k2**2 - 7*k3**2) + k2**4 - k2**2*k3**2)/(7*k2*k3**4) + D1**4*Pk2*Pk3*f**3*mu**2*mu2**4*(7*b1*k1**2*(2*k2**2 - 3*k3**2) + k2*(8*ct**2*k1**2*k2 + ct*k1*(9*k2**2 - 7*k3**2) + k2**3 - k2*k3**2))/(7*k3**4) + D1**4*Pk2*Pk3*f**2*k1*mu*mu2**3*(7*b1**2*(k2**4 - k3**4) + 2*b1*k2*(4*ct**2*k1**2*k2 + ct*k1*(k2**2 - 7*k3**2) - 3*k2**3 + 3*k2*k3**2) + 14*k2**2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2))/(7*k2*k3**4) + D1**4*Pk2*Pk3*f**2*k2*mu2**4*(b1*(4*ct**2*k1**2*k2 + ct*k1*(k2**2 - 7*k3**2) - 3*k2**3 + 3*k2*k3**2) + 7*k2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2))/(7*k3**4) + D1**4*Pk2*Pk3*f**2*mu**2*mu2**2*(7*b1**2*k1**2*k2*(3*k2**2 - 2*k3**2) + b1*(4*ct**2*k1**2*k2*(k1**2 + 2*k2**2 + 2*k3**2) + ct*k1*(k1**2*(k2**2 - 7*k3**2) + 9*k2**4 + 2*k2**2*k3**2 - 7*k3**4) + k2*(k2**2 - k3**2)*(-3*k1**2 + k2**2 + k3**2)) + 7*k1**2*k2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)))/(7*k2*k3**4)
    
    return (perm12+perm13+perm23)
    
    