import numpy as np

class Loc:
    def l0(cosmo_functions,k1,k2,k3=None,theta=None,zz=0,r=0,s=0,fNL=1):
        
        #get generic cosmology parameters
        k1,k2,k3,theta,Pk1,Pk2,Pk3,Pkd1,Pkd2,Pkd3,Pkdd1,Pkdd2,Pkdd3,d,K,C,f,D1,b1,b2,g2 = cosmo_functions.get_params(k1,k2,k3,theta,zz)
        
        b01,b11,Mk1,Mk2,Mk3 = cosmo_functions.get_PNGparams(zz,k1,k2,k3, shape='Loc')

        st = np.sin(theta)
        ct = np.cos(theta)
        
        tmp_expr = 2*np.sqrt(np.pi)*D1**4*Pk2*Pk3*fNL*(210*Mk1*b1**3*k2*k3**4 + 35*b1**2*k3**2*(-3*b01*(K*k2*(Mk2 + Mk3)*(k2**2 - k3**2) + Mk2*k2*k3**2 + Mk3*k2**3 + ct**2*k1**2*k2*(K - 1)*(Mk2 + Mk3) + ct*k1*k2**2*(2*K*Mk3 + Mk2*(2*K - 1)) + ct*k1*k3**2*(2*Mk2 + Mk3)) + 3*b11*k2*k3**2*(Mk2 + Mk3) + f*(2*Mk1*k2*(ct**2*(k2**2 + k3**2) + k2**2*st**2 + k3**2*(st**2 + 1)) + ct*k1*(-b01*k3**2*(2*Mk2 + Mk3) + k2**2*(4*Mk1 + b01*(Mk2 + 2*Mk3))) + k1**2*k2*(2*Mk1 + b01*(Mk2 + 2*Mk3)))) + 7*b1*(-5*b01*f*(ct**4*k1**2*k2*(K - 1)*(Mk2*k3**2 + Mk3*k2**2) + 2*ct**3*k1*(K*k2**2*(Mk2*k3**2 + Mk3*(k1**2 + k2**2)) + Mk2*k3**4 - Mk3*k1**2*k2**2 + Mk3*k2**2*k3**2) + ct**2*k2*(2*C*k1**2*k3**2*(Mk2 + Mk3) + Mk3*k2**4*(K + 1) + k2**2*(Mk3*k1**2*(K*(st**2 + 4) - st**2) + k3**2*(K*Mk2 - K*Mk3 + Mk2 + Mk3)) - (K - 1)*(-Mk2*k1**2*k3**2*st**2 + Mk2*k3**4 - Mk3*k1**4)) + ct*k1*(2*Mk3*k2**4*(K*st**2 + K + 1) + k1**2*(2*K*Mk3*k2**2 + k3**2*(Mk2 + Mk3)) + k2**2*k3**2*(Mk2*(4*C + 2*K*st**2 - 1) + Mk3*(4*C - 2*K + 2*st**2 - 3)) + k3**4*(2*Mk2*st**2 + Mk2 + Mk3)) + k2*(Mk3*k2**4*st**2*(K + 1) + k1**2*(Mk3*k2**2*(K + 1) + k3**2*(-K*Mk3 + Mk2)) + k2**2*k3**2*(Mk2*(2*C + st**2*(K + 1) - 1) + Mk3*(2*C - st**2*(K - 1) - 1)) + k3**4*(-2*C*Mk3 + Mk2*(-2*C - K*st**2 + st**2 + 1) + Mk3))) + 15*b01*k2*k3**2*(Mk2 + Mk3)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) + 5*b11*f*k2*k3**2*(Mk2 + Mk3)*(2*ct*k1*k2 + k1**2 + (ct**2 + st**2)*(k2**2 + k3**2)) + 2*f**2*(Mk1*k2*k3**2*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) + 3*Mk3*b01*k1**4*k2 - 3*b01*ct*k1**3*(-3*Mk3*k2**2 + k3**2*(Mk2 + Mk3)) + 3*ct*k1*(2*Mk1*k2**2*k3**2*(ct**2 + st**2 + 1) - Mk2*b01*k3**4*(ct**2 + st**2) + Mk3*b01*k2**4*(ct**2 + st**2)) + k1**2*(3*Mk3*b01*k2**3*(3*ct**2 + st**2) + k2*k3**2*(Mk1*(3*ct**2 + st**2 + 3) - b01*(Mk2 + Mk3)*(3*ct**2 + st**2))))) + f*(3*b01*ct**5*f*k1*k2**2*(-Mk2*k3**2*(5*f + 7) + Mk3*k2**2*(5*f - 7)) + ct**4*k2*(70*b01*g2*k1**2*(Mk2*k3**2 + Mk3*k2**2) + 15*f**2*(-3*Mk2*b01*k1**2*k3**2 + 2*k2**2*(Mk1*k3**2 + Mk3*b01*k1**2)) - 21*f*(b01*(2*C*k1**2 + k2**2)*(Mk2*k3**2 + Mk3*k2**2) - b11*k2**2*k3**2*(Mk2 + Mk3))) + ct**3*k1*(140*b01*g2*k2**2*(Mk2*k3**2 + Mk3*(k1**2 + k2**2)) + 30*f**2*(-Mk2*b01*k1**2*k3**2 + Mk3*b01*k2**4*st**2 + k2**2*k3**2*(2*Mk1 - Mk2*b01*st**2)) - 21*f*(b01*k1**2*(Mk2*k3**2 + Mk3*k2**2*(4*C - 3)) + b01*(Mk2*k3**2 + Mk3*k2**2)*(k2**2*(4*C + 2*st**2 - 1) + k3**2) - 2*b11*k2**2*k3**2*(Mk2 + Mk3))) + ct**2*k2*(35*b01*(b2*k3**2*(Mk2*k3**2 + Mk3*k2**2) + 2*g2*(Mk2*k1**2*k3**2*st**2 - Mk2*k3**4 + Mk3*k1**4 + Mk3*k2**4 + k2**2*(Mk3*k1**2*(st**2 + 4) + k3**2*(Mk2 - Mk3)))) - 6*f**2*(-6*Mk1*k2**2*k3**2*st**2 + 5*Mk3*b01*k1**4 + k1**2*(-6*Mk3*b01*k2**2*st**2 + k3**2*(-5*Mk1 + 9*Mk2*b01*st**2))) - 7*f*(b01*(6*Mk3*k1**4*(C - 1) + k1**2*(Mk3*k2**2*(2*C*(st**2 + 12) + 4*st**2 - 15) + k3**2*(Mk2*(2*st**2*(C + 2) + 3) + 6*Mk3)) + 3*(Mk2*k3**2 + Mk3*k2**2)*(k2**2*(2*C + 2*st**2 - 1) + k3**2*(1 - 2*C))) - 3*b11*k3**2*(Mk2 + Mk3)*(k1**2 + 2*k2**2*st**2))) - ct*k1*(b01*(3*f**2*(6*Mk2*k1**2*k3**2*st**2 + 5*Mk3*k1**4 + 5*k2**2*st**4*(Mk2*k3**2 - Mk3*k2**2)) + 7*f*(Mk2*k3**4*st**2 + Mk3*k2**4*(4*C*(st**2 + 3) + 3*st**4 + 3*st**2 - 6) + k1**2*(Mk3*k2**2*(12*C + st**2 - 9) + k3**2*(Mk2*st**2 + 3*Mk3)) + k2**2*k3**2*(Mk2*st**2*(4*C + 3*st**2 + 3) + Mk3*(-12*C + st**2 + 6))) - 70*k2**2*(Mk3*b2*k3**2 + 2*g2*(Mk3*k1**2 + Mk3*k2**2*(st**2 + 1) + k3**2*(Mk2*st**2 - Mk3)))) - 6*f*k2**2*k3**2*st**2*(6*Mk1*f + 7*b11*(Mk2 + Mk3))) + k2*(-b01*(3*f**2*k1**2*st**2*(2*Mk3*k1**2 + st**2*(3*Mk2*k3**2 - 2*Mk3*k2**2)) + 7*f*(k1**2*(Mk3*k2**2*(6*C + st**2 - 3) + k3**2*(Mk2*st**2 + Mk3*(3 - 6*C))) + st**2*(Mk2*k3**2 + Mk3*k2**2)*(k2**2*(2*C + 3*st**2 - 1) + k3**2*(1 - 2*C))) - 35*(Mk3*k1**2 + st**2*(Mk2*k3**2 + Mk3*k2**2))*(b2*k3**2 + 2*g2*(k2**2 - k3**2))) + f*k3**2*st**2*(6*Mk1*f*(k1**2 + k2**2*st**2) + 7*b11*(Mk2 + Mk3)*(k1**2 + 3*k2**2*st**2)))))/(105*Mk2*Mk3*k2*k3**4) + 2*np.sqrt(np.pi)*D1**4*Pk1*Pk3*fNL*(b01*(35*b1**2*k3**2*(-3*K*k1*(Mk1 + Mk3)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2) + ct**2*k1*k2**2*(Mk1*(f + 3) + Mk3*(2*f + 3)) + ct*k2*(k1**2*(Mk1*(f + 3) + 2*Mk3*f) - k3**2*(2*Mk1 + Mk3)*(f + 3)) + k1*(-3*Mk1*k3**2 - 3*Mk3*k1**2 + f*k2**2*st**2*(Mk1 + 2*Mk3))) + 7*b1*(2*f**2*k2*(3*Mk3*ct**4*k1*k2**3 - 3*ct**3*k2**2*(-3*Mk3*k1**2 + k3**2*(Mk1 + Mk3)) + 3*ct**2*k1*k2*(Mk3*(3*k1**2 + 2*k2**2*st**2) - k3**2*(Mk1 + Mk3)) - 3*ct*(Mk1*k3**4 - Mk3*k1**2*(k1**2 + 3*k2**2*st**2) + k2**2*k3**2*st**2*(Mk1 + Mk3)) + k1*k2*st**2*(3*Mk3*(k1**2 + k2**2*st**2) - k3**2*(Mk1 + Mk3))) - 5*f*(2*Mk3*ct*k1**4*k2*(2*K + 1) + Mk3*k1**5*(K + 1) + ct*k1**2*k2*(2*Mk3*k2**2*(K*st**2 + ct**2*(2*K - 1)) + k3**2*(Mk1*(4*C*st**2 + 2*K + ct**2*(4*C - 3) - 3*st**2 + 2) + Mk3*(4*C*st**2 - 2*K + ct**2*(4*C - 3) - 3*st**2 + 2))) + ct*k2*k3**2*(ct**2*(Mk1 + Mk3)*(k2**2 + k3**2) + k2**2*st**2*(Mk1 + Mk3) + k3**2*(Mk1*(st**2 + 2) + Mk3*st**2)) + k1**3*(Mk3*k2**2*(6*K*ct**2 + st**2*(K + 1)) + k3**2*(Mk1*(2*C*st**2 + K + ct**2*(2*C - 1) - st**2 + 1) + Mk3*(2*C*st**2 - K + ct**2*(2*C - 1) - st**2 + 1))) + k1*(ct**4*k2**2*(Mk3*k2**2*(K - 1) + 2*k3**2*(C - 1)*(Mk1 + Mk3)) + ct**2*(Mk3*k2**4*st**2*(K - 1) + k2**2*k3**2*(Mk1*(K + 2*st**2*(C - 1) + 2) - Mk3*(K - 2*st**2*(C - 1) - 2)) - k3**4*(2*C - 1)*(Mk1 + Mk3)) + k2**2*k3**2*st**2*(-K*Mk3 + Mk1) + k3**4*(Mk1*(-2*C*st**2 - K + st**2 + 1) + Mk3*st**2*(1 - 2*C)))) + 15*k1*k3**2*(Mk1 + Mk3)*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2))) + f*(-3*f**2*k2*(5*Mk3*ct**5*k2**4 + 10*Mk3*ct**4*k1*k2**3 + 10*ct**3*(Mk1*k2**2*k3**2 + Mk3*k2**4*st**2) + ct**2*k1*k2*(15*Mk1*k3**2 + 2*Mk3*(-5*k1**2 + 6*k2**2*st**2)) + ct*(5*Mk1*k1**2*k3**2 + 6*Mk1*k2**2*k3**2*st**2 - 5*Mk3*k1**4 + 5*Mk3*k2**4*st**4) + k1*k2*st**2*(3*Mk1*k3**2 - 2*Mk3*k1**2 + 2*Mk3*k2**2*st**2)) - 7*f*(Mk3*ct*k1**4*k2*(3*ct**2*(8*C - 5) + st**2*(16*C - 9) + 9) + Mk3*k1**5*(ct**2*(6*C - 3) + st**2*(2*C - 1) + 3) + ct*k1**2*k2*(Mk3*k2**2*(3*ct**4*(8*C - 7) + ct**2*(6*st**2*(6*C - 5) + 3) + 3*st**4*(4*C - 3) + st**2) + k3**2*(Mk1*(3*ct**2*(4*C - 3) + st**2*(4*C - 3) + 9) + Mk3*(ct**2*(9 - 12*C) + st**2*(7 - 12*C)))) + ct*k2*k3**2*(3*Mk3*ct**4*k2**2 + 3*ct**2*(Mk1*k3**2 + k2**2*(Mk1 + 2*Mk3*st**2)) + st**2*(Mk1*k3**2 + k2**2*(Mk1 + 3*Mk3*st**2))) + k1**3*(Mk3*k2**2*(9*ct**4*(4*C - 3) + ct**2*(st**2*(38*C - 26) + 9) + st**4*(6*C - 3) + st**2) + k3**2*(Mk1*(ct**2*(6*C - 3) + st**2*(2*C - 1) + 3) - Mk3*(2*C - 1)*(3*ct**2 + st**2))) + k1*(6*Mk3*ct**6*k2**4*(C - 1) + 3*ct**4*(4*Mk3*k2**4*st**2*(C - 1) + k2**2*k3**2*(2*Mk1*(C - 1) + Mk3*(3 - 2*C))) + ct**2*(3*Mk1*k3**4*(1 - 2*C) + 6*Mk3*k2**4*st**4*(C - 1) + k2**2*k3**2*(Mk1*(2*st**2*(C - 1) + 9) - 12*Mk3*st**2*(C - 1))) + k3**2*st**2*(Mk1*k3**2*(1 - 2*C) + k2**2*(Mk1 + 3*Mk3*st**2*(1 - 2*C))))) + 35*k1*(Mk1*k3**2 + Mk3*(2*ct*k1*k2 + k1**2 + k2**2*(ct**2 + st**2)))*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))) + k1*k3**2*(210*Mk2*b1**3*k3**2 + 35*b1**2*(2*Mk2*f*(ct**2*(k2**2 + k3**2) + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2*st**2 + k3**2) + 3*b11*k3**2*(Mk1 + Mk3)) + 7*b1*f*(2*Mk2*f*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + 6*ct*k1*k2*(ct**2 + st**2 + 1) + k1**2*(3*ct**2 + st**2 + 3) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) + 5*b11*(Mk1 + Mk3)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2)) + f**2*(6*Mk2*f*(5*ct**4*k2**2 + 10*ct**3*k1*k2 + ct**2*(5*k1**2 + 6*k2**2*st**2) + 6*ct*k1*k2*st**2 + st**2*(k1**2 + k2**2*st**2)) + 7*b11*(Mk1 + Mk3)*(6*ct*k1*k2 + 3*k1**2 + k2**2*(3*ct**2 + st**2)))))/(105*Mk1*Mk3*k1*k3**4) + 2*np.sqrt(np.pi)*D1**4*Pk1*Pk2*fNL*(b01*(35*b1**2*k3**2*(ct**2*k1*k2*(Mk1*(-3*K + f + 3) + Mk2*(-3*K + 2*f + 3)) + ct*(f + 3)*(k1**2*(Mk1 + 2*Mk2) + k2**2*(2*Mk1 + Mk2)) + k1*k2*(Mk1*f*(st**2 + 2) + 3*Mk1*(K + 1) + Mk2*(3*K + 2*f*st**2 + f + 3))) + 7*b1*(ct**4*f*k1*k2*(Mk2*k3**2*(-5*K + 6*f + 5) - 10*k2**2*(C - 1)*(Mk1 + Mk2)) + ct**3*f*(k1**2*(2*Mk2*k3**2*(3*f + 5) - 5*k2**2*(4*C - 5)*(Mk1 + Mk2)) + k2**2*(Mk1 + Mk2)*(5*k2**2 + k3**2*(6*f + 5))) + ct**2*k1*k2*(12*f**2*k3**2*(Mk1 + Mk2*st**2 + Mk2) - 5*f*(2*k1**2*(C - 2)*(Mk1 + Mk2) + 2*k2**2*(Mk1 + Mk2)*(C*(st**2 - 1) - st**2 - 1) + k3**2*(Mk1*(K - 1) + Mk2*(K*(st**2 - 1) - st**2 - 1))) + 30*g2*k3**2*(Mk1 + Mk2)) + ct*f*(5*k1**4*(Mk1 + Mk2) + k1**2*(5*k2**2*(Mk1 + Mk2)*(4*C + st**2 + 1) + k3**2*(Mk1*(6*f + 5) + Mk2*(6*f*(st**2 + 1) + 10*st**2 + 5))) + 5*k2**4*st**2*(Mk1 + Mk2) + k2**2*k3**2*(6*Mk1*f*(st**2 + 1) + 5*Mk1*(st**2 + 2) + Mk2*st**2*(6*f + 5))) + k1*k2*(10*C*f*(Mk1 + Mk2)*(k1**2 + k2**2*st**2) + k3**2*(15*b2*(Mk1 + Mk2) + f**2*(4*Mk1*st**2 + 6*Mk1 + 6*Mk2*st**4 + 4*Mk2*st**2) + 5*f*(K + 1)*(Mk1 + Mk2*st**2) - 30*g2*(Mk1 + Mk2)))) + f*(-42*Mk2*ct**6*f*k1*k2**3*(C - 1) + 3*Mk2*ct**5*f*k2**2*(5*f*k3**2 - 7*k1**2*(4*C - 5) + 7*k2**2) + ct**4*k1*k2*(45*Mk2*f**2*k3**2 + 70*Mk2*g2*k3**2 - 42*f*(Mk2*k1**2*(C - 2) + k2**2*(Mk1*(C - 1) + Mk2*(2*C*st**2 - C - 2*st**2 - 1)))) + 3*ct**3*f*(7*Mk2*k1**4 + k1**2*(Mk2*k3**2*(10*f + 7) - 7*k2**2*(Mk1*(4*C - 5) + Mk2*(4*C*(st**2 - 1) - 6*st**2 - 1))) + 7*k2**4*(Mk1 + 2*Mk2*st**2) + k2**2*k3**2*(Mk1*(10*f + 7) + 10*Mk2*f*st**2)) + ct**2*k1*k2*(9*f**2*k3**2*(5*Mk1 + 6*Mk2*st**2) - 14*f*(k1**2*(C*Mk2*(st**2 - 3) + 3*Mk1*(C - 2) - 4*Mk2*st**2) + k2**2*(Mk1*(C*(st**2 - 3) - st**2 - 3) + 3*Mk2*st**2*(C*(st**2 - 2) - st**2 - 1))) + 35*k3**2*(Mk2*b2 + 2*g2*(Mk1 + Mk2*(st**2 - 1)))) + ct*f*(7*k1**4*(3*Mk1 + Mk2*st**2) + k1**2*(7*k2**2*(Mk1*(12*C + st**2 + 3) + Mk2*st**2*(12*C + 3*st**2 + 1)) + k3**2*(7*Mk2*st**2 + 3*f*(5*Mk1 + 6*Mk2*st**2))) + k2**2*st**2*(7*k2**2*(Mk1 + 3*Mk2*st**2) + k3**2*(18*Mk1*f + 7*Mk1 + 15*Mk2*f*st**2))) + k1*k2*(14*C*f*(k1**2*(3*Mk1 + Mk2*st**2) + k2**2*st**2*(Mk1 + 3*Mk2*st**2)) + k3**2*(Mk1 + Mk2*st**2)*(35*b2 + 9*f**2*st**2 - 70*g2)))) + k1*k2*(210*Mk3*b1**3*k3**2 + 35*b1**2*(2*Mk3*f*(ct**2*(k2**2 + k3**2) + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2*st**2 + k3**2) + 3*b11*k3**2*(Mk1 + Mk2)) + 7*b1*f*(2*Mk3*f*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + 6*ct*k1*k2*(ct**2 + st**2 + 1) + k1**2*(3*ct**2 + st**2 + 3) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) + 5*b11*k3**2*(Mk1 + Mk2)*(ct**2 + st**2 + 1)) + f**2*(6*Mk3*f*(5*ct**4*k2**2 + 10*ct**3*k1*k2 + ct**2*(5*k1**2 + 6*k2**2*st**2) + 6*ct*k1*k2*st**2 + st**2*(k1**2 + k2**2*st**2)) + 7*b11*k3**2*(Mk1 + Mk2)*(3*ct**2 + st**2))))/(105*Mk1*Mk2*k1*k2*k3**2)
        
        return tmp_expr
    

class Eq:
    def l0(cosmo_functions,k1,k2,k3=None,theta=None,zz=0,r=0,s=0,fNL=1):
        
        #get generic cosmology parameters
        k1,k2,k3,theta,Pk1,Pk2,Pk3,Pkd1,Pkd2,Pkd3,Pkdd1,Pkdd2,Pkdd3,d,K,C,f,D1,b1,b2,g2 = cosmo_functions.get_params(k1,k2,k3,theta,zz)
        
        
        b01,b11,Mk1,Mk2,Mk3 = cosmo_functions.get_PNGparams(zz,k1,k2,k3, shape='Eq')

        st = np.sin(theta)
        ct = np.cos(theta)
        
        tmp_expr = -2*np.sqrt(np.pi)*D1**4*Pk2*Pk3*fNL*(630*Mk1*b1**3*k2*k3**4 + 35*b1**2*k3**2*(3*b01*(ct**2*k1**2*k2*(K - 1)*(Mk2*k3**2 + Mk3*k2**2) + ct*k1*(2*K*Mk3*k2**4 + 2*Mk2*k3**4 + k2**2*k3**2*(2*K*Mk2 - Mk2 + Mk3)) + k2*(K*(k2**2 - k3**2)*(Mk2*k3**2 + Mk3*k2**2) + Mk2*k3**4 + Mk3*k2**4)) - 3*b11*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2) + f*(6*Mk1*k2*(ct**2*(k2**2 + k3**2) + k2**2*st**2 + k3**2*(st**2 + 1)) + ct*k1*(2*Mk2*b01*k3**4 - 2*Mk3*b01*k2**4 + k2**2*(12*Mk1 + b01*k3**2*(-Mk2 + Mk3))) - k1**2*k2*(-6*Mk1 + Mk2*b01*k3**2 + 2*Mk3*b01*k2**2))) - 7*b1*(-5*b01*f*(ct**4*k1**2*k2*(K - 1)*(Mk2*k3**4 + Mk3*k2**4) + 2*ct**3*k1*(K*(Mk2*k2**2*k3**4 + Mk3*k1**2*k2**4 + Mk3*k2**6) + Mk2*k3**6 - Mk3*k1**2*k2**4 + Mk3*k2**4*k3**2) + ct**2*k2*(2*C*k1**2*k3**2*(Mk2*k3**2 + Mk3*k2**2) - Mk2*k3**4*(K - 1)*(-k1**2*st**2 + k3**2) + Mk3*k2**6*(K + 1) + Mk3*k2**4*(K*k1**2*(st**2 + 4) - K*k3**2 - k1**2*st**2 + k3**2) + k2**2*(Mk2*k3**4*(K + 1) + Mk3*k1**4*(K - 1))) + ct*k1*(Mk2*k3**6*(2*st**2 + 1) + 2*Mk3*k2**6*(K*st**2 + K + 1) + Mk3*k2**4*k3**2*(4*C - 2*K + 2*st**2 - 3) + k1**2*(2*K*Mk3*k2**4 + Mk2*k3**4 + Mk3*k2**2*k3**2) + k2**2*k3**4*(Mk2*(4*C + 2*K*st**2 - 1) + Mk3)) + k2*(Mk2*k3**6*(-2*C - st**2*(K - 1) + 1) + Mk3*k2**6*st**2*(K + 1) + Mk3*k2**4*k3**2*(2*C - st**2*(K - 1) - 1) + k1**2*(-K*Mk3*k2**2*k3**2 + Mk2*k3**4 + Mk3*k2**4*(K + 1)) + k2**2*k3**4*(-2*C*Mk3 + Mk2*(2*C + st**2*(K + 1) - 1) + Mk3))) + 15*b01*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) + 5*b11*f*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2)*(2*ct*k1*k2 + k1**2 + (ct**2 + st**2)*(k2**2 + k3**2)) + 2*f**2*(-3*Mk1*k2*k3**2*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) + 3*Mk3*b01*k1**4*k2**3 - 3*b01*ct*k1**3*(Mk2*k3**4 - 3*Mk3*k2**4 + Mk3*k2**2*k3**2) + 3*ct*k1*(-6*Mk1*k2**2*k3**2*(ct**2 + st**2 + 1) - Mk2*b01*k3**6*(ct**2 + st**2) + Mk3*b01*k2**6*(ct**2 + st**2)) + k1**2*k2*(-Mk2*b01*k3**4*(3*ct**2 + st**2) + 3*Mk3*b01*k2**4*(3*ct**2 + st**2) - k3**2*(3*Mk1*(3*ct**2 + st**2 + 3) + Mk3*b01*k2**2*(3*ct**2 + st**2))))) + f*(-3*b01*ct**5*f*k1*k2**2*(-Mk2*k3**4*(5*f + 7) + Mk3*k2**4*(5*f - 7)) + ct**4*k2*(-70*b01*g2*k1**2*(Mk2*k3**4 + Mk3*k2**4) + f**2*(90*Mk1*k2**2*k3**2 + 45*Mk2*b01*k1**2*k3**4 - 30*Mk3*b01*k1**2*k2**4) + 21*f*(b01*(2*C*k1**2 + k2**2)*(Mk2*k3**4 + Mk3*k2**4) - b11*k2**2*k3**2*(Mk2*k3**2 + Mk3*k2**2))) + ct**3*k1*(-140*b01*g2*k2**2*(Mk2*k3**4 + Mk3*k2**2*(k1**2 + k2**2)) + 30*f**2*(Mk2*b01*k1**2*k3**4 - Mk3*b01*k2**6*st**2 + k2**2*(6*Mk1*k3**2 + Mk2*b01*k3**4*st**2)) + 21*f*(b01*k1**2*(Mk2*k3**4 + Mk3*k2**4*(4*C - 3)) + b01*(Mk2*k3**4 + Mk3*k2**4)*(k2**2*(4*C + 2*st**2 - 1) + k3**2) - 2*b11*k2**2*k3**2*(Mk2*k3**2 + Mk3*k2**2))) + ct**2*k2*(-35*b01*(b2*k3**2*(Mk2*k3**4 + Mk3*k2**4) + 2*g2*(Mk2*k1**2*k3**4*st**2 - Mk2*k3**6 + Mk3*k2**6 + Mk3*k2**4*(k1**2*(st**2 + 4) - k3**2) + k2**2*(Mk2*k3**4 + Mk3*k1**4))) + 6*f**2*(18*Mk1*k2**2*k3**2*st**2 + 5*Mk3*b01*k1**4*k2**2 + 3*k1**2*(5*Mk1*k3**2 + 3*Mk2*b01*k3**4*st**2 - 2*Mk3*b01*k2**4*st**2)) + 7*f*(b01*(6*Mk3*k1**4*k2**2*(C - 1) + k1**2*(Mk2*k3**4*(2*st**2*(C + 2) + 3) + Mk3*k2**4*(2*C*(st**2 + 12) + 4*st**2 - 15) + 6*Mk3*k2**2*k3**2) + 3*(Mk2*k3**4 + Mk3*k2**4)*(k2**2*(2*C + 2*st**2 - 1) + k3**2*(1 - 2*C))) - 3*b11*k3**2*(k1**2 + 2*k2**2*st**2)*(Mk2*k3**2 + Mk3*k2**2))) + ct*k1*(b01*(-70*Mk3*b2*k2**4*k3**2 + 3*f**2*(6*Mk2*k1**2*k3**4*st**2 + 5*Mk3*k1**4*k2**2 + 5*k2**2*st**4*(Mk2*k3**4 - Mk3*k2**4)) + 7*f*(Mk2*k2**2*k3**4*st**2*(4*C + 3*st**2 + 3) + Mk2*k3**6*st**2 + Mk3*k2**6*(4*C*(st**2 + 3) + 3*st**4 + 3*st**2 - 6) + Mk3*k2**4*k3**2*(-12*C + st**2 + 6) + k1**2*(Mk2*k3**4*st**2 + Mk3*k2**4*(12*C + st**2 - 9) + 3*Mk3*k2**2*k3**2)) - 140*g2*(Mk2*k2**2*k3**4*st**2 + Mk3*k1**2*k2**4 + Mk3*k2**6*(st**2 + 1) - Mk3*k2**4*k3**2)) + 6*f*k2**2*k3**2*st**2*(18*Mk1*f - 7*b11*(Mk2*k3**2 + Mk3*k2**2))) + k2*(b01*(3*f**2*k1**2*st**2*(2*Mk3*k1**2*k2**2 + st**2*(3*Mk2*k3**4 - 2*Mk3*k2**4)) + 7*f*(k1**2*(Mk2*k3**4*st**2 + Mk3*k2**4*(6*C + st**2 - 3) + 3*Mk3*k2**2*k3**2*(1 - 2*C)) + st**2*(Mk2*k3**4 + Mk3*k2**4)*(k2**2*(2*C + 3*st**2 - 1) + k3**2*(1 - 2*C))) - 35*(b2*k3**2 + 2*g2*(k2**2 - k3**2))*(Mk3*k1**2*k2**2 + st**2*(Mk2*k3**4 + Mk3*k2**4))) + f*k3**2*st**2*(18*Mk1*f*(k1**2 + k2**2*st**2) - 7*b11*(k1**2 + 3*k2**2*st**2)*(Mk2*k3**2 + Mk3*k2**2)))))/(105*Mk2*Mk3*k2*k3**4) + 2*np.sqrt(np.pi)*D1**4*Pk1*Pk2*fNL*(b01*(35*b1**2*k3**2*(Mk1*k1*k2**3*(3*K + f*(st**2 + 2) + 3) + Mk2*k1**3*k2*(3*K + 2*f*st**2 + f + 3) + ct**2*k1*k2*(Mk1*k2**2*(-3*K + f + 3) + Mk2*k1**2*(-3*K + 2*f + 3)) + ct*(f + 3)*(2*Mk1*k2**4 + 2*Mk2*k1**4 + k1**2*k2**2*(Mk1 + Mk2))) + 7*b1*(ct**4*f*k1*k2*(-10*Mk1*k2**4*(C - 1) - 10*Mk2*k1**2*k2**2*(C - 1) + Mk2*k1**2*k3**2*(-5*K + 6*f + 5)) + ct**3*f*(Mk1*k2**4*(5*k2**2 + k3**2*(6*f + 5)) + Mk2*k1**4*(-5*k2**2*(4*C - 5) + 2*k3**2*(3*f + 5)) + k1**2*(Mk2*k2**2*k3**2*(6*f + 5) + 5*k2**4*(-4*C*Mk1 + 5*Mk1 + Mk2))) + ct**2*k1*k2*(12*f**2*k3**2*(Mk1*k2**2 + Mk2*k1**2*(st**2 + 1)) - 5*f*(Mk1*k2**2*(2*k2**2*(C*(st**2 - 1) - st**2 - 1) + k3**2*(K - 1)) + 2*Mk2*k1**4*(C - 2) + k1**2*(Mk2*k3**2*(K*(st**2 - 1) - st**2 - 1) + 2*k2**2*(Mk1*(C - 2) + Mk2*(C*(st**2 - 1) - st**2 - 1)))) + 30*g2*k3**2*(Mk1*k2**2 + Mk2*k1**2)) + ct*f*(Mk1*k2**4*(5*k2**2*st**2 + k3**2*(6*f*(st**2 + 1) + 5*st**2 + 10)) + 5*Mk2*k1**6 + k1**4*(Mk2*k3**2*(6*f*(st**2 + 1) + 10*st**2 + 5) + 5*k2**2*(Mk1 + Mk2*(4*C + st**2 + 1))) + k1**2*(5*k2**4*(4*C*Mk1 + Mk1*st**2 + Mk1 + Mk2*st**2) + k2**2*k3**2*(Mk1 + Mk2*st**2)*(6*f + 5))) + k1*k2*(10*C*f*(k1**2 + k2**2*st**2)*(Mk1*k2**2 + Mk2*k1**2) + k3**2*(15*b2*(Mk1*k2**2 + Mk2*k1**2) + f**2*(2*Mk1*k2**2*(2*st**2 + 3) + 2*Mk2*k1**2*st**2*(3*st**2 + 2)) + 5*f*(K + 1)*(Mk1*k2**2 + Mk2*k1**2*st**2) - 30*g2*(Mk1*k2**2 + Mk2*k1**2)))) + f*(-42*Mk2*ct**6*f*k1**3*k2**3*(C - 1) + 3*Mk2*ct**5*f*k1**2*k2**2*(5*f*k3**2 - 7*k1**2*(4*C - 5) + 7*k2**2) + ct**4*k1*k2*(45*Mk2*f**2*k1**2*k3**2 + 70*Mk2*g2*k1**2*k3**2 - 42*f*(Mk1*k2**4*(C - 1) + Mk2*k1**4*(C - 2) + Mk2*k1**2*k2**2*(2*C*st**2 - C - 2*st**2 - 1))) + 3*ct**3*f*(Mk1*k2**4*(7*k2**2 + k3**2*(10*f + 7)) + 7*Mk2*k1**6 + Mk2*k1**4*(7*k2**2*(-4*C*st**2 + 4*C + 6*st**2 + 1) + k3**2*(10*f + 7)) + k1**2*(10*Mk2*f*k2**2*k3**2*st**2 - 7*k2**4*(4*C*Mk1 - 5*Mk1 - 2*Mk2*st**2))) + ct**2*k1*k2*(9*f**2*k3**2*(5*Mk1*k2**2 + 6*Mk2*k1**2*st**2) - 14*f*(Mk1*k2**4*(C*(st**2 - 3) - st**2 - 3) + Mk2*k1**4*(C*(st**2 - 3) - 4*st**2) + 3*k1**2*k2**2*(Mk1*(C - 2) + Mk2*st**2*(C*(st**2 - 2) - st**2 - 1))) + 35*k3**2*(Mk2*b2*k1**2 + 2*g2*(Mk1*k2**2 + Mk2*k1**2*(st**2 - 1)))) + ct*f*(Mk1*k2**4*st**2*(7*k2**2 + k3**2*(18*f + 7)) + 7*Mk2*k1**6*st**2 + k1**4*(Mk2*k3**2*st**2*(18*f + 7) + 7*k2**2*(3*Mk1 + Mk2*st**2*(12*C + 3*st**2 + 1))) + k1**2*k2**2*(15*f*k3**2*(Mk1 + Mk2*st**4) + 7*k2**2*(Mk1*(12*C + st**2 + 3) + 3*Mk2*st**4))) + k1*k2*(14*C*f*(Mk1*k2**4*st**2 + Mk2*k1**4*st**2 + 3*k1**2*k2**2*(Mk1 + Mk2*st**4)) + k3**2*(Mk1*k2**2 + Mk2*k1**2*st**2)*(35*b2 + 9*f**2*st**2 - 70*g2)))) + k1*k2*(-630*Mk3*b1**3*k3**2 + 105*b1**2*(-2*Mk3*f*(ct**2*(k2**2 + k3**2) + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2*st**2 + k3**2) + b11*k3**2*(Mk1*k2**2 + Mk2*k1**2)) - 7*b1*f*(6*Mk3*f*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + 6*ct*k1*k2*(ct**2 + st**2 + 1) + k1**2*(3*ct**2 + st**2 + 3) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) - 5*b11*k3**2*(Mk1*k2**2 + Mk2*k1**2)*(ct**2 + st**2 + 1)) + f**2*(-18*Mk3*f*(5*ct**4*k2**2 + 10*ct**3*k1*k2 + ct**2*(5*k1**2 + 6*k2**2*st**2) + 6*ct*k1*k2*st**2 + st**2*(k1**2 + k2**2*st**2)) + 7*b11*k3**2*(3*ct**2 + st**2)*(Mk1*k2**2 + Mk2*k1**2))))/(105*Mk1*Mk2*k1*k2*k3**2) + 2*np.sqrt(np.pi)*D1**4*Pk1*Pk3*fNL*(Mk2*b01*(35*b1**2*k3**2*(-3*K*k1*(Mk1*k3**2 + Mk3*k1**2)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2) + Mk1*f*k1*k2**2*k3**2*st**2 - 3*Mk1*k1*k3**4 + 2*Mk3*f*k1**3*k2**2*st**2 - 3*Mk3*k1**5 + ct**2*k1*k2**2*(Mk1*k3**2*(f + 3) + Mk3*k1**2*(2*f + 3)) + ct*k2*(-2*Mk1*k3**4*(f + 3) + 2*Mk3*f*k1**4 + k1**2*k3**2*(Mk1 - Mk3)*(f + 3))) + 7*b1*(2*f**2*k2*(3*Mk3*ct**4*k1**3*k2**3 - 3*ct**3*k2**2*(Mk1*k3**4 - 3*Mk3*k1**4 + Mk3*k1**2*k3**2) + 3*ct**2*k1*k2*(-Mk1*k3**4 + 3*Mk3*k1**4 + 2*Mk3*k1**2*k2**2*st**2 - Mk3*k1**2*k3**2) - 3*ct*(Mk1*k2**2*k3**4*st**2 + Mk1*k3**6 - Mk3*k1**4*(k1**2 + 3*k2**2*st**2) + Mk3*k1**2*k2**2*k3**2*st**2) + k1*k2*st**2*(-Mk1*k3**4 - Mk3*k1**2*k3**2 + 3*Mk3*k1**2*(k1**2 + k2**2*st**2))) - 5*f*(Mk1*ct*k2*k3**4*(ct**2*(k2**2 + k3**2) + k2**2*st**2 + k3**2*(st**2 + 2)) + Mk1*k1*k3**4*(2*ct**4*k2**2*(C - 1) + ct**2*(k2**2*(K + 2*st**2*(C - 1) + 2) + k3**2*(1 - 2*C)) + k2**2*st**2 + k3**2*(-K + st**2*(1 - 2*C) + 1)) + 2*Mk3*ct*k1**6*k2*(2*K + 1) + Mk3*ct*k1**4*k2*(2*K*k2**2*st**2 + ct**2*(k2**2*(4*K - 2) + k3**2*(4*C - 3)) + k3**2*(-2*K + st**2*(4*C - 3) + 2)) + Mk3*k1**7*(K + 1) + Mk3*k1**5*(ct**2*(6*K*k2**2 + k3**2*(2*C - 1)) + k2**2*st**2*(K + 1) - k3**2*(-2*C*st**2 + K + st**2 - 1)) + ct*k1**2*k2*k3**2*(Mk3*k2**2*(ct**2 + st**2) + k3**2*(Mk1*(4*C*st**2 + 2*K + ct**2*(4*C - 3) - 3*st**2 + 2) + Mk3*(ct**2 + st**2))) + k1**3*(Mk3*ct**2*k2**4*(K - 1)*(ct**2 + st**2) + Mk3*k2**2*k3**2*(-K*st**2 + 2*ct**4*(C - 1) - ct**2*(K - 2*st**2*(C - 1) - 2)) + k3**4*(Mk1*(2*C*st**2 + K + ct**2*(2*C - 1) - st**2 + 1) - Mk3*(2*C - 1)*(ct**2 + st**2)))) + 15*k1*k3**2*(Mk1*k3**2 + Mk3*k1**2)*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2))) + f*(-3*f**2*k2*(5*Mk3*ct**5*k1**2*k2**4 + 10*Mk3*ct**4*k1**3*k2**3 + 10*ct**3*(Mk1*k2**2*k3**4 + Mk3*k1**2*k2**4*st**2) + ct**2*(15*Mk1*k1*k2*k3**4 - 10*Mk3*k1**5*k2 + 12*Mk3*k1**3*k2**3*st**2) + ct*(6*Mk1*k2**2*k3**4*st**2 - 5*Mk3*k1**6 + 5*k1**2*(Mk1*k3**4 + Mk3*k2**4*st**4)) + k1*k2*st**2*(3*Mk1*k3**4 - 2*Mk3*k1**4 + 2*Mk3*k1**2*k2**2*st**2)) - 7*f*(Mk1*ct*k2*k3**4*(3*ct**2 + st**2)*(k2**2 + k3**2) + Mk1*k1*k3**4*(6*ct**4*k2**2*(C - 1) + ct**2*(k2**2*(2*st**2*(C - 1) + 9) + 3*k3**2*(1 - 2*C)) + st**2*(k2**2 + k3**2*(1 - 2*C))) + Mk3*ct*k1**6*k2*(3*ct**2*(8*C - 5) + st**2*(16*C - 9) + 9) + Mk3*ct*k1**4*k2*(3*ct**4*k2**2*(8*C - 7) + 3*ct**2*(k2**2*(2*st**2*(6*C - 5) + 1) + k3**2*(3 - 4*C)) + st**2*(k2**2*(3*st**2*(4*C - 3) + 1) + k3**2*(7 - 12*C))) + Mk3*k1**7*(ct**2*(6*C - 3) + st**2*(2*C - 1) + 3) + Mk3*k1**5*(9*ct**4*k2**2*(4*C - 3) + ct**2*(k2**2*(st**2*(38*C - 26) + 9) + 3*k3**2*(1 - 2*C)) + st**2*(k2**2*(st**2*(6*C - 3) + 1) + k3**2*(1 - 2*C))) + ct*k1**2*k2*k3**2*(Mk1*k3**2*(3*ct**2*(4*C - 3) + st**2*(4*C - 3) + 9) + 3*Mk3*k2**2*(ct**2 + st**2)**2) + k1**3*(Mk1*k3**4*(ct**2*(6*C - 3) + st**2*(2*C - 1) + 3) + 6*Mk3*ct**2*k2**4*(C - 1)*(ct**2 + st**2)**2 - 3*Mk3*k2**2*k3**2*(ct**2 + st**2)*(ct**2*(2*C - 3) + st**2*(2*C - 1)))) + 35*k1*(Mk1*k3**4 + Mk3*k1**2*(2*ct*k1*k2 + k1**2 + k2**2*(ct**2 + st**2)))*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))) + k1*k3**2*(-630*b1**3*k3**2*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))) + 105*b1**2*(Mk2*b11*k3**2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3**2 + Mk3*k1**2) - 2*f*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))*(ct**2*(k2**2 + k3**2) + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2*st**2 + k3**2)) - 7*b1*f*(-5*Mk2*b11*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3**2 + Mk3*k1**2)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2) + 6*f*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + 6*ct*k1*k2*(ct**2 + st**2 + 1) + k1**2*(3*ct**2 + st**2 + 3) + st**2*(3*k2**2*st**2 + k2**2 + k3**2))) - f**2*(-7*Mk2*b11*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(3*k1**2 + k2**2*st**2)*(Mk1*k3**2 + Mk3*k1**2) + 90*ct**4*f*k2**2*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))) + 180*ct**3*f*k1*k2*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))) - 3*ct**2*(7*Mk2*b11*k2**2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3**2 + Mk3*k1**2) - 6*f*(5*k1**2 + 6*k2**2*st**2)*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))) - 6*ct*k1*k2*(7*Mk2*b11*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3**2 + Mk3*k1**2) - 18*f*st**2*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))) + 18*f*st**2*(k1**2 + k2**2*st**2)*(-Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - (Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))))/((Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))/(105*Mk1*Mk2*Mk3*k1*k3**4)
        
        return tmp_expr
    

class Orth:
    def l0(cosmo_functions,k1,k2,k3=None,theta=None,zz=0,r=0,s=0,fNL=1):
        
        #get generic cosmology parameters
        k1,k2,k3,theta,Pk1,Pk2,Pk3,Pkd1,Pkd2,Pkd3,Pkdd1,Pkdd2,Pkdd3,d,K,C,f,D1,b1,b2,g2 = cosmo_functions.get_params(k1,k2,k3,theta,zz)
        
        b01,b11,Mk1,Mk2,Mk3 = cosmo_functions.get_PNGparams(zz,k1,k2,k3, shape='Orth')

        st = np.sin(theta)
        ct = np.cos(theta)
        
        tmp_expr = -2*np.sqrt(np.pi)*D1**4*Pk2*Pk3*fNL*(1890*Mk1*b1**3*k2*k3**4 + 35*b1**2*k3**2*(3*b01*(ct**2*k1**2*k2*(K - 1)*(Mk2*k3 + Mk3*k2) + ct*k1*(2*K*Mk3*k2**3 + Mk2*k2**2*k3*(2*K - 1) + 2*Mk2*k3**3 + Mk3*k2*k3**2) + k2*(K*(k2**2 - k3**2)*(Mk2*k3 + Mk3*k2) + Mk2*k3**3 + Mk3*k2**3)) - 3*b11*k2*k3**2*(Mk2*k3 + Mk3*k2) + f*(18*Mk1*k2*(ct**2*(k2**2 + k3**2) + k2**2*st**2 + k3**2*(st**2 + 1)) + ct*k1*(2*Mk2*b01*k3**3 - 2*Mk3*b01*k2**3 + Mk3*b01*k2*k3**2 + k2**2*(36*Mk1 - Mk2*b01*k3)) - k1**2*k2*(-18*Mk1 + Mk2*b01*k3 + 2*Mk3*b01*k2))) - 7*b1*(-5*b01*f*(ct**4*k1**2*k2*(K - 1)*(Mk2*k3**3 + Mk3*k2**3) + 2*ct**3*k1*(K*k2**2*(Mk2*k3**3 + Mk3*k2*(k1**2 + k2**2)) + Mk2*k3**5 - Mk3*k1**2*k2**3 + Mk3*k2**3*k3**2) + ct**2*k2*(2*C*k1**2*k3**2*(Mk2*k3 + Mk3*k2) + Mk2*k2**2*k3**3*(K + 1) - Mk2*k3**3*(K - 1)*(-k1**2*st**2 + k3**2) + Mk3*k1**4*k2*(K - 1) + Mk3*k2**5*(K + 1) + Mk3*k2**3*(K*k1**2*(st**2 + 4) - K*k3**2 - k1**2*st**2 + k3**2)) + ct*k1*(Mk2*k2**2*k3**3*(4*C + 2*K*st**2 - 1) + Mk2*k3**5*(2*st**2 + 1) + 2*Mk3*k2**5*(K*st**2 + K + 1) + Mk3*k2**3*k3**2*(4*C - 2*K + 2*st**2 - 3) + Mk3*k2*k3**4 + k1**2*(2*K*Mk3*k2**3 + Mk2*k3**3 + Mk3*k2*k3**2)) + k2*(Mk2*k2**2*k3**3*(2*C + st**2*(K + 1) - 1) + Mk2*k3**5*(-2*C - st**2*(K - 1) + 1) + Mk3*k2**5*st**2*(K + 1) + Mk3*k2**3*k3**2*(2*C - st**2*(K - 1) - 1) + Mk3*k2*k3**4*(1 - 2*C) + k1**2*(-K*Mk3*k2*k3**2 + Mk2*k3**3 + Mk3*k2**3*(K + 1)))) + 15*b01*k2*k3**2*(Mk2*k3 + Mk3*k2)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) + 5*b11*f*k2*k3**2*(Mk2*k3 + Mk3*k2)*(2*ct*k1*k2 + k1**2 + (ct**2 + st**2)*(k2**2 + k3**2)) + 2*f**2*(-9*Mk1*k2*k3**2*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) + 3*Mk3*b01*k1**4*k2**2 - 3*b01*ct*k1**3*(Mk2*k3**3 - 3*Mk3*k2**3 + Mk3*k2*k3**2) + 3*ct*k1*(-18*Mk1*k2**2*k3**2*(ct**2 + st**2 + 1) - Mk2*b01*k3**5*(ct**2 + st**2) + Mk3*b01*k2**5*(ct**2 + st**2)) + k1**2*k2*(-Mk2*b01*k3**3*(3*ct**2 + st**2) + 3*Mk3*b01*k2**3*(3*ct**2 + st**2) - k3**2*(9*Mk1*(3*ct**2 + st**2 + 3) + Mk3*b01*k2*(3*ct**2 + st**2))))) + f*(-3*b01*ct**5*f*k1*k2**2*(-Mk2*k3**3*(5*f + 7) + Mk3*k2**3*(5*f - 7)) + ct**4*k2*(-70*b01*g2*k1**2*(Mk2*k3**3 + Mk3*k2**3) + f**2*(270*Mk1*k2**2*k3**2 + 45*Mk2*b01*k1**2*k3**3 - 30*Mk3*b01*k1**2*k2**3) + 21*f*(b01*(2*C*k1**2 + k2**2)*(Mk2*k3**3 + Mk3*k2**3) - b11*k2**2*k3**2*(Mk2*k3 + Mk3*k2))) + ct**3*k1*(-140*b01*g2*k2**2*(Mk2*k3**3 + Mk3*k2*(k1**2 + k2**2)) + 30*f**2*(Mk2*b01*k1**2*k3**3 - Mk3*b01*k2**5*st**2 + k2**2*k3**2*(18*Mk1 + Mk2*b01*k3*st**2)) + 21*f*(b01*k1**2*(Mk2*k3**3 + Mk3*k2**3*(4*C - 3)) + b01*(Mk2*k3**3 + Mk3*k2**3)*(k2**2*(4*C + 2*st**2 - 1) + k3**2) - 2*b11*k2**2*k3**2*(Mk2*k3 + Mk3*k2))) + ct**2*k2*(-35*b01*(b2*k3**2*(Mk2*k3**3 + Mk3*k2**3) + 2*g2*(Mk2*k1**2*k3**3*st**2 + Mk2*k2**2*k3**3 - Mk2*k3**5 + Mk3*k1**4*k2 + Mk3*k2**5 + Mk3*k2**3*(k1**2*(st**2 + 4) - k3**2))) + 6*f**2*(54*Mk1*k2**2*k3**2*st**2 + 5*Mk3*b01*k1**4*k2 + k1**2*(45*Mk1*k3**2 + 9*Mk2*b01*k3**3*st**2 - 6*Mk3*b01*k2**3*st**2)) + 7*f*(b01*(6*Mk3*k1**4*k2*(C - 1) + k1**2*(Mk2*k3**3*(2*st**2*(C + 2) + 3) + Mk3*k2**3*(2*C*(st**2 + 12) + 4*st**2 - 15) + 6*Mk3*k2*k3**2) + 3*(Mk2*k3**3 + Mk3*k2**3)*(k2**2*(2*C + 2*st**2 - 1) + k3**2*(1 - 2*C))) - 3*b11*k3**2*(k1**2 + 2*k2**2*st**2)*(Mk2*k3 + Mk3*k2))) + ct*k1*(b01*(3*f**2*(6*Mk2*k1**2*k3**3*st**2 + 5*Mk3*k1**4*k2 + 5*k2**2*st**4*(Mk2*k3**3 - Mk3*k2**3)) + 7*f*(Mk2*k2**2*k3**3*st**2*(4*C + 3*st**2 + 3) + Mk2*k3**5*st**2 + Mk3*k2**5*(4*C*(st**2 + 3) + 3*st**4 + 3*st**2 - 6) + Mk3*k2**3*k3**2*(-12*C + st**2 + 6) + k1**2*(Mk2*k3**3*st**2 + Mk3*k2**3*(12*C + st**2 - 9) + 3*Mk3*k2*k3**2)) - 70*k2**2*(Mk3*b2*k2*k3**2 + 2*g2*(Mk2*k3**3*st**2 + Mk3*k1**2*k2 + Mk3*k2**3*(st**2 + 1) - Mk3*k2*k3**2))) + 6*f*k2**2*k3**2*st**2*(54*Mk1*f - 7*b11*(Mk2*k3 + Mk3*k2))) + k2*(b01*(3*f**2*k1**2*st**2*(2*Mk3*k1**2*k2 + st**2*(3*Mk2*k3**3 - 2*Mk3*k2**3)) + 7*f*(k1**2*(Mk2*k3**3*st**2 + Mk3*k2**3*(6*C + st**2 - 3) + 3*Mk3*k2*k3**2*(1 - 2*C)) + st**2*(Mk2*k3**3 + Mk3*k2**3)*(k2**2*(2*C + 3*st**2 - 1) + k3**2*(1 - 2*C))) - 35*(b2*k3**2 + 2*g2*(k2**2 - k3**2))*(Mk3*k1**2*k2 + st**2*(Mk2*k3**3 + Mk3*k2**3))) + f*k3**2*st**2*(54*Mk1*f*(k1**2 + k2**2*st**2) - 7*b11*(k1**2 + 3*k2**2*st**2)*(Mk2*k3 + Mk3*k2)))))/(105*Mk2*Mk3*k2*k3**4) + 2*np.sqrt(np.pi)*D1**4*Pk1*Pk2*fNL*(b01*(35*b1**2*k3**2*(ct**2*k1*k2*(Mk1*k2*(-3*K + f + 3) + Mk2*k1*(-3*K + 2*f + 3)) + ct*(f + 3)*(Mk1*k1**2*k2 + 2*Mk1*k2**3 + 2*Mk2*k1**3 + Mk2*k1*k2**2) + k1*k2*(Mk1*k2*(3*K + f*(st**2 + 2) + 3) + Mk2*k1*(3*K + 2*f*st**2 + f + 3))) + 7*b1*(ct**4*f*k1*k2*(-10*Mk1*k2**3*(C - 1) - 10*Mk2*k1*k2**2*(C - 1) + Mk2*k1*k3**2*(-5*K + 6*f + 5)) + ct**3*f*(-5*Mk1*k1**2*k2**3*(4*C - 5) + Mk1*k2**3*(5*k2**2 + k3**2*(6*f + 5)) + Mk2*k1**3*(-5*k2**2*(4*C - 5) + 2*k3**2*(3*f + 5)) + Mk2*k1*k2**2*(5*k2**2 + k3**2*(6*f + 5))) + ct**2*k1*k2*(12*f**2*k3**2*(Mk1*k2 + Mk2*k1*(st**2 + 1)) - 5*f*(2*Mk1*k1**2*k2*(C - 2) + 2*Mk1*k2**3*(C*(st**2 - 1) - st**2 - 1) + Mk1*k2*k3**2*(K - 1) + 2*Mk2*k1**3*(C - 2) + 2*Mk2*k1*k2**2*(C*(st**2 - 1) - st**2 - 1) + Mk2*k1*k3**2*(K*(st**2 - 1) - st**2 - 1)) + 30*g2*k3**2*(Mk1*k2 + Mk2*k1)) + ct*f*(5*Mk1*k1**4*k2 + Mk1*k1**2*k2*(5*k2**2*(4*C + st**2 + 1) + k3**2*(6*f + 5)) + Mk1*k2**3*(5*k2**2*st**2 + k3**2*(6*f*(st**2 + 1) + 5*st**2 + 10)) + 5*Mk2*k1**5 + Mk2*k1**3*(5*k2**2*(4*C + st**2 + 1) + k3**2*(6*f*(st**2 + 1) + 10*st**2 + 5)) + Mk2*k1*k2**2*st**2*(5*k2**2 + k3**2*(6*f + 5))) + k1*k2*(10*C*f*(k1**2 + k2**2*st**2)*(Mk1*k2 + Mk2*k1) + k3**2*(15*b2*(Mk1*k2 + Mk2*k1) + f**2*(4*Mk1*k2*st**2 + 6*Mk1*k2 + 6*Mk2*k1*st**4 + 4*Mk2*k1*st**2) + 5*f*(K + 1)*(Mk1*k2 + Mk2*k1*st**2) - 30*g2*(Mk1*k2 + Mk2*k1)))) + f*(-42*Mk2*ct**6*f*k1**2*k2**3*(C - 1) + 3*Mk2*ct**5*f*k1*k2**2*(5*f*k3**2 - 7*k1**2*(4*C - 5) + 7*k2**2) + ct**4*k1*k2*(45*Mk2*f**2*k1*k3**2 + 70*Mk2*g2*k1*k3**2 - 42*f*(Mk1*k2**3*(C - 1) + Mk2*k1**3*(C - 2) + Mk2*k1*k2**2*(2*C*st**2 - C - 2*st**2 - 1))) + 3*ct**3*f*(-7*Mk1*k1**2*k2**3*(4*C - 5) + Mk1*k2**3*(7*k2**2 + k3**2*(10*f + 7)) + 7*Mk2*k1**5 + Mk2*k1**3*(7*k2**2*(-4*C*st**2 + 4*C + 6*st**2 + 1) + k3**2*(10*f + 7)) + 2*Mk2*k1*k2**2*st**2*(5*f*k3**2 + 7*k2**2)) + ct**2*k1*k2*(9*f**2*k3**2*(5*Mk1*k2 + 6*Mk2*k1*st**2) - 14*f*(3*Mk1*k1**2*k2*(C - 2) + Mk1*k2**3*(C*(st**2 - 3) - st**2 - 3) + Mk2*k1**3*(C*(st**2 - 3) - 4*st**2) + 3*Mk2*k1*k2**2*st**2*(C*(st**2 - 2) - st**2 - 1)) + 35*k3**2*(Mk2*b2*k1 + 2*g2*(Mk1*k2 + Mk2*k1*(st**2 - 1)))) + ct*f*(21*Mk1*k1**4*k2 + Mk1*k1**2*k2*(15*f*k3**2 + 7*k2**2*(12*C + st**2 + 3)) + Mk1*k2**3*st**2*(7*k2**2 + k3**2*(18*f + 7)) + 7*Mk2*k1**5*st**2 + Mk2*k1**3*st**2*(7*k2**2*(12*C + 3*st**2 + 1) + k3**2*(18*f + 7)) + 3*Mk2*k1*k2**2*st**4*(5*f*k3**2 + 7*k2**2)) + k1*k2*(14*C*f*(3*Mk1*k1**2*k2 + Mk1*k2**3*st**2 + Mk2*k1**3*st**2 + 3*Mk2*k1*k2**2*st**4) + k3**2*(Mk1*k2 + Mk2*k1*st**2)*(35*b2 + 9*f**2*st**2 - 70*g2)))) - k1*k2*(1890*Mk3*b1**3*k3**2 - 105*b1**2*(-6*Mk3*f*(ct**2*(k2**2 + k3**2) + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2*st**2 + k3**2) + b11*k3**2*(Mk1*k2 + Mk2*k1)) + 7*b1*f*(18*Mk3*f*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + 6*ct*k1*k2*(ct**2 + st**2 + 1) + k1**2*(3*ct**2 + st**2 + 3) + st**2*(3*k2**2*st**2 + k2**2 + k3**2)) - 5*b11*k3**2*(Mk1*k2 + Mk2*k1)*(ct**2 + st**2 + 1)) + f**2*(54*Mk3*f*(5*ct**4*k2**2 + 10*ct**3*k1*k2 + ct**2*(5*k1**2 + 6*k2**2*st**2) + 6*ct*k1*k2*st**2 + st**2*(k1**2 + k2**2*st**2)) - 7*b11*k3**2*(3*ct**2 + st**2)*(Mk1*k2 + Mk2*k1))))/(105*Mk1*Mk2*k1*k2*k3**2) + 2*np.sqrt(np.pi)*D1**4*Pk1*Pk3*fNL*(Mk2*b01*(35*b1**2*k3**2*(-3*K*k1*(Mk1*k3 + Mk3*k1)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2) + ct**2*k1*k2**2*(Mk1*k3*(f + 3) + Mk3*k1*(2*f + 3)) + ct*k2*(Mk1*k1**2*k3*(f + 3) - 2*Mk1*k3**3*(f + 3) + 2*Mk3*f*k1**3 - Mk3*k1*k3**2*(f + 3)) + k1*(Mk1*f*k2**2*k3*st**2 - 3*Mk1*k3**3 + 2*Mk3*f*k1*k2**2*st**2 - 3*Mk3*k1**3)) + 7*b1*(2*f**2*k2*(3*Mk3*ct**4*k1**2*k2**3 - 3*ct**3*k2**2*(Mk1*k3**3 - 3*Mk3*k1**3 + Mk3*k1*k3**2) + 3*ct**2*k1*k2*(-Mk1*k3**3 + 3*Mk3*k1**3 + 2*Mk3*k1*k2**2*st**2 - Mk3*k1*k3**2) - 3*ct*(Mk1*k2**2*k3**3*st**2 + Mk1*k3**5 - Mk3*k1**3*(k1**2 + 3*k2**2*st**2) + Mk3*k1*k2**2*k3**2*st**2) + k1*k2*st**2*(-Mk1*k3**3 - Mk3*k1*k3**2 + 3*Mk3*k1*(k1**2 + k2**2*st**2))) - 5*f*(Mk1*ct*k2*k3**3*(ct**2*(k2**2 + k3**2) + k2**2*st**2 + k3**2*(st**2 + 2)) + 2*Mk3*ct*k1**5*k2*(2*K + 1) + Mk3*k1**6*(K + 1) + Mk3*k1**4*(ct**2*(6*K*k2**2 + k3**2*(2*C - 1)) + k2**2*st**2*(K + 1) - k3**2*(-2*C*st**2 + K + st**2 - 1)) + k1**3*(Mk1*k3**3*(2*C*st**2 + K + ct**2*(2*C - 1) - st**2 + 1) + 2*Mk3*ct*k2**3*(K*st**2 + ct**2*(2*K - 1)) + Mk3*ct*k2*k3**2*(4*C*st**2 - 2*K + ct**2*(4*C - 3) - 3*st**2 + 2)) + k1**2*(Mk1*ct**3*k2*k3**3*(4*C - 3) + Mk1*ct*k2*k3**3*(2*K + st**2*(4*C - 3) + 2) + Mk3*ct**4*k2**2*(k2**2*(K - 1) + 2*k3**2*(C - 1)) + Mk3*ct**2*(k2**4*st**2*(K - 1) - k2**2*k3**2*(K - 2*st**2*(C - 1) - 2) + k3**4*(1 - 2*C)) + Mk3*k3**2*st**2*(-K*k2**2 + k3**2*(1 - 2*C))) + k1*k3**2*(2*Mk1*ct**4*k2**2*k3*(C - 1) + Mk1*ct**2*k3*(k2**2*(K + 2*st**2*(C - 1) + 2) + k3**2*(1 - 2*C)) + Mk1*k3*(k2**2*st**2 + k3**2*(-2*C*st**2 - K + st**2 + 1)) + Mk3*ct**3*k2*(k2**2 + k3**2) + Mk3*ct*k2*st**2*(k2**2 + k3**2))) + 15*k1*k3**2*(Mk1*k3 + Mk3*k1)*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2))) + f*(-3*f**2*k2*(5*Mk3*ct**5*k1*k2**4 + 10*Mk3*ct**4*k1**2*k2**3 + 10*ct**3*(Mk1*k2**2*k3**3 + Mk3*k1*k2**4*st**2) + ct**2*k1*k2*(15*Mk1*k3**3 + 2*Mk3*k1*(-5*k1**2 + 6*k2**2*st**2)) + ct*(5*Mk1*k1**2*k3**3 + 6*Mk1*k2**2*k3**3*st**2 - 5*Mk3*k1**5 + 5*Mk3*k1*k2**4*st**4) + k1*k2*st**2*(3*Mk1*k3**3 - 2*Mk3*k1**3 + 2*Mk3*k1*k2**2*st**2)) - 7*f*(Mk1*ct*k2*k3**3*(3*ct**2 + st**2)*(k2**2 + k3**2) + Mk3*ct*k1**5*k2*(3*ct**2*(8*C - 5) + st**2*(16*C - 9) + 9) + Mk3*k1**6*(ct**2*(6*C - 3) + st**2*(2*C - 1) + 3) + Mk3*k1**4*(9*ct**4*k2**2*(4*C - 3) + ct**2*(k2**2*(st**2*(38*C - 26) + 9) + 3*k3**2*(1 - 2*C)) + st**2*(k2**2*(st**2*(6*C - 3) + 1) + k3**2*(1 - 2*C))) + k1**3*(Mk1*k3**3*(ct**2*(6*C - 3) + st**2*(2*C - 1) + 3) + Mk3*ct*k2**3*(3*ct**4*(8*C - 7) + ct**2*(6*st**2*(6*C - 5) + 3) + 3*st**4*(4*C - 3) + st**2) + Mk3*ct*k2*k3**2*(ct**2*(9 - 12*C) + st**2*(7 - 12*C))) + k1**2*k2*(3*Mk1*ct**3*k3**3*(4*C - 3) + Mk1*ct*k3**3*(st**2*(4*C - 3) + 9) + 6*Mk3*ct**6*k2**3*(C - 1) + 3*Mk3*ct**4*k2*(4*k2**2*st**2*(C - 1) + k3**2*(3 - 2*C)) + 6*Mk3*ct**2*k2*st**2*(C - 1)*(k2**2*st**2 - 2*k3**2) + 3*Mk3*k2*k3**2*st**4*(1 - 2*C)) + k1*k3**2*(6*Mk1*ct**4*k2**2*k3*(C - 1) + Mk1*ct**2*k3*(k2**2*(2*st**2*(C - 1) + 9) + 3*k3**2*(1 - 2*C)) + Mk1*k3*st**2*(k2**2 + k3**2*(1 - 2*C)) + 3*Mk3*ct**5*k2**3 + 6*Mk3*ct**3*k2**3*st**2 + 3*Mk3*ct*k2**3*st**4)) + 35*k1*(Mk1*k3**3 + Mk3*k1*(2*ct*k1*k2 + k1**2 + k2**2*(ct**2 + st**2)))*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)))) + k1*k3**2*(-630*b1**3*k3**2*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))) + 105*b1**2*(Mk2*b11*k3**2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3 + Mk3*k1) - 2*f*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))*(ct**2*(k2**2 + k3**2) + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2*st**2 + k3**2)) - 7*b1*f*(-5*Mk2*b11*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3 + Mk3*k1)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 + k2**2*st**2 + k3**2) + 6*f*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))*(3*ct**4*k2**2 + 3*ct**2*(2*k2**2*st**2 + k2**2 + k3**2) + 6*ct*k1*k2*(ct**2 + st**2 + 1) + k1**2*(3*ct**2 + st**2 + 3) + st**2*(3*k2**2*st**2 + k2**2 + k3**2))) - f**2*(-7*Mk2*b11*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(3*k1**2 + k2**2*st**2)*(Mk1*k3 + Mk3*k1) + 90*ct**4*f*k2**2*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))) + 180*ct**3*f*k1*k2*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))) - 3*ct**2*(7*Mk2*b11*k2**2*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3 + Mk3*k1) + 6*f*(5*k1**2 + 6*k2**2*st**2)*(3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(-8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) + 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))) - 6*ct*k1*k2*(7*Mk2*b11*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*(Mk1*k3 + Mk3*k1) - 18*f*st**2*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))) + 18*f*st**2*(k1**2 + k2**2*st**2)*(-3*Mk2**2*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)*((Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(2/3) + (Pk1/Mk1**2)**(2/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(1/3) - (Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) + (Pk1/Mk1**2)**(1/3)*(Pk2/Mk2**2)**(1/3)*(Pk3/Mk3**2)**(2/3) + (Pk2/Mk2**2)**(2/3)*(Pk3/Mk3**2)**(2/3)) + Pk2*(8*(Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3) - 3*(Pk1/Mk1**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(Pk3/Mk3**2)**(1/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))))/((Pk1/Mk1**2)**(2/3)*(Pk3/Mk3**2)**(2/3)*(Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)))/(105*Mk1*Mk2*Mk3*k1*k3**4)
        
        return tmp_expr