import numpy as np
       
def Loc_(mu,phi,cosmo_functions,k1,k2,k3=None,theta=None,zz=0,r=0,s=0,fNL=1):
    
    #get generic cosmology parameters
    k1,k2,k3,theta,Pk1,Pk2,Pk3,_,_,_,_,_,_,d,K,C,f,D1,b1,b2,g2 = cosmo_functions.get_params(k1,k2,k3,theta,zz)
    
    b01,b11,Mk1,Mk2,Mk3 = cosmo_functions.get_PNGparams(zz,k1,k2,k3, shape='Loc')
    
    mu2 = mu*np.cos(theta)+np.sqrt((1-mu**2)) *np.sin(theta)*np.cos(phi)
    st = np.sin(theta)
    ct= np.cos(theta)
    
    expr = D1**4*Pk1*Pk2*b01*f**3*fNL*k1*mu**5*mu2/(Mk2*k2) - D1**4*Pk2*Pk3*b01*f**3*fNL*k1**5*mu**5*mu2/(Mk2*k2*k3**4) + D1**4*Pk2*Pk3*b01*f**3*fNL*k1*mu*mu2**5*(-Mk2*k2*k3**2 + Mk3*k2**3)/(Mk2*Mk3*k3**4) + D1**4*Pk2*Pk3*b1*fNL*(2*Mk1*b1**2*k2*k3**2 - b01*b1*(K*k2*(Mk2 + Mk3)*(k2**2 - k3**2) + Mk2*k2*k3**2 + Mk3*k2**3 + ct**2*k1**2*k2*(K - 1)*(Mk2 + Mk3) + ct*k1*k2**2*(2*K*Mk3 + Mk2*(2*K - 1)) + ct*k1*k3**2*(2*Mk2 + Mk3)) + b01*k2*(Mk2 + Mk3)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) + b1*b11*k2*k3**2*(Mk2 + Mk3))/(Mk2*Mk3*k2*k3**2) + 2*D1**4*Pk2*Pk3*f**3*fNL*mu**4*mu2**2*(Mk1*k1**2*k3**2 - Mk3*b01*k1**4)/(Mk2*Mk3*k3**4) + D1**4*Pk2*Pk3*f**3*fNL*mu**2*mu2**4*(-3*Mk2*b01*k1**2*k3**2 + 2*k2**2*(Mk1*k3**2 + Mk3*b01*k1**2))/(Mk2*Mk3*k3**4) + 2*D1**4*Pk2*Pk3*f**3*fNL*mu**3*mu2**3*(2*Mk1*k1*k2**2 - Mk2*b01*k1**3)/(Mk2*Mk3*k2*k3**2) + D1**4*Pk2*Pk3*f**2*fNL*k1**2*mu**4*(Mk3*b01*(-2*ct**2*k1**2*k2*(C - 1) - ct*k1*(k2**2*(4*C - 3) + k3**2) - k2*(2*C - 1)*(k2**2 - k3**2)) + 2*b1*k2*(Mk1*k3**2 + Mk3*b01*k1**2))/(Mk2*Mk3*k2*k3**4) - 2*D1**4*Pk2*Pk3*f**2*fNL*k1*mu**3*mu2*(Mk3*b01*k2*(2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k2**2*(4*C - 3) + k3**2) + k2*(2*C - 1)*(k2**2 - k3**2)) + b1*(b01*k1**2*k3**2*(Mk2 + Mk3) - k2**2*(2*Mk1*k3**2 + 3*Mk3*b01*k1**2)))/(Mk2*Mk3*k2*k3**4) - 2*D1**4*Pk2*Pk3*f**2*fNL*k1*mu*mu2**3*(b1*(-2*Mk1*k2**2*k3**2 + Mk2*b01*k3**4 - Mk3*b01*k2**4) + k2*(b01*(Mk2*k3**2 + Mk3*k2**2)*(ct*k1 + k2) - b11*k2*k3**2*(Mk2 + Mk3)))/(Mk2*Mk3*k2*k3**4) - D1**4*Pk2*Pk3*f**2*fNL*k2*mu2**4*(-2*Mk1*b1*k2*k3**2 + b01*(Mk2*k3**2 + Mk3*k2**2)*(ct*k1 + k2) - b11*k2*k3**2*(Mk2 + Mk3))/(Mk2*Mk3*k3**4) - D1**4*Pk2*Pk3*f**2*fNL*mu**2*mu2**2*(b01*(Mk2*k3**2 + Mk3*k2**2)*(2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k1**2 + k2**2*(4*C - 3) + k3**2) + k2*(k1**2 + (2*C - 1)*(k2**2 - k3**2))) - 2*b1*k2*(Mk1*k3**2*(k2**2 + k3**2) + k1**2*(3*Mk3*b01*k2**2 + k3**2*(Mk1 - b01*(Mk2 + Mk3)))) - b11*k1**2*k2*k3**2*(Mk2 + Mk3))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*k1*mu*mu2*(2*Mk3*b01*k2**2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2) + b1**2*(-b01*k3**4*(2*Mk2 + Mk3) + k2**2*k3**2*(4*Mk1 + Mk2*b01 + 2*Mk3*b01)) - 2*b1*k2*(b01*(Mk3*ct**2*k1**2*k2*(K - 1) + Mk3*k2**3*(K + 1) + ct*k1*(2*K*Mk3*k2**2 + k3**2*(Mk2 + Mk3)) + k2*k3**2*(-K*Mk3 + Mk2)) - b11*k2*k3**2*(Mk2 + Mk3)))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*mu**2*(Mk3*b01*k1**2*k2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) - b01*b1*(ct**2*k1**2*k2*(Mk3*k1**2*(K - 1) + 2*k3**2*(C - 1)*(Mk2 + Mk3)) + ct*k1*(k1**2*(2*K*Mk3*k2**2 + k3**2*(Mk2 + Mk3)) + k3**2*(Mk2 + Mk3)*(k2**2*(4*C - 3) + k3**2)) + k2*(k1**2*(Mk3*k2**2*(K + 1) + k3**2*(-K*Mk3 + Mk2)) + k3**2*(2*C - 1)*(Mk2 + Mk3)*(k2**2 - k3**2))) + b1**2*k2*k3**2*(2*Mk1*k3**2 + k1**2*(2*Mk1 + b01*(Mk2 + 2*Mk3))) + b1*b11*k1**2*k2*k3**2*(Mk2 + Mk3))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*mu2**2*(2*Mk1*b1**2*k2*k3**2*(k2**2 + k3**2) - b01*b1*(Mk2*k3**2 + Mk3*k2**2)*(ct**2*k1**2*k2*(K - 1) + 2*ct*k1*(K*k2**2 + k3**2) + k2**3*(K + 1) - k2*k3**2*(K - 1)) + b01*k2*(Mk2*k3**2 + Mk3*k2**2)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) + b1*b11*k2*k3**2*(Mk2 + Mk3)*(k2**2 + k3**2))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk1*Pk2*b01*f**3*fNL*k2*mu*mu2**5/(Mk1*k1) - D1**4*Pk1*Pk3*b01*f**3*fNL*k2**5*mu*mu2**5/(Mk1*k1*k3**4) + D1**4*Pk1*Pk3*b01*f**3*fNL*k2*mu**5*mu2*(-Mk1*k1*k3**2 + Mk3*k1**3)/(Mk1*Mk3*k3**4) + D1**4*Pk1*Pk3*b1*fNL*(b01*(-b1*(K*k1*(Mk1 + Mk3)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2) + Mk1*k1*k3**2 + Mk3*k1**3 - ct**2*k1*k2**2*(Mk1 + Mk3) + ct*k2*(-Mk1*k1**2 + k3**2*(2*Mk1 + Mk3))) + b2*k1*k3**2*(Mk1 + Mk3) + 2*g2*k1*(Mk1 + Mk3)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1*k1*k3**2*(2*Mk2*b1 + b11*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**2) + D1**4*Pk1*Pk3*f**3*fNL*mu**4*mu2**2*(2*Mk2*k1**2*k3**2 + b01*k2**2*(-3*Mk1*k3**2 + 2*Mk3*k1**2))/(Mk1*Mk3*k3**4) + 2*D1**4*Pk1*Pk3*f**3*fNL*mu**2*mu2**4*(Mk2*k2**2*k3**2 - Mk3*b01*k2**4)/(Mk1*Mk3*k3**4) + 2*D1**4*Pk1*Pk3*f**3*fNL*mu**3*mu2**3*(-Mk1*b01*k2**3 + 2*Mk2*k1**2*k2)/(Mk1*Mk3*k1*k3**2) - D1**4*Pk1*Pk3*f**2*fNL*k1*mu**4*(b01*(Mk1*k3**2 + Mk3*k1**2)*(ct*k2 + k1) - k1*k3**2*(2*Mk2*b1 + b11*(Mk1 + Mk3)))/(Mk1*Mk3*k3**4) + D1**4*Pk1*Pk3*f**2*fNL*k2**2*mu2**4*(Mk3*b01*(ct*k1**2*k2*(3 - 4*C) - ct*k2*k3**2 + k1**3*(1 - 2*C) - k1*(2*ct**2*k2**2*(C - 1) + k3**2*(1 - 2*C))) + 2*b1*k1*(Mk2*k3**2 + Mk3*b01*k2**2))/(Mk1*Mk3*k1*k3**4) - 2*D1**4*Pk1*Pk3*f**2*fNL*k2*mu**3*mu2*(b01*(Mk1*b1*k3**4 + Mk1*ct*k1*k2*k3**2 + Mk1*k1**2*k3**2 + Mk3*ct*k1**3*k2 + k1**4*(-Mk3*b1 + Mk3)) - k1**2*k3**2*(2*Mk2*b1 + b11*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**4) - 2*D1**4*Pk1*Pk3*f**2*fNL*k2*mu*mu2**3*(-2*Mk2*b1*k1**2*k3**2 + Mk3*b01*k1*(2*ct**2*k1*k2**2*(C - 1) + ct*k1**2*k2*(4*C - 3) + ct*k2*k3**2 + k1**3*(2*C - 1) + k1*k3**2*(1 - 2*C)) + b01*b1*k2**2*(-3*Mk3*k1**2 + k3**2*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**4) - D1**4*Pk1*Pk3*f**2*fNL*mu**2*mu2**2*(b01*(Mk1*ct*k2*k3**2*(k2**2 + k3**2) + Mk3*ct*k1**4*k2*(4*C - 3) + Mk3*k1**5*(2*C - 1) + ct*k1**2*k2*(Mk3*k2**2 + k3**2*(Mk1*(4*C - 3) + Mk3)) + k1**3*(Mk3*k2**2*(-6*b1 + 2*ct**2*(C - 1) + 1) + k3**2*(2*C - 1)*(Mk1 - Mk3)) + k1*k3**2*(Mk1*k3**2*(1 - 2*C) + k2**2*(Mk1*(2*C*ct**2 + 2*b1 - 2*ct**2 + 1) + 2*Mk3*b1))) - k1*k3**2*(2*Mk2*b1*(k1**2 + k2**2 + k3**2) + b11*k2**2*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*k2*mu*mu2*(b01*(2*Mk3*k1**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1**2*k3**2*(k1**2*(Mk1 + 2*Mk3) - k3**2*(2*Mk1 + Mk3)) - 2*b1*k1*(2*K*Mk3*ct*k1**2*k2 + Mk3*ct**2*k1*k2**2*(K - 1) + Mk3*k1**3*(K + 1) + ct*k2*k3**2*(Mk1 + Mk3) + k1*k3**2*(-K*Mk3 + Mk1))) + 2*b1*k1**2*k3**2*(2*Mk2*b1 + b11*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*mu**2*(-b01*(Mk1*k3**2 + Mk3*k1**2)*(b1*(2*K*ct*k1**2*k2 + 2*ct*k2*k3**2 + k1**3*(K + 1) + k1*(K - 1)*(ct**2*k2**2 - k3**2)) - k1*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2))) + b1*k1*k3**2*(k1**2 + k3**2)*(2*Mk2*b1 + b11*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*mu2**2*(b01*(Mk3*k1*k2**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1**2*k1*k2**2*k3**2*(Mk1 + 2*Mk3) - b1*(ct*k1**2*k2*(2*K*Mk3*k2**2 + k3**2*(4*C - 3)*(Mk1 + Mk3)) + ct*k2*k3**2*(Mk1 + Mk3)*(k2**2 + k3**2) + k1**3*(Mk3*k2**2*(K + 1) + k3**2*(2*C - 1)*(Mk1 + Mk3)) + k1*(Mk3*ct**2*k2**4*(K - 1) + k2**2*k3**2*(-K*Mk3 + 2*Mk1*ct**2*(C - 1) + Mk1 + 2*Mk3*ct**2*(C - 1)) - k3**4*(2*C - 1)*(Mk1 + Mk3)))) + b1*k1*k3**2*(2*Mk2*b1*(k2**2 + k3**2) + b11*k2**2*(Mk1 + Mk3)))/(Mk1*Mk3*k1*k3**4) + D1**4*Pk1*Pk2*b1*f*fNL*mu*mu2*(4*Mk3*b1*k1**2*k2**2 + b01*(4*C*k1**2*k2**2*(Mk1 + Mk2) + b1*k3**2*(k1**2*(Mk1 + 2*Mk2) + k2**2*(2*Mk1 + Mk2)) - 4*ct**2*k1**2*k2**2*(C - 1)*(Mk1 + Mk2) + 2*ct*k1*k2*(Mk1 + Mk2)*(k1**2 + k2**2)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1*fNL*(b01*(b1*(-ct**2*k1*k2*(K - 1)*(Mk1 + Mk2) + ct*k1**2*(Mk1 + 2*Mk2) + ct*k2**2*(2*Mk1 + Mk2) + k1*k2*(K + 1)*(Mk1 + Mk2)) + k1*k2*(Mk1 + Mk2)*(b2 + 2*g2*(ct**2 - 1))) + b1*k1*k2*(2*Mk3*b1 + b11*(Mk1 + Mk2)))/(Mk1*Mk2*k1*k2) + D1**4*Pk1*Pk2*f**3*fNL*mu**4*mu2**2*(3*Mk1*b01*k3**2 + 2*Mk3*k1**2)/(Mk1*Mk2*k3**2) + D1**4*Pk1*Pk2*f**3*fNL*mu**2*mu2**4*(3*Mk2*b01*k3**2 + 2*Mk3*k2**2)/(Mk1*Mk2*k3**2) + 2*D1**4*Pk1*Pk2*f**3*fNL*mu**3*mu2**3*(2*Mk3*k1**2*k2**2 + b01*k3**2*(Mk1*k2**2 + Mk2*k1**2))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu**4*(Mk1*b01*(-2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k1**2 + k2**2) + 2*k2*(C*k1**2 + b1*k3**2)) + 2*Mk3*b1*k1**2*k2)/(Mk1*Mk2*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu2**4*(Mk2*b01*(-2*ct**2*k1*k2**2*(C - 1) + ct*k2*(k1**2 + k2**2) + 2*k1*(C*k2**2 + b1*k3**2)) + 2*Mk3*b1*k1*k2**2)/(Mk1*Mk2*k1*k3**2) + 2*D1**4*Pk1*Pk2*f**2*fNL*mu**3*mu2*(2*Mk3*b1*k1**2*k2**2 + b01*(2*C*Mk1*k1**2*k2**2 - 2*Mk1*ct**2*k1**2*k2**2*(C - 1) + Mk1*ct*k1*k2*(k1**2 + k2**2) + b1*k3**2*(Mk1*k2**2 + k1**2*(Mk1 + Mk2))))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu**2*mu2**2*(b01*(-2*ct**2*k1*k2*(C - 1)*(Mk1*k2**2 + Mk2*k1**2) + ct*(Mk1*k2**2 + Mk2*k1**2)*(k1**2 + k2**2 + k3**2) + 2*k1*k2*(C*(Mk1*k2**2 + Mk2*k1**2) + 2*b1*k3**2*(Mk1 + Mk2))) + k1*k2*(2*Mk3*b1*(k1**2 + k2**2 + k3**2) + b11*k3**2*(Mk1 + Mk2)))/(Mk1*Mk2*k1*k2*k3**2) + 2*D1**4*Pk1*Pk2*f**2*fNL*mu*mu2**3*(Mk2*b01*k1*k2*(2*C*k1*k2 - 2*ct**2*k1*k2*(C - 1) + ct*(k1**2 + k2**2)) + 2*Mk3*b1*k1**2*k2**2 + b01*b1*k3**2*(Mk2*k1**2 + k2**2*(Mk1 + Mk2)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f*fNL*mu**2*(b01*(Mk1*k1*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)) + b1**2*k1*k2*k3**2*(2*Mk1 + Mk2) + b1*(ct**2*k1*k2*(-Mk1*k3**2*(K - 1) - 2*k1**2*(C - 1)*(Mk1 + Mk2)) + ct*(2*Mk1*k2**2*k3**2 + k1**4*(Mk1 + Mk2) + k1**2*(Mk1 + Mk2)*(k2**2 + k3**2)) + k1*k2*(2*C*k1**2*(Mk1 + Mk2) + Mk1*k3**2*(K + 1)))) + b1*k1*k2*(2*Mk3*b1*(k1**2 + k3**2) + b11*k3**2*(Mk1 + Mk2)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f*fNL*mu2**2*(b01*(Mk2*k1*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)) + b1**2*k1*k2*k3**2*(Mk1 + 2*Mk2) + b1*(ct**2*k1*k2*(-Mk2*k3**2*(K - 1) - 2*k2**2*(C - 1)*(Mk1 + Mk2)) + ct*(k1**2*(2*Mk2*k3**2 + k2**2*(Mk1 + Mk2)) + k2**2*(Mk1 + Mk2)*(k2**2 + k3**2)) + k1*k2*(2*C*k2**2*(Mk1 + Mk2) + Mk2*k3**2*(K + 1)))) + b1*k1*k2*(2*Mk3*b1*(k2**2 + k3**2) + b11*k3**2*(Mk1 + Mk2)))/(Mk1*Mk2*k1*k2*k3**2)
    return expr

def Eq_(mu,phi,cosmo_functions,k1,k2,k3=None,theta=None,zz=0,r=0,s=0,fNL=1):
    
    #get generic cosmology parameters
    k1,k2,k3,theta,Pk1,Pk2,Pk3,_,_,_,_,_,_,d,K,C,f,D1,b1,b2,g2 = cosmo_functions.get_params(k1,k2,k3,theta,zz)
    
    b01,b11,Mk1,Mk2,Mk3 = cosmo_functions.get_PNGparams(zz,k1,k2,k3, shape='Eq')
    
    mu2 = mu*np.cos(theta)+np.sqrt((1-mu**2)) *np.sin(theta)*np.cos(phi)
    st = np.sin(theta)
    ct= np.cos(theta)
    
    expr = D1**4*Pk1*Pk2*b01*f**3*fNL*k1*k2*mu**5*mu2/Mk2 - D1**4*Pk2*Pk3*b01*f**3*fNL*k1**5*k2*mu**5*mu2/(Mk2*k3**4) + D1**4*Pk2*Pk3*b01*f**3*fNL*k1*mu*mu2**5*(-Mk2*k2*k3**4 + Mk3*k2**5)/(Mk2*Mk3*k3**4) + D1**4*Pk2*Pk3*b1*fNL*(-6*Mk1*b1**2*k2*k3**2 - b01*b1*(ct**2*k1**2*k2*(K - 1)*(Mk2*k3**2 + Mk3*k2**2) + ct*k1*(2*K*Mk3*k2**4 + 2*Mk2*k3**4 + k2**2*k3**2*(2*K*Mk2 - Mk2 + Mk3)) + k2*(K*(k2**2 - k3**2)*(Mk2*k3**2 + Mk3*k2**2) + Mk2*k3**4 + Mk3*k2**4)) + b01*k2*(Mk2*k3**2 + Mk3*k2**2)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2) + b1*b11*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2))/(Mk2*Mk3*k2*k3**2) - 2*D1**4*Pk2*Pk3*f**3*fNL*mu**4*mu2**2*(3*Mk1*k1**2*k3**2 + Mk3*b01*k1**4*k2**2)/(Mk2*Mk3*k3**4) + D1**4*Pk2*Pk3*f**3*fNL*mu**2*mu2**4*(-6*Mk1*k2**2*k3**2 - 3*Mk2*b01*k1**2*k3**4 + 2*Mk3*b01*k1**2*k2**4)/(Mk2*Mk3*k3**4) - 2*D1**4*Pk2*Pk3*f**3*fNL*mu**3*mu2**3*(6*Mk1*k1*k2**2 + Mk2*b01*k1**3*k3**2)/(Mk2*Mk3*k2*k3**2) + D1**4*Pk2*Pk3*f**2*fNL*k1**2*mu**4*(Mk3*b01*k2*(-2*ct**2*k1**2*k2*(C - 1) - ct*k1*(k2**2*(4*C - 3) + k3**2) - k2*(2*C - 1)*(k2**2 - k3**2)) + b1*(-6*Mk1*k3**2 + 2*Mk3*b01*k1**2*k2**2))/(Mk2*Mk3*k3**4) - 2*D1**4*Pk2*Pk3*f**2*fNL*k1*mu**3*mu2*(Mk3*b01*k2**3*(2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k2**2*(4*C - 3) + k3**2) + k2*(2*C - 1)*(k2**2 - k3**2)) + b1*(Mk2*b01*k1**2*k3**4 - 3*Mk3*b01*k1**2*k2**4 + k2**2*k3**2*(6*Mk1 + Mk3*b01*k1**2)))/(Mk2*Mk3*k2*k3**4) - 2*D1**4*Pk2*Pk3*f**2*fNL*k1*mu*mu2**3*(b1*(6*Mk1*k2**2*k3**2 + Mk2*b01*k3**6 - Mk3*b01*k2**6) + k2*(b01*(Mk2*k3**4 + Mk3*k2**4)*(ct*k1 + k2) - b11*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2)))/(Mk2*Mk3*k2*k3**4) - D1**4*Pk2*Pk3*f**2*fNL*k2*mu2**4*(6*Mk1*b1*k2*k3**2 + b01*(Mk2*k3**4 + Mk3*k2**4)*(ct*k1 + k2) - b11*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2))/(Mk2*Mk3*k3**4) - D1**4*Pk2*Pk3*f**2*fNL*mu**2*mu2**2*(b01*(Mk2*k3**4 + Mk3*k2**4)*(2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k1**2 + k2**2*(4*C - 3) + k3**2) + k2*(k1**2 + (2*C - 1)*(k2**2 - k3**2))) + 2*b1*k2*(3*Mk1*k3**2*(k2**2 + k3**2) + k1**2*(Mk2*b01*k3**4 - 3*Mk3*b01*k2**4 + k3**2*(3*Mk1 + Mk3*b01*k2**2))) - b11*k1**2*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*k1*mu*mu2*(2*Mk3*b01*k2**4*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) + b1**2*k3**2*(-2*Mk2*b01*k3**4 + 2*Mk3*b01*k2**4 + k2**2*(-12*Mk1 + b01*k3**2*(Mk2 - Mk3))) - 2*b1*k2*(b01*(-K*Mk3*k2**3*k3**2 + Mk2*k2*k3**4 + Mk3*ct**2*k1**2*k2**3*(K - 1) + Mk3*k2**5*(K + 1) + ct*k1*(2*K*Mk3*k2**4 + Mk2*k3**4 + Mk3*k2**2*k3**2)) - b11*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2)))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*mu**2*(Mk3*b01*k1**2*k2**3*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2) - b01*b1*(ct**2*k1**2*k2*(2*Mk2*k3**4*(C - 1) + Mk3*k1**2*k2**2*(K - 1) + 2*Mk3*k2**2*k3**2*(C - 1)) + ct*k1*(k1**2*(2*K*Mk3*k2**4 + Mk2*k3**4 + Mk3*k2**2*k3**2) + k3**2*(Mk2*k3**2 + Mk3*k2**2)*(k2**2*(4*C - 3) + k3**2)) + k2*(k1**2*(-K*Mk3*k2**2*k3**2 + Mk2*k3**4 + Mk3*k2**4*(K + 1)) + k3**2*(2*C - 1)*(k2**2 - k3**2)*(Mk2*k3**2 + Mk3*k2**2))) + b1**2*k2*k3**2*(-6*Mk1*k3**2 + k1**2*(-6*Mk1 + Mk2*b01*k3**2 + 2*Mk3*b01*k2**2)) + b1*b11*k1**2*k2*k3**2*(Mk2*k3**2 + Mk3*k2**2))/(Mk2*Mk3*k2*k3**4) - D1**4*Pk2*Pk3*f*fNL*mu2**2*(6*Mk1*b1**2*k2*k3**2*(k2**2 + k3**2) + b01*b1*(Mk2*k3**4 + Mk3*k2**4)*(ct**2*k1**2*k2*(K - 1) + 2*ct*k1*(K*k2**2 + k3**2) + k2**3*(K + 1) - k2*k3**2*(K - 1)) - b01*k2*(Mk2*k3**4 + Mk3*k2**4)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) - b1*b11*k2*k3**2*(k2**2 + k3**2)*(Mk2*k3**2 + Mk3*k2**2))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk1*Pk2*b01*f**3*fNL*k1*k2*mu*mu2**5/Mk1 - D1**4*Pk1*Pk3*b01*f**3*fNL*k1*k2**5*mu*mu2**5/(Mk1*k3**4) + D1**4*Pk1*Pk3*b01*f**3*fNL*k2*mu**5*mu2*(-Mk1*k1*k3**4 + Mk3*k1**5)/(Mk1*Mk3*k3**4) + D1**4*Pk1*Pk2*b1*f*fNL*mu*mu2*(-12*Mk3*b1*k1**2*k2**2 + b01*(4*C*(Mk1*k1**2*k2**4 + Mk2*k1**4*k2**2) + b1*k3**2*(2*Mk1*k2**4 + 2*Mk2*k1**4 + k1**2*k2**2*(Mk1 + Mk2)) - 4*ct**2*k1**2*k2**2*(C - 1)*(Mk1*k2**2 + Mk2*k1**2) + 2*ct*k1*k2*(k1**2 + k2**2)*(Mk1*k2**2 + Mk2*k1**2)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1*fNL*(b01*b1*(-ct**2*k1*k2*(K - 1)*(Mk1*k2**2 + Mk2*k1**2) + ct*(2*Mk1*k2**4 + 2*Mk2*k1**4 + k1**2*k2**2*(Mk1 + Mk2)) + k1*k2*(K + 1)*(Mk1*k2**2 + Mk2*k1**2)) + b01*k1*k2*(b2 + 2*g2*(ct**2 - 1))*(Mk1*k2**2 + Mk2*k1**2) + b1*k1*k2*(Mk1*b11*k2**2 + Mk2*b11*k1**2 - 6*Mk3*b1))/(Mk1*Mk2*k1*k2) + 3*D1**4*Pk1*Pk2*f**3*fNL*mu**4*mu2**2*(Mk1*b01*k2**2*k3**2 - 2*Mk3*k1**2)/(Mk1*Mk2*k3**2) + 3*D1**4*Pk1*Pk2*f**3*fNL*mu**2*mu2**4*(Mk2*b01*k1**2*k3**2 - 2*Mk3*k2**2)/(Mk1*Mk2*k3**2) + 2*D1**4*Pk1*Pk2*f**3*fNL*mu**3*mu2**3*(-6*Mk3*k1**2*k2**2 + b01*k3**2*(Mk1*k2**4 + Mk2*k1**4))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu**4*(Mk1*b01*k2*(-2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k1**2 + k2**2) + 2*k2*(C*k1**2 + b1*k3**2)) - 6*Mk3*b1*k1**2)/(Mk1*Mk2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu2**4*(Mk2*b01*k1*(-2*ct**2*k1*k2**2*(C - 1) + ct*k2*(k1**2 + k2**2) + 2*k1*(C*k2**2 + b1*k3**2)) - 6*Mk3*b1*k2**2)/(Mk1*Mk2*k3**2) + 2*D1**4*Pk1*Pk2*f**2*fNL*mu**3*mu2*(-6*Mk3*b1*k1**2*k2**2 + b01*(2*C*Mk1*k1**2*k2**4 - 2*Mk1*ct**2*k1**2*k2**4*(C - 1) + Mk1*ct*k1*k2**3*(k1**2 + k2**2) + b1*k3**2*(Mk1*k1**2*k2**2 + Mk1*k2**4 + Mk2*k1**4)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu**2*mu2**2*(b01*(-2*ct**2*k1*k2*(C - 1)*(Mk1*k2**4 + Mk2*k1**4) + ct*(Mk1*k2**4 + Mk2*k1**4)*(k1**2 + k2**2 + k3**2) + 2*k1*k2*(C*(Mk1*k2**4 + Mk2*k1**4) + 2*b1*k3**2*(Mk1*k2**2 + Mk2*k1**2))) + k1*k2*(-6*Mk3*b1*(k1**2 + k2**2 + k3**2) + b11*k3**2*(Mk1*k2**2 + Mk2*k1**2)))/(Mk1*Mk2*k1*k2*k3**2) + 2*D1**4*Pk1*Pk2*f**2*fNL*mu*mu2**3*(Mk2*b01*k1**3*k2*(2*C*k1*k2 - 2*ct**2*k1*k2*(C - 1) + ct*(k1**2 + k2**2)) - 6*Mk3*b1*k1**2*k2**2 + b01*b1*k3**2*(Mk1*k2**4 + Mk2*k1**4 + Mk2*k1**2*k2**2))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f*fNL*mu**2*(b01*(Mk1*k1*k2**3*k3**2*(b2 + 2*g2*(ct**2 - 1)) + b1**2*k1*k2*k3**2*(2*Mk1*k2**2 + Mk2*k1**2) + b1*(ct**2*k1*k2*(-2*Mk1*k1**2*k2**2*(C - 1) - Mk1*k2**2*k3**2*(K - 1) - 2*Mk2*k1**4*(C - 1)) + ct*(Mk1*k1**2*k2**2*(k2**2 + k3**2) + 2*Mk1*k2**4*k3**2 + Mk2*k1**6 + k1**4*(Mk2*k3**2 + k2**2*(Mk1 + Mk2))) + k1*k2*(2*C*(Mk1*k1**2*k2**2 + Mk2*k1**4) + Mk1*k2**2*k3**2*(K + 1)))) + b1*k1*k2*(-6*Mk3*b1*(k1**2 + k3**2) + b11*k3**2*(Mk1*k2**2 + Mk2*k1**2)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f*fNL*mu2**2*(b01*(Mk2*k1**3*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)) + b1**2*k1*k2*k3**2*(Mk1*k2**2 + 2*Mk2*k1**2) + b1*(ct**2*(-2*Mk1*k1*k2**5*(C - 1) + Mk2*k1**3*k2*(-2*k2**2*(C - 1) - k3**2*(K - 1))) + ct*(Mk1*k2**4*(k2**2 + k3**2) + Mk2*k1**4*(k2**2 + 2*k3**2) + k1**2*(Mk2*k2**2*k3**2 + k2**4*(Mk1 + Mk2))) + k1*k2*(2*C*(Mk1*k2**4 + Mk2*k1**2*k2**2) + Mk2*k1**2*k3**2*(K + 1)))) + b1*k1*k2*(-6*Mk3*b1*(k2**2 + k3**2) + b11*k3**2*(Mk1*k2**2 + Mk2*k1**2)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk3*b1*fNL*(Mk2*b01*(-b1*(K*k1*(Mk1*k3**2 + Mk3*k1**2)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2) + Mk1*k1*k3**4 + Mk3*k1**5 - ct**2*k1*k2**2*(Mk1*k3**2 + Mk3*k1**2) + ct*k2*k3**2*(2*Mk1*k3**2 + k1**2*(-Mk1 + Mk3))) + b2*k1*k3**2*(Mk1*k3**2 + Mk3*k1**2) + 2*g2*k1*(Mk1*k3**2 + Mk3*k1**2)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1*k1*k3**2*(6*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3**2 + Mk3*k1**2) - 6*Mk2**2*b1*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**2) - 2*D1**4*Pk1*Pk3*f**3*fNL*k2**2*mu**2*mu2**4*(Mk2*Mk3*b01*k1**2*k2**2 + 3*k3**2*(-D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) + D1**4*Pk1*Pk3*f**3*fNL*mu**4*mu2**2*(Mk2*b01*k2**2*(-3*Mk1*k3**4 + 2*Mk3*k1**4) + 6*k1**2*k3**2*(D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) - Mk2**2*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) - 2*D1**4*Pk1*Pk3*f**3*fNL*k2*mu**3*mu2**3*(Mk1*Mk2*b01*k2**2*k3**2 + 6*k1**2*(-D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**2) + D1**4*Pk1*Pk3*f**2*fNL*k1*mu**4*(-Mk2*b01*(Mk1*k3**4 + Mk3*k1**4)*(ct*k2 + k1) + k1*k3**2*(6*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3**2 + Mk3*k1**2) - 6*Mk2**2*b1*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) + D1**4*Pk1*Pk3*f**2*fNL*k2**2*mu2**4*(2*Mk2*Mk3*b01*b1*k1**2*k2**2 + Mk2*Mk3*b01*k1*(ct*k1**2*k2*(3 - 4*C) - ct*k2*k3**2 + k1**3*(1 - 2*C) - k1*(2*ct**2*k2**2*(C - 1) + k3**2*(1 - 2*C))) - 6*b1*k3**2*(-D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) + 2*D1**4*Pk1*Pk3*f**2*fNL*k2*mu**3*mu2*(Mk2*b01*(-Mk1*b1*k3**6 - Mk1*ct*k1*k2*k3**4 - Mk1*k1**2*k3**4 - Mk3*ct*k1**5*k2 + Mk3*k1**6*(b1 - 1)) + k1**2*k3**2*(6*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3**2 + Mk3*k1**2) - 6*Mk2**2*b1*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) - 2*D1**4*Pk1*Pk3*f**2*fNL*k2*mu*mu2**3*(Mk2*b01*(Mk3*k1**3*(2*ct**2*k1*k2**2*(C - 1) + ct*k1**2*k2*(4*C - 3) + ct*k2*k3**2 + k1**3*(2*C - 1) + k1*k3**2*(1 - 2*C)) + b1*k2**2*(Mk1*k3**4 - 3*Mk3*k1**4 + Mk3*k1**2*k3**2)) + 6*b1*k1**2*k3**2*(-D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) - D1**4*Pk1*Pk3*f**2*fNL*mu**2*mu2**2*(Mk2*b01*(Mk1*ct*k1**2*k2*k3**4*(4*C - 3) + Mk1*ct*k2*k3**4*(k2**2 + k3**2) + Mk1*k1*k3**4*(k2**2*(2*b1 + 2*ct**2*(C - 1) + 1) + k3**2*(1 - 2*C)) + Mk3*ct*k1**6*k2*(4*C - 3) + Mk3*ct*k1**4*k2*(k2**2 + k3**2) + Mk3*k1**7*(2*C - 1) + Mk3*k1**5*(k2**2*(-6*b1 + 2*ct**2*(C - 1) + 1) + k3**2*(1 - 2*C)) + k1**3*(Mk1*k3**4*(2*C - 1) + 2*Mk3*b1*k2**2*k3**2)) - k1*k3**2*(Mk2*b11*k2**2*(Mk1*k3**2 + Mk3*k1**2) - 6*b1*(D1**2*Pk2*(2*(D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3) - (D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(1/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(1/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (D1**2*Pk1/Mk1**2)**(1/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (D1**2*Pk1/Mk1**2)**(1/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(1/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - (D1**2*Pk2/Mk2**2)**(1/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)) + Mk2**2*(D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))*(k1**2 + k2**2 + k3**2)/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))))/(Mk1*Mk2*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*k2*mu*mu2*(Mk2*b01*(2*Mk3*k1**4*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1**2*(-2*Mk1*k3**6 + 2*Mk3*k1**4*k3**2 + k1**2*k3**4*(Mk1 - Mk3)) - 2*b1*k1*(2*K*Mk3*ct*k1**4*k2 + Mk1*ct*k2*k3**4 + Mk1*k1*k3**4 + Mk3*ct*k1**2*k2*k3**2 + Mk3*k1**5*(K + 1) + Mk3*k1**3*(-K*k3**2 + ct**2*k2**2*(K - 1)))) + 2*b1*k1**2*k3**2*(6*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3**2 + Mk3*k1**2) - 6*Mk2**2*b1*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*mu**2*(-Mk2*b01*(Mk1*k3**4 + Mk3*k1**4)*(b1*(2*K*ct*k1**2*k2 + 2*ct*k2*k3**2 + k1**3*(K + 1) + k1*(K - 1)*(ct**2*k2**2 - k3**2)) - k1*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2))) + b1*k1*k3**2*(k1**2 + k3**2)*(6*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3**2 + Mk3*k1**2) - 6*Mk2**2*b1*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*mu2**2*(Mk2*b01*(Mk3*k1**3*k2**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1**2*k1*k2**2*k3**2*(Mk1*k3**2 + 2*Mk3*k1**2) - b1*(Mk1*ct*k2*k3**4*(k2**2 + k3**2) + Mk1*k1*k3**4*(k2**2*(2*ct**2*(C - 1) + 1) + k3**2*(1 - 2*C)) + Mk3*ct*k1**4*k2*(2*K*k2**2 + k3**2*(4*C - 3)) + Mk3*k1**5*(k2**2*(K + 1) + k3**2*(2*C - 1)) + ct*k1**2*k2*k3**2*(Mk3*k2**2 + k3**2*(4*C*Mk1 - 3*Mk1 + Mk3)) + k1**3*(Mk3*ct**2*k2**4*(K - 1) + Mk3*k2**2*k3**2*(-K + 2*ct**2*(C - 1)) + k3**4*(2*C - 1)*(Mk1 - Mk3)))) + b1*k1*k3**2*(Mk2*b11*k2**2*(Mk1*k3**2 + Mk3*k1**2) - 6*b1*(k2**2 + k3**2)*(-D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(D1**4*Pk1*Pk3 - D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 2*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3))))/(Mk1*Mk2*Mk3*k1*k3**4)

    return expr

def Orth_(mu,phi,cosmo_functions,k1,k2,k3=None,theta=None,zz=0,r=0,s=0,fNL=1):
    
    #get generic cosmology parameters
    k1,k2,k3,theta,Pk1,Pk2,Pk3,_,_,_,_,_,_,d,K,C,f,D1,b1,b2,g2 = cosmo_functions.get_params(k1,k2,k3,theta,zz)
    
    b01,b11,Mk1,Mk2,Mk3 = cosmo_functions.get_PNGparams(zz,k1,k2,k3, shape='Orth')
    
    mu2 = mu*np.cos(theta)+np.sqrt((1-mu**2)) *np.sin(theta)*np.cos(phi)
    st = np.sin(theta)
    ct= np.cos(theta)
    
    expr = D1**4*Pk1*Pk2*b01*f**3*fNL*k1*mu**5*mu2/Mk2 - D1**4*Pk2*Pk3*b01*f**3*fNL*k1**5*mu**5*mu2/(Mk2*k3**4) + D1**4*Pk2*Pk3*b01*f**3*fNL*k1*mu*mu2**5*(-Mk2*k2*k3**3 + Mk3*k2**4)/(Mk2*Mk3*k3**4) + D1**4*Pk2*Pk3*b1*fNL*(-18*Mk1*b1**2*k2*k3**2 - b01*b1*(ct**2*k1**2*k2*(K - 1)*(Mk2*k3 + Mk3*k2) + ct*k1*(2*K*Mk3*k2**3 + Mk2*k2**2*k3*(2*K - 1) + 2*Mk2*k3**3 + Mk3*k2*k3**2) + k2*(K*(k2**2 - k3**2)*(Mk2*k3 + Mk3*k2) + Mk2*k3**3 + Mk3*k2**3)) + b01*k2*(Mk2*k3 + Mk3*k2)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2) + b1*b11*k2*k3**2*(Mk2*k3 + Mk3*k2))/(Mk2*Mk3*k2*k3**2) - 2*D1**4*Pk2*Pk3*f**3*fNL*mu**4*mu2**2*(9*Mk1*k1**2*k3**2 + Mk3*b01*k1**4*k2)/(Mk2*Mk3*k3**4) + D1**4*Pk2*Pk3*f**3*fNL*mu**2*mu2**4*(-18*Mk1*k2**2*k3**2 - 3*Mk2*b01*k1**2*k3**3 + 2*Mk3*b01*k1**2*k2**3)/(Mk2*Mk3*k3**4) - 2*D1**4*Pk2*Pk3*f**3*fNL*mu**3*mu2**3*(18*Mk1*k1*k2**2 + Mk2*b01*k1**3*k3)/(Mk2*Mk3*k2*k3**2) + D1**4*Pk2*Pk3*f**2*fNL*k1**2*mu**4*(Mk3*b01*(-2*ct**2*k1**2*k2*(C - 1) - ct*k1*(k2**2*(4*C - 3) + k3**2) - k2*(2*C - 1)*(k2**2 - k3**2)) + 2*b1*(-9*Mk1*k3**2 + Mk3*b01*k1**2*k2))/(Mk2*Mk3*k3**4) - 2*D1**4*Pk2*Pk3*f**2*fNL*k1*mu**3*mu2*(Mk3*b01*k2**2*(2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k2**2*(4*C - 3) + k3**2) + k2*(2*C - 1)*(k2**2 - k3**2)) + b1*(18*Mk1*k2**2*k3**2 + Mk2*b01*k1**2*k3**3 - 3*Mk3*b01*k1**2*k2**3 + Mk3*b01*k1**2*k2*k3**2))/(Mk2*Mk3*k2*k3**4) - 2*D1**4*Pk2*Pk3*f**2*fNL*k1*mu*mu2**3*(b1*(18*Mk1*k2**2*k3**2 + Mk2*b01*k3**5 - Mk3*b01*k2**5) + k2*(b01*(Mk2*k3**3 + Mk3*k2**3)*(ct*k1 + k2) - b11*k2*k3**2*(Mk2*k3 + Mk3*k2)))/(Mk2*Mk3*k2*k3**4) - D1**4*Pk2*Pk3*f**2*fNL*k2*mu2**4*(18*Mk1*b1*k2*k3**2 + b01*(Mk2*k3**3 + Mk3*k2**3)*(ct*k1 + k2) - b11*k2*k3**2*(Mk2*k3 + Mk3*k2))/(Mk2*Mk3*k3**4) - D1**4*Pk2*Pk3*f**2*fNL*mu**2*mu2**2*(b01*(Mk2*k3**3 + Mk3*k2**3)*(2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k1**2 + k2**2*(4*C - 3) + k3**2) + k2*(k1**2 + (2*C - 1)*(k2**2 - k3**2))) + 2*b1*k2*(9*Mk1*k3**2*(k2**2 + k3**2) + k1**2*(Mk2*b01*k3**3 - 3*Mk3*b01*k2**3 + k3**2*(9*Mk1 + Mk3*b01*k2))) - b11*k1**2*k2*k3**2*(Mk2*k3 + Mk3*k2))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*k1*mu*mu2*(2*Mk3*b01*k2**3*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*k2**2 - 2*g2*k3**2) + b1**2*k3**2*(-2*Mk2*b01*k3**3 + 2*Mk3*b01*k2**3 - Mk3*b01*k2*k3**2 + k2**2*(-36*Mk1 + Mk2*b01*k3)) - 2*b1*k2*(b01*(Mk3*ct**2*k1**2*k2**2*(K - 1) + ct*k1*(2*K*Mk3*k2**3 + Mk2*k3**3 + Mk3*k2*k3**2) + k2*(-K*Mk3*k2*k3**2 + Mk2*k3**3 + Mk3*k2**3*(K + 1))) - b11*k2*k3**2*(Mk2*k3 + Mk3*k2)))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk2*Pk3*f*fNL*mu**2*(Mk3*b01*k1**2*k2**2*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) - b01*b1*(ct**2*k1**2*k2*(2*Mk2*k3**3*(C - 1) + Mk3*k1**2*k2*(K - 1) + 2*Mk3*k2*k3**2*(C - 1)) + ct*(k1**3*(2*K*Mk3*k2**3 + Mk2*k3**3 + Mk3*k2*k3**2) + k1*k3**2*(Mk2*k3 + Mk3*k2)*(k2**2*(4*C - 3) + k3**2)) + k2*(k1**2*(-K*Mk3*k2*k3**2 + Mk2*k3**3 + Mk3*k2**3*(K + 1)) + k3**2*(2*C - 1)*(k2**2 - k3**2)*(Mk2*k3 + Mk3*k2))) + b1**2*k2*k3**2*(-18*Mk1*k3**2 + k1**2*(-18*Mk1 + Mk2*b01*k3 + 2*Mk3*b01*k2)) + b1*b11*k1**2*k2*k3**2*(Mk2*k3 + Mk3*k2))/(Mk2*Mk3*k2*k3**4) - D1**4*Pk2*Pk3*f*fNL*mu2**2*(18*Mk1*b1**2*k2*k3**2*(k2**2 + k3**2) + b01*b1*(Mk2*k3**3 + Mk3*k2**3)*(ct**2*k1**2*k2*(K - 1) + 2*ct*k1*(K*k2**2 + k3**2) + k2**3*(K + 1) - k2*k3**2*(K - 1)) - b01*k2*(Mk2*k3**3 + Mk3*k2**3)*(b2*k3**2 + 2*ct**2*g2*k1**2 + 4*ct*g2*k1*k2 + 2*g2*(k2**2 - k3**2)) - b1*b11*k2*k3**2*(k2**2 + k3**2)*(Mk2*k3 + Mk3*k2))/(Mk2*Mk3*k2*k3**4) + D1**4*Pk1*Pk2*b01*f**3*fNL*k2*mu*mu2**5/Mk1 - D1**4*Pk1*Pk3*b01*f**3*fNL*k2**5*mu*mu2**5/(Mk1*k3**4) + D1**4*Pk1*Pk3*b01*f**3*fNL*k2*mu**5*mu2*(-Mk1*k1*k3**3 + Mk3*k1**4)/(Mk1*Mk3*k3**4) + D1**4*Pk1*Pk2*b1*f*fNL*mu*mu2*(-36*Mk3*b1*k1**2*k2**2 + b01*(4*C*k1**2*k2**2*(Mk1*k2 + Mk2*k1) + b1*k3**2*(Mk1*k1**2*k2 + 2*Mk1*k2**3 + 2*Mk2*k1**3 + Mk2*k1*k2**2) - 4*ct**2*k1**2*k2**2*(C - 1)*(Mk1*k2 + Mk2*k1) + 2*ct*k1*k2*(k1**2 + k2**2)*(Mk1*k2 + Mk2*k1)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*b1*fNL*(b01*b1*(-ct**2*k1*k2*(K - 1)*(Mk1*k2 + Mk2*k1) + ct*(Mk1*k1**2*k2 + 2*Mk1*k2**3 + 2*Mk2*k1**3 + Mk2*k1*k2**2) + k1*k2*(K + 1)*(Mk1*k2 + Mk2*k1)) + b01*k1*k2*(b2 + 2*g2*(ct**2 - 1))*(Mk1*k2 + Mk2*k1) + b1*k1*k2*(Mk1*b11*k2 + Mk2*b11*k1 - 18*Mk3*b1))/(Mk1*Mk2*k1*k2) + 3*D1**4*Pk1*Pk2*f**3*fNL*mu**4*mu2**2*(Mk1*b01*k2*k3**2 - 6*Mk3*k1**2)/(Mk1*Mk2*k3**2) + 3*D1**4*Pk1*Pk2*f**3*fNL*mu**2*mu2**4*(Mk2*b01*k1*k3**2 - 6*Mk3*k2**2)/(Mk1*Mk2*k3**2) + 2*D1**4*Pk1*Pk2*f**3*fNL*mu**3*mu2**3*(-18*Mk3*k1**2*k2**2 + b01*k3**2*(Mk1*k2**3 + Mk2*k1**3))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu**4*(Mk1*b01*(-2*ct**2*k1**2*k2*(C - 1) + ct*k1*(k1**2 + k2**2) + 2*k2*(C*k1**2 + b1*k3**2)) - 18*Mk3*b1*k1**2)/(Mk1*Mk2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu2**4*(Mk2*b01*(-2*ct**2*k1*k2**2*(C - 1) + ct*k2*(k1**2 + k2**2) + 2*k1*(C*k2**2 + b1*k3**2)) - 18*Mk3*b1*k2**2)/(Mk1*Mk2*k3**2) + 2*D1**4*Pk1*Pk2*f**2*fNL*mu**3*mu2*(-18*Mk3*b1*k1**2*k2**2 + b01*(2*C*Mk1*k1**2*k2**3 - 2*Mk1*ct**2*k1**2*k2**3*(C - 1) + Mk1*ct*k1*k2**2*(k1**2 + k2**2) + b1*k3**2*(Mk1*k1**2*k2 + Mk1*k2**3 + Mk2*k1**3)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f**2*fNL*mu**2*mu2**2*(b01*(-2*ct**2*k1*k2*(C - 1)*(Mk1*k2**3 + Mk2*k1**3) + ct*(Mk1*k2**3 + Mk2*k1**3)*(k1**2 + k2**2 + k3**2) + 2*k1*k2*(C*(Mk1*k2**3 + Mk2*k1**3) + 2*b1*k3**2*(Mk1*k2 + Mk2*k1))) + k1*k2*(-18*Mk3*b1*(k1**2 + k2**2 + k3**2) + b11*k3**2*(Mk1*k2 + Mk2*k1)))/(Mk1*Mk2*k1*k2*k3**2) + 2*D1**4*Pk1*Pk2*f**2*fNL*mu*mu2**3*(Mk2*b01*k1**2*k2*(2*C*k1*k2 - 2*ct**2*k1*k2*(C - 1) + ct*(k1**2 + k2**2)) - 18*Mk3*b1*k1**2*k2**2 + b01*b1*k3**2*(Mk1*k2**3 + Mk2*k1**3 + Mk2*k1*k2**2))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f*fNL*mu**2*(b01*(Mk1*k1*k2**2*k3**2*(b2 + 2*g2*(ct**2 - 1)) + b1**2*k1*k2*k3**2*(2*Mk1*k2 + Mk2*k1) + b1*(ct**2*k1*k2*(-2*Mk1*k1**2*k2*(C - 1) - Mk1*k2*k3**2*(K - 1) - 2*Mk2*k1**3*(C - 1)) + ct*(Mk1*k1**4*k2 + Mk1*k1**2*k2*(k2**2 + k3**2) + 2*Mk1*k2**3*k3**2 + Mk2*k1**5 + Mk2*k1**3*(k2**2 + k3**2)) + k1*k2*(2*C*k1**2*(Mk1*k2 + Mk2*k1) + Mk1*k2*k3**2*(K + 1)))) + b1*k1*k2*(-18*Mk3*b1*(k1**2 + k3**2) + b11*k3**2*(Mk1*k2 + Mk2*k1)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk2*f*fNL*mu2**2*(b01*(Mk2*k1**2*k2*k3**2*(b2 + 2*g2*(ct**2 - 1)) + b1**2*k1*k2*k3**2*(Mk1*k2 + 2*Mk2*k1) + b1*(ct**2*k1*k2*(-2*Mk1*k2**3*(C - 1) - 2*Mk2*k1*k2**2*(C - 1) - Mk2*k1*k3**2*(K - 1)) + ct*(Mk1*k1**2*k2**3 + Mk1*k2**3*(k2**2 + k3**2) + Mk2*k1**3*(k2**2 + 2*k3**2) + Mk2*k1*k2**2*(k2**2 + k3**2)) + k1*k2*(2*C*k2**2*(Mk1*k2 + Mk2*k1) + Mk2*k1*k3**2*(K + 1)))) + b1*k1*k2*(-18*Mk3*b1*(k2**2 + k3**2) + b11*k3**2*(Mk1*k2 + Mk2*k1)))/(Mk1*Mk2*k1*k2*k3**2) + D1**4*Pk1*Pk3*b1*fNL*(Mk2*b01*(-b1*(K*k1*(Mk1*k3 + Mk3*k1)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2) + Mk1*k1*k3**3 + Mk3*k1**4 - ct**2*k1*k2**2*(Mk1*k3 + Mk3*k1) + ct*k2*k3*(-Mk1*k1**2 + 2*Mk1*k3**2 + Mk3*k1*k3)) + b2*k1*k3**2*(Mk1*k3 + Mk3*k1) + 2*g2*k1*(Mk1*k3 + Mk3*k1)*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1*k1*k3**2*(18*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3 + Mk3*k1) - 6*Mk2**2*b1*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**2) - 2*D1**4*Pk1*Pk3*f**3*fNL*k2**2*mu**2*mu2**4*(Mk2*Mk3*b01*k1*k2**2 + 3*k3**2*(-3*D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) - D1**4*Pk1*Pk3*f**3*fNL*mu**4*mu2**2*(Mk2*b01*k2**2*(3*Mk1*k3**3 - 2*Mk3*k1**3) + 6*k1**2*k3**2*(-3*D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) - 2*D1**4*Pk1*Pk3*f**3*fNL*k2*mu**3*mu2**3*(Mk1*Mk2*b01*k2**2*k3 + 6*k1**2*(-3*D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**2) + D1**4*Pk1*Pk3*f**2*fNL*k1*mu**4*(-Mk2*b01*(Mk1*k3**3 + Mk3*k1**3)*(ct*k2 + k1) + k1*k3**2*(18*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3 + Mk3*k1) - 6*Mk2**2*b1*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) + D1**4*Pk1*Pk3*f**2*fNL*k2**2*mu2**4*(2*Mk2*Mk3*b01*b1*k1*k2**2 + Mk2*Mk3*b01*(ct*k1**2*k2*(3 - 4*C) - ct*k2*k3**2 + k1**3*(1 - 2*C) - k1*(2*ct**2*k2**2*(C - 1) + k3**2*(1 - 2*C))) - 6*b1*k3**2*(-3*D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k3**4) + 2*D1**4*Pk1*Pk3*f**2*fNL*k2*mu**3*mu2*(Mk2*b01*(-Mk1*b1*k3**5 - Mk1*ct*k1*k2*k3**3 - Mk1*k1**2*k3**3 - Mk3*ct*k1**4*k2 + Mk3*k1**5*(b1 - 1)) + k1**2*k3**2*(18*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3 + Mk3*k1) - 6*Mk2**2*b1*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) - 2*D1**4*Pk1*Pk3*f**2*fNL*k2*mu*mu2**3*(Mk2*b01*(Mk3*k1**2*(2*ct**2*k1*k2**2*(C - 1) + ct*k1**2*k2*(4*C - 3) + ct*k2*k3**2 + k1**3*(2*C - 1) + k1*k3**2*(1 - 2*C)) + b1*k2**2*(Mk1*k3**3 - 3*Mk3*k1**3 + Mk3*k1*k3**2)) + 6*b1*k1**2*k3**2*(-3*D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) - D1**4*Pk1*Pk3*f**2*fNL*mu**2*mu2**2*(Mk2*b01*(Mk1*ct*k2*k3**3*(k2**2 + k3**2) + Mk1*k1*k3**3*(k2**2*(2*b1 + 2*ct**2*(C - 1) + 1) + k3**2*(1 - 2*C)) + Mk3*ct*k1**5*k2*(4*C - 3) + Mk3*k1**6*(2*C - 1) + Mk3*k1**4*(k2**2*(-6*b1 + 2*ct**2*(C - 1) + 1) + k3**2*(1 - 2*C)) + k1**3*(Mk1*k3**3*(2*C - 1) + Mk3*ct*k2**3 + Mk3*ct*k2*k3**2) + k1**2*k2*k3**2*(Mk1*ct*k3*(4*C - 3) + 2*Mk3*b1*k2)) + k1*k3**2*(-Mk2*b11*k2**2*(Mk1*k3 + Mk3*k1) + 6*b1*(D1**2*Pk2*(8*(D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3) - 3*(D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(1/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(1/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(D1**2*Pk1/Mk1**2)**(1/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(D1**2*Pk1/Mk1**2)**(1/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(1/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3) - 3*(D1**2*Pk2/Mk2**2)**(1/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3)) + 3*Mk2**2*(D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))*(k1**2 + k2**2 + k3**2)/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk2/Mk2**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(1/3))))/(Mk1*Mk2*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*k2*mu*mu2*(Mk2*b01*(2*Mk3*k1**3*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1**2*k3**2*(Mk1*k1**2*k3 - 2*Mk1*k3**3 + 2*Mk3*k1**3 - Mk3*k1*k3**2) - 2*b1*k1*(2*K*Mk3*ct*k1**3*k2 + Mk1*ct*k2*k3**3 + Mk3*k1**4*(K + 1) + Mk3*k1**2*(-K*k3**2 + ct**2*k2**2*(K - 1)) + k1*k3**2*(Mk1*k3 + Mk3*ct*k2))) + 2*b1*k1**2*k3**2*(18*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3 + Mk3*k1) - 6*Mk2**2*b1*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*mu**2*(-Mk2*b01*(Mk1*k3**3 + Mk3*k1**3)*(b1*(2*K*ct*k1**2*k2 + 2*ct*k2*k3**2 + k1**3*(K + 1) + k1*(K - 1)*(ct**2*k2**2 - k3**2)) - k1*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2))) + b1*k1*k3**2*(k1**2 + k3**2)*(18*D1**2*Pk2*b1*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2*b11*(Mk1*k3 + Mk3*k1) - 6*Mk2**2*b1*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3)))/(Mk1*Mk2*Mk3*k1*k3**4) + D1**4*Pk1*Pk3*f*fNL*mu2**2*(Mk2*b01*(Mk3*k1**2*k2**2*(b2*k3**2 + 2*g2*(ct**2*k2**2 + 2*ct*k1*k2 + k1**2 - k3**2)) + b1**2*k1*k2**2*k3**2*(Mk1*k3 + 2*Mk3*k1) - b1*(Mk1*ct*k2*k3**3*(k2**2 + k3**2) + Mk3*k1**4*(k2**2*(K + 1) + k3**2*(2*C - 1)) + k1**3*(2*K*Mk3*ct*k2**3 + Mk1*k3**3*(2*C - 1) + Mk3*ct*k2*k3**2*(4*C - 3)) + k1**2*(Mk1*ct*k2*k3**3*(4*C - 3) + Mk3*ct**2*k2**2*(k2**2*(K - 1) + 2*k3**2*(C - 1)) + Mk3*k3**2*(-K*k2**2 + k3**2*(1 - 2*C))) + k1*k3**2*(Mk1*k2**2*k3*(2*ct**2*(C - 1) + 1) + Mk1*k3**3*(1 - 2*C) + Mk3*ct*k2**3 + Mk3*ct*k2*k3**2))) + b1*k1*k3**2*(Mk2*b11*k2**2*(Mk1*k3 + Mk3*k1) - 6*b1*(k2**2 + k3**2)*(-3*D1**2*Pk2*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))/((D1**2*Pk1/Mk1**2)**(2/3)*(D1**2*Pk3/Mk3**2)**(2/3)) + Mk2**2*(3*D1**4*Pk1*Pk3 - 3*D1**2*(D1**2*Pk2/Mk2**2)**(1/3)*(Mk1**2*Pk3*(D1**2*Pk1/Mk1**2)**(1/3)*((D1**2*Pk1/Mk1**2)**(1/3) + (D1**2*Pk2/Mk2**2)**(1/3)) + Mk3**2*Pk1*(D1**2*Pk3/Mk3**2)**(1/3)*((D1**2*Pk2/Mk2**2)**(1/3) + (D1**2*Pk3/Mk3**2)**(1/3))) + 8*Mk1**2*Mk3**2*(D1**6*Pk1*Pk2*Pk3/(Mk1**2*Mk2**2*Mk3**2))**(2/3))/(D1**4*Pk1*Pk3))))/(Mk1*Mk2*Mk3*k1*k3**4)
    
    return expr
    
    